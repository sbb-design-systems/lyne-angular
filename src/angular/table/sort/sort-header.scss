@use '@sbb-esta/lyne-elements' as sbb;

.sbb-sort-header {
  cursor: pointer;
  position: relative;

  // Usually we could rely on the arrow showing up to be focus indication, but if a header is
  // active, the arrow will always be shown so the user has no way of telling the difference.
  &:is(.cdk-keyboard-focused, .cdk-program-focused) {
    --sbb-focus-outline-offset: calc(-1 * var(--sbb-focus-outline-width));

    @include sbb.focus-outline;
  }

  &:hover .sbb-sort-header-container {
    // TODO: check
    color: var(--sbb-color-red125);
  }
}

.sbb-sort-header-sorted {
  // TODO: check
  color: var(--sbb-color-charcoal);
}

.sbb-sort-header-container {
  display: flex;
  letter-spacing: normal;
  text-align: left;
  height: 100%;

  // Needs to be reset since we don't want an outline around the inner
  // div which is focusable. We have our own alternate focus styling.
  outline: 0;

  .sbb-sort-header-disabled & {
    cursor: default;
  }

  .sbb-table-align-center & {
    text-align: center;
  }
}

.sbb-sort-header-content {
  flex-shrink: 1;
  flex-grow: 1;
}

.sbb-sort-header-position-before {
  flex-direction: row-reverse;
}

.sbb-sort-header-arrow {
  height: var(--sbb-size-icon-ui-small);
  width: var(--sbb-size-icon-ui-small);
  min-width: var(--sbb-size-icon-ui-small);
  position: relative;

  // Start off at 0 since the arrow may become visible while parent are animating.
  // This will be overwritten when the arrow animations kick in. See #11819.
  opacity: 0;
  transition: {
    property: opacity, translate;
    duration: var(--sbb-disable-animation-duration, var(--sbb-animation-duration-6x));
    timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  }

  margin: #{sbb.px-to-rem-build(-1)} #{sbb.px-to-rem-build(-8)} #{sbb.px-to-rem-build(-1)}
    #{sbb.px-to-rem-build(-8)};

  .sbb-sort-header-position-before & {
    margin: #{sbb.px-to-rem-build(-1)} #{sbb.px-to-rem-build(-8)} #{sbb.px-to-rem-build(-1)}
      #{sbb.px-to-rem-build(-1)};
  }

  svg {
    width: 100%;
    height: 100%;

    :where(path:nth-child(2)) {
      transform-origin: center;
    }
  }

  &.no-transition {
    transition:
      opacity 0ms,
      translate 0ms !important;
  }

  &.active,
  &.desc-to-active,
  &.asc-to-active {
    opacity: 1;
  }

  &.hint,
  &.desc-to-hint,
  &.asc-to-hint {
    opacity: 0.54;
  }

  &.desc,
  &.asc,
  &.void,
  &.hint-to-desc,
  &.active-to-desc,
  &.hint-to-asc,
  &.active-to-asc {
    opacity: 0;
  }

  &.hint,
  &.active,
  &.desc-to-active,
  &.asc-to-active {
    translate: 0;
  }

  &.desc,
  &.active-to-desc {
    translate: 0 25%;
  }

  &.asc,
  &.active-to-asc {
    translate: 0 -25%;
  }

  &.desc-to-hint {
    translate: 0;
    animation: move-desc-to-hint var(--sbb-animation-duration-6x) cubic-bezier(0.4, 0, 0.2, 1);
  }

  &.hint-to-desc {
    translate: 0 25%;
    animation: move-hint-to-desc var(--sbb-animation-duration-6x) cubic-bezier(0.4, 0, 0.2, 1);
  }

  &.asc-to-hint {
    translate: 0;
    animation: move-asc-to-hint var(--sbb-animation-duration-6x) cubic-bezier(0.4, 0, 0.2, 1);
  }

  &.hint-to-asc {
    translate: 0 -25%;
    animation: move-hint-to-asc var(--sbb-animation-duration-6x) cubic-bezier(0.4, 0, 0.2, 1);
  }
}

.sbb-sort-indicator {
  transition: scale var(--sbb-disable-animation-duration, var(--sbb-animation-duration-6x))
    cubic-bezier(0.4, 0, 0.2, 1);

  &.asc,
  &.active-asc {
    scale: 1 -1;
  }

  &.desc,
  &.active-desc {
    scale: 1 1;
  }

  &.no-transition {
    transition: none !important;
  }
}

@keyframes move-desc-to-hint {
  from {
    translate: 0 -25%;
  }
  to {
    translate: 0 0;
  }
}

@keyframes move-hint-to-desc {
  from {
    translate: 0 0;
  }
  to {
    translate: 0 25%;
  }
}

@keyframes move-asc-to-hint {
  from {
    translate: 0 25%;
  }
  to {
    translate: 0 0;
  }
}

@keyframes move-hint-to-asc {
  from {
    translate: 0 0;
  }
  to {
    translate: 0 -25%;
  }
}

{
  "pipes": [],
  "interfaces": [],
  "injectables": [],
  "guards": [],
  "interceptors": [],
  "classes": [
    {
      "name": "SbbControlValueAccessorMixinType",
      "id": "class-SbbControlValueAccessorMixinType-5515ccb4493b3ac5fae1148aa7a4d273e96660299bbdd16927e9c87e735f099716236d2dec86d31e143b64f3fb7dbeaa535873b90e2bea2f2635bb32b2e38998",
      "file": "src/angular/core/control-value-accessor-mixin.ts",
      "deprecated": false,
      "deprecationMessage": "",
      "type": "class",
      "sourceCode": "import { ControlValueAccessor } from '@angular/forms';\nimport { AbstractConstructor } from '@sbb-esta/lyne-elements/core/mixins.js';\n\nexport declare class SbbControlValueAccessorMixinType implements ControlValueAccessor {\n  writeValue(obj: any): void;\n  registerOnChange(fn: any): void;\n  registerOnTouched(fn: any): void;\n  setDisabledState(isDisabled: boolean): void;\n  protected onChangeFn: (value: any) => void;\n  protected onTouchedFn: () => void;\n}\n\nexport const SbbControlValueAccessorMixin = <T extends AbstractConstructor>(\n  superclass: T,\n): AbstractConstructor<SbbControlValueAccessorMixinType> & T => {\n  abstract class SbbControlValueAccessor\n    extends superclass\n    implements Partial<SbbControlValueAccessorMixinType>\n  {\n    abstract value: unknown;\n    abstract disabled: boolean;\n\n    protected onChangeFn: (value: any) => void = () => {};\n    protected onTouchedFn: () => void = () => {};\n\n    /**\n     * @internal\n     */\n    registerOnChange(fn: any): void {\n      this.onChangeFn = fn;\n    }\n\n    /**\n     * @internal\n     */\n    registerOnTouched(fn: any): void {\n      this.onTouchedFn = fn;\n    }\n\n    writeValue(value: any): void {\n      this.value = value;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n      this.disabled = isDisabled;\n    }\n  }\n  return SbbControlValueAccessor as unknown as AbstractConstructor<SbbControlValueAccessorMixinType> &\n    T;\n};\n/* eslint-enable @typescript-eslint/no-explicit-any, @typescript-eslint/no-empty-function */\n",
      "inputsClass": [],
      "outputsClass": [],
      "properties": [
        {
          "name": "onChangeFn",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "function",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 10,
          "modifierKind": [124]
        },
        {
          "name": "onTouchedFn",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "function",
          "indexKey": "",
          "optional": false,
          "description": "",
          "line": 11,
          "modifierKind": [124]
        }
      ],
      "methods": [
        {
          "name": "registerOnChange",
          "args": [
            {
              "name": "fn",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 7,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "fn",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "registerOnTouched",
          "args": [
            {
              "name": "fn",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 8,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "fn",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "setDisabledState",
          "args": [
            {
              "name": "isDisabled",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 9,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "isDisabled",
              "type": "boolean",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "writeValue",
          "args": [
            {
              "name": "obj",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 6,
          "deprecated": false,
          "deprecationMessage": "",
          "jsdoctags": [
            {
              "name": "obj",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "indexSignatures": [],
      "extends": [],
      "hostBindings": [],
      "hostListeners": [],
      "implements": ["ControlValueAccessor"]
    }
  ],
  "directives": [
    {
      "name": "SbbAccentButton",
      "id": "directive-SbbAccentButton-3a28c2a5008824feafed69ff5ec8af89bb4193543f12c253b7cc499aba8b0efc8edda0a13e3f757d98eaf0e72d5aeb75f8b2d3f2b65cde704909944297385ed9",
      "file": "src/angular/button/accent-button/accent-button.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbAccentButtonElement } from '@sbb-esta/lyne-elements/button/accent-button.js';\nimport { SbbButtonSize } from '@sbb-esta/lyne-elements/button.js';\nimport { SbbButtonType } from '@sbb-esta/lyne-elements/core/base-elements.js';\n\nimport '@sbb-esta/lyne-elements/button/accent-button.js';\n\n@Directive({\n  selector: 'sbb-accent-button',\n})\nexport class SbbAccentButton {\n  #element: ElementRef<SbbAccentButtonElement> = inject(ElementRef<SbbAccentButtonElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: SbbButtonSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbButtonSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input({ alias: 'disabled-interactive', transform: booleanAttribute })\n  public set disabledInteractive(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabledInteractive = value));\n  }\n  public get disabledInteractive(): boolean {\n    return this.#element.nativeElement.disabledInteractive;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set form(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.form = value));\n  }\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set type(value: SbbButtonType) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): SbbButtonType {\n    return this.#element.nativeElement.type;\n  }\n}\n",
      "selector": "sbb-accent-button",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 49,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled-interactive",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 41,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "form",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 57,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 65,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "SbbButtonSize",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 81,
          "type": "SbbButtonType",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 73,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbButtonSize",
            "line": 20
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 28
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 33,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 36
          }
        },
        "disabledInteractive": {
          "name": "disabledInteractive",
          "setSignature": {
            "name": "disabledInteractive",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 41,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabledInteractive",
            "type": "boolean",
            "returnType": "boolean",
            "line": 44
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 49,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 52
          }
        },
        "form": {
          "name": "form",
          "setSignature": {
            "name": "form",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 57,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 60
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 65,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 68
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 73,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 76
          }
        },
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 81,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "SbbButtonType",
            "line": 84
          }
        }
      }
    },
    {
      "name": "SbbAccentButtonLink",
      "id": "directive-SbbAccentButtonLink-07da1658ec088d88f856ddc12b8671a81c94d3a82a2b326fe2656958b494ebe3343979d2691611c0b8d59ce925509020fd40f643e3ec6b2ca1229a1c4229314e",
      "file": "src/angular/button/accent-button-link/accent-button-link.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute, SbbRouterLinkSupportMixin } from '@sbb-esta/lyne-angular/core';\nimport type { SbbAccentButtonLinkElement } from '@sbb-esta/lyne-elements/button/accent-button-link.js';\nimport { SbbButtonSize } from '@sbb-esta/lyne-elements/button.js';\nimport { LinkTargetType } from '@sbb-esta/lyne-elements/core/base-elements.js';\n\nimport '@sbb-esta/lyne-elements/button/accent-button-link.js';\n\n@Directive({\n  selector: 'sbb-accent-button-link',\n})\nexport class SbbAccentButtonLink extends SbbRouterLinkSupportMixin(class {}) {\n  #element: ElementRef<SbbAccentButtonLinkElement> = inject(ElementRef<SbbAccentButtonLinkElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: SbbButtonSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbButtonSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input({ alias: 'disabled-interactive', transform: booleanAttribute })\n  public set disabledInteractive(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabledInteractive = value));\n  }\n  public get disabledInteractive(): boolean {\n    return this.#element.nativeElement.disabledInteractive;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set href(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.href = value));\n  }\n  public get href(): string {\n    return this.#element.nativeElement.href;\n  }\n\n  @Input()\n  public set target(value: LinkTargetType | string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.target = value));\n  }\n  public get target(): LinkTargetType | string {\n    return this.#element.nativeElement.target;\n  }\n\n  @Input()\n  public set rel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.rel = value));\n  }\n  public get rel(): string {\n    return this.#element.nativeElement.rel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set download(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.download = value));\n  }\n  public get download(): boolean {\n    return this.#element.nativeElement.download;\n  }\n\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n\n  @Input({ alias: 'accessibility-current' })\n  public set accessibilityCurrent(value: string) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.accessibilityCurrent = value),\n    );\n  }\n  public get accessibilityCurrent(): string {\n    return this.#element.nativeElement.accessibilityCurrent;\n  }\n}\n",
      "selector": "sbb-accent-button-link",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-current",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 97,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 89,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 49,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled-interactive",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 41,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "download",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 81,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "href",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 57,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "rel",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 73,
          "type": "string",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "SbbButtonSize",
          "decorators": []
        },
        {
          "name": "target",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 65,
          "type": "LinkTargetType | string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": ["SbbRouterLinkSupportMixin(class {})"],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbButtonSize",
            "line": 20
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 28
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 33,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 36
          }
        },
        "disabledInteractive": {
          "name": "disabledInteractive",
          "setSignature": {
            "name": "disabledInteractive",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 41,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabledInteractive",
            "type": "boolean",
            "returnType": "boolean",
            "line": 44
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 49,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 52
          }
        },
        "href": {
          "name": "href",
          "setSignature": {
            "name": "href",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 57,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "href",
            "type": "string",
            "returnType": "string",
            "line": 60
          }
        },
        "target": {
          "name": "target",
          "setSignature": {
            "name": "target",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 65,
            "jsdoctags": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "target",
            "type": "",
            "returnType": "LinkTargetType | string",
            "line": 68
          }
        },
        "rel": {
          "name": "rel",
          "setSignature": {
            "name": "rel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 73,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "rel",
            "type": "string",
            "returnType": "string",
            "line": 76
          }
        },
        "download": {
          "name": "download",
          "setSignature": {
            "name": "download",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 81,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "download",
            "type": "boolean",
            "returnType": "boolean",
            "line": 84
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 89,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 92
          }
        },
        "accessibilityCurrent": {
          "name": "accessibilityCurrent",
          "setSignature": {
            "name": "accessibilityCurrent",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 97,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityCurrent",
            "type": "string",
            "returnType": "string",
            "line": 102
          }
        }
      }
    },
    {
      "name": "SbbAccentButtonStatic",
      "id": "directive-SbbAccentButtonStatic-ee473e9724781eec4d14e832f7d9d72baacdb68c84f84b3c2b15e84626ba2039804463dba962060e6f7cb68330252d222fd6d2684e87165df8559db69a1439ce",
      "file": "src/angular/button/accent-button-static/accent-button-static.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbAccentButtonStaticElement } from '@sbb-esta/lyne-elements/button/accent-button-static.js';\nimport { SbbButtonSize } from '@sbb-esta/lyne-elements/button.js';\n\nimport '@sbb-esta/lyne-elements/button/accent-button-static.js';\n\n@Directive({\n  selector: 'sbb-accent-button-static',\n})\nexport class SbbAccentButtonStatic {\n  #element: ElementRef<SbbAccentButtonStaticElement> = inject(\n    ElementRef<SbbAccentButtonStaticElement>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: SbbButtonSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbButtonSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n}\n",
      "selector": "sbb-accent-button-static",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 42,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "SbbButtonSize",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbButtonSize",
            "line": 21
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 29
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 34,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 37
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 42,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 45
          }
        }
      }
    },
    {
      "name": "SbbAccordion",
      "id": "directive-SbbAccordion-005ddeaa73dc3bc58869b81e2586baea6329b646227c1a9c7f54dc72ffe4ce9c69292a0f8a8421285a46d0720b66423191c3a2f97979646c8dc09573551cd1be",
      "file": "src/angular/accordion/accordion.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbAccordionElement } from '@sbb-esta/lyne-elements/accordion.js';\nimport { SbbTitleLevel } from '@sbb-esta/lyne-elements/title.js';\n\nimport '@sbb-esta/lyne-elements/accordion.js';\n\n@Directive({\n  selector: 'sbb-accordion',\n})\nexport class SbbAccordion {\n  #element: ElementRef<SbbAccordionElement> = inject(ElementRef<SbbAccordionElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: 's' | 'l') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): 's' | 'l' {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ alias: 'title-level' })\n  public set titleLevel(value: SbbTitleLevel | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleLevel = value));\n  }\n  public get titleLevel(): SbbTitleLevel | null {\n    return this.#element.nativeElement.titleLevel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set multi(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.multi = value));\n  }\n  public get multi(): boolean {\n    return this.#element.nativeElement.multi;\n  }\n}\n",
      "selector": "sbb-accordion",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "multi",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "\"s\" | \"l\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "title-level",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "SbbTitleLevel | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"s\" | \"l\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"s\" | \"l\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "\"s\" | \"l\"",
            "line": 19
          }
        },
        "titleLevel": {
          "name": "titleLevel",
          "setSignature": {
            "name": "titleLevel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTitleLevel | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 24,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTitleLevel | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleLevel",
            "type": "",
            "returnType": "SbbTitleLevel | null",
            "line": 27
          }
        },
        "multi": {
          "name": "multi",
          "setSignature": {
            "name": "multi",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 32,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "multi",
            "type": "boolean",
            "returnType": "boolean",
            "line": 35
          }
        }
      }
    },
    {
      "name": "SbbActionGroup",
      "id": "directive-SbbActionGroup-0d1647234b1f3a88bbb03a611932d14ccda85e50b8e7beaad39f4aef30b2ecededbad4f42e826031e60cb3c8694dc5e81c74adb72d6c52cdc2f087d82556634a",
      "file": "src/angular/action-group/action-group.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport type { SbbActionGroupElement } from '@sbb-esta/lyne-elements/action-group.js';\nimport { SbbButtonSize } from '@sbb-esta/lyne-elements/button.js';\nimport { SbbHorizontalFrom, SbbOrientation } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport { SbbLinkSize } from '@sbb-esta/lyne-elements/link.js';\n\nimport '@sbb-esta/lyne-elements/action-group.js';\n\n@Directive({\n  selector: 'sbb-action-group',\n})\nexport class SbbActionGroup {\n  #element: ElementRef<SbbActionGroupElement> = inject(ElementRef<SbbActionGroupElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ alias: 'align-group' })\n  public set alignGroup(value: 'start' | 'center' | 'stretch' | 'end') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.alignGroup = value));\n  }\n  public get alignGroup(): 'start' | 'center' | 'stretch' | 'end' {\n    return this.#element.nativeElement.alignGroup;\n  }\n\n  @Input({ alias: 'horizontal-from' })\n  public set horizontalFrom(value: SbbHorizontalFrom) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.horizontalFrom = value));\n  }\n  public get horizontalFrom(): SbbHorizontalFrom {\n    return this.#element.nativeElement.horizontalFrom;\n  }\n\n  @Input()\n  public set orientation(value: SbbOrientation) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.orientation = value));\n  }\n  public get orientation(): SbbOrientation {\n    return this.#element.nativeElement.orientation;\n  }\n\n  @Input({ alias: 'button-size' })\n  public set buttonSize(value: SbbButtonSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.buttonSize = value));\n  }\n  public get buttonSize(): SbbButtonSize {\n    return this.#element.nativeElement.buttonSize;\n  }\n\n  @Input({ alias: 'link-size' })\n  public set linkSize(value: SbbLinkSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.linkSize = value));\n  }\n  public get linkSize(): SbbLinkSize {\n    return this.#element.nativeElement.linkSize;\n  }\n}\n",
      "selector": "sbb-action-group",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "align-group",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "\"start\" | \"center\" | \"stretch\" | \"end\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "button-size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 41,
          "type": "SbbButtonSize",
          "decorators": []
        },
        {
          "required": false,
          "name": "horizontal-from",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "SbbHorizontalFrom",
          "decorators": []
        },
        {
          "required": false,
          "name": "link-size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 49,
          "type": "SbbLinkSize",
          "decorators": []
        },
        {
          "name": "orientation",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "SbbOrientation",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "alignGroup": {
          "name": "alignGroup",
          "setSignature": {
            "name": "alignGroup",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"start\" | \"center\" | \"stretch\" | \"end\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"start\" | \"center\" | \"stretch\" | \"end\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "alignGroup",
            "type": "",
            "returnType": "\"start\" | \"center\" | \"stretch\" | \"end\"",
            "line": 20
          }
        },
        "horizontalFrom": {
          "name": "horizontalFrom",
          "setSignature": {
            "name": "horizontalFrom",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbHorizontalFrom",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbHorizontalFrom",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "horizontalFrom",
            "type": "",
            "returnType": "SbbHorizontalFrom",
            "line": 28
          }
        },
        "orientation": {
          "name": "orientation",
          "setSignature": {
            "name": "orientation",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbOrientation",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 33,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbOrientation",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "orientation",
            "type": "",
            "returnType": "SbbOrientation",
            "line": 36
          }
        },
        "buttonSize": {
          "name": "buttonSize",
          "setSignature": {
            "name": "buttonSize",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 41,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "buttonSize",
            "type": "",
            "returnType": "SbbButtonSize",
            "line": 44
          }
        },
        "linkSize": {
          "name": "linkSize",
          "setSignature": {
            "name": "linkSize",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 49,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "linkSize",
            "type": "",
            "returnType": "SbbLinkSize",
            "line": 52
          }
        }
      }
    },
    {
      "name": "SbbAlert",
      "id": "directive-SbbAlert-94168d72c74678404b0b79b8b2319a8442893a603a9b08047a92b40b2be881ba67cfddf80eb3ec324a7481f1bfbdfc0ca18cff6f0920b754b00c8d16385ddaf7",
      "file": "src/angular/alert/alert/alert.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone, Output } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbAlertElement } from '@sbb-esta/lyne-elements/alert/alert.js';\nimport { SbbTitleLevel } from '@sbb-esta/lyne-elements/title.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/alert/alert.js';\n\n@Directive({\n  selector: 'sbb-alert',\n})\nexport class SbbAlert {\n  #element: ElementRef<SbbAlertElement> = inject(ElementRef<SbbAlertElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set readonly(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.readonly = value));\n  }\n  public get readonly(): boolean {\n    return this.#element.nativeElement.readonly;\n  }\n\n  @Input()\n  public set size(value: 's' | 'm' | 'l') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): 's' | 'm' | 'l' {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input({ alias: 'title-content' })\n  public set titleContent(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleContent = value));\n  }\n  public get titleContent(): string {\n    return this.#element.nativeElement.titleContent;\n  }\n\n  @Input({ alias: 'title-level' })\n  public set titleLevel(value: SbbTitleLevel) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleLevel = value));\n  }\n  public get titleLevel(): SbbTitleLevel {\n    return this.#element.nativeElement.titleLevel;\n  }\n\n  @Input()\n  public set animation(value: 'open' | 'close' | 'all' | 'none') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.animation = value));\n  }\n  public get animation(): 'open' | 'close' | 'all' | 'none' {\n    return this.#element.nativeElement.animation;\n  }\n\n  @Output() public willOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  );\n\n  @Output() public didOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  );\n\n  @Output() public willClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  );\n\n  @Output() public didClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  );\n\n  public get isOpen(): boolean {\n    return this.#element.nativeElement.isOpen;\n  }\n\n  public open(): void {\n    return this.#element.nativeElement.open();\n  }\n\n  public close(): void {\n    return this.#element.nativeElement.close();\n  }\n}\n",
      "selector": "sbb-alert",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "name": "animation",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 56,
          "type": "\"open\" | \"close\" | \"all\" | \"none\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "readonly",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "\"s\" | \"m\" | \"l\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "title-content",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "title-level",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 48,
          "type": "SbbTitleLevel",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "didClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 78,
          "type": "Observable<void>"
        },
        {
          "name": "didOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 68,
          "type": "Observable<void>"
        },
        {
          "name": "willClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 73,
          "type": "Observable<void>"
        },
        {
          "name": "willOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 63,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 91,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        },
        {
          "name": "open",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 87,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": [],
      "accessors": {
        "readonly": {
          "name": "readonly",
          "setSignature": {
            "name": "readonly",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "readonly",
            "type": "boolean",
            "returnType": "boolean",
            "line": 19
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"s\" | \"m\" | \"l\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 24,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"s\" | \"m\" | \"l\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "\"s\" | \"m\" | \"l\"",
            "line": 27
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 32,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 35
          }
        },
        "titleContent": {
          "name": "titleContent",
          "setSignature": {
            "name": "titleContent",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 40,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleContent",
            "type": "string",
            "returnType": "string",
            "line": 43
          }
        },
        "titleLevel": {
          "name": "titleLevel",
          "setSignature": {
            "name": "titleLevel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 48,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleLevel",
            "type": "",
            "returnType": "SbbTitleLevel",
            "line": 51
          }
        },
        "animation": {
          "name": "animation",
          "setSignature": {
            "name": "animation",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"open\" | \"close\" | \"all\" | \"none\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 56,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"open\" | \"close\" | \"all\" | \"none\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "animation",
            "type": "",
            "returnType": "\"open\" | \"close\" | \"all\" | \"none\"",
            "line": 59
          }
        },
        "isOpen": {
          "name": "isOpen",
          "getSignature": {
            "name": "isOpen",
            "type": "boolean",
            "returnType": "boolean",
            "line": 83
          }
        }
      }
    },
    {
      "name": "SbbAlertGroup",
      "id": "directive-SbbAlertGroup-3ead85b7957d91532175e227b15551f2480ec49e582ace3cc754518911eebc7b91f1943851fc495cfb6ae1c4b4d156cbb1d3816f11cd8d14de5c3840882ca3fa",
      "file": "src/angular/alert/alert-group/alert-group.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone, Output } from '@angular/core';\nimport type { SbbAlertGroupElement } from '@sbb-esta/lyne-elements/alert/alert-group.js';\nimport { SbbTitleLevel } from '@sbb-esta/lyne-elements/title.js';\nimport { fromEvent, type Observable } from 'rxjs';\n\nimport '@sbb-esta/lyne-elements/alert/alert-group.js';\n\n@Directive({\n  selector: 'sbb-alert-group',\n})\nexport class SbbAlertGroup {\n  #element: ElementRef<SbbAlertGroupElement> = inject(ElementRef<SbbAlertGroupElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set role(value: 'alert' | 'status' | string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.role = value));\n  }\n  public get role(): 'alert' | 'status' | string {\n    return this.#element.nativeElement.role;\n  }\n\n  @Input({ alias: 'accessibility-title' })\n  public set accessibilityTitle(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityTitle = value));\n  }\n  public get accessibilityTitle(): string {\n    return this.#element.nativeElement.accessibilityTitle;\n  }\n\n  @Input({ alias: 'accessibility-title-level' })\n  public set accessibilityTitleLevel(value: SbbTitleLevel) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.accessibilityTitleLevel = value),\n    );\n  }\n  public get accessibilityTitleLevel(): SbbTitleLevel {\n    return this.#element.nativeElement.accessibilityTitleLevel;\n  }\n\n  @Output() public empty: Observable<void> = fromEvent<void>(this.#element.nativeElement, 'empty');\n}\n",
      "selector": "sbb-alert-group",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-title",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "accessibility-title-level",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "SbbTitleLevel",
          "decorators": []
        },
        {
          "name": "role",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "\"alert\" | \"status\" | string",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "empty",
          "defaultValue": "fromEvent<void>(this.#element.nativeElement, 'empty')",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 41,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "role": {
          "name": "role",
          "setSignature": {
            "name": "role",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"alert\" | \"status\" | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"alert\" | \"status\" | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "role",
            "type": "",
            "returnType": "\"alert\" | \"status\" | string",
            "line": 19
          }
        },
        "accessibilityTitle": {
          "name": "accessibilityTitle",
          "setSignature": {
            "name": "accessibilityTitle",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 24,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityTitle",
            "type": "string",
            "returnType": "string",
            "line": 27
          }
        },
        "accessibilityTitleLevel": {
          "name": "accessibilityTitleLevel",
          "setSignature": {
            "name": "accessibilityTitleLevel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 32,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityTitleLevel",
            "type": "",
            "returnType": "SbbTitleLevel",
            "line": 37
          }
        }
      }
    },
    {
      "name": "SbbAutocomplete",
      "id": "directive-SbbAutocomplete-e6cc1aea56931ee035707f1561991bfdf6688a22cbd90091fde9dceaaccb4ec0accbce8d73a72351c8d10a4df4dda3c14c79a1b5f37cb6e6739f5e648c0249b9",
      "file": "src/angular/autocomplete/autocomplete.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone, Output } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbAutocompleteElement } from '@sbb-esta/lyne-elements/autocomplete.js';\nimport { fromEvent, type Observable } from 'rxjs';\n\nimport '@sbb-esta/lyne-elements/autocomplete.js';\n\n@Directive({\n  selector: 'sbb-autocomplete',\n})\nexport class SbbAutocomplete {\n  #element: ElementRef<SbbAutocompleteElement> = inject(ElementRef<SbbAutocompleteElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input()\n  public set origin(value: string | HTMLElement | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.origin = value));\n  }\n  public get origin(): string | HTMLElement | null {\n    return this.#element.nativeElement.origin;\n  }\n\n  @Input()\n  public set trigger(value: string | HTMLInputElement | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.trigger = value));\n  }\n  public get trigger(): string | HTMLInputElement | null {\n    return this.#element.nativeElement.trigger;\n  }\n\n  @Input({ alias: 'preserve-icon-space', transform: booleanAttribute })\n  public set preserveIconSpace(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.preserveIconSpace = value));\n  }\n  public get preserveIconSpace(): boolean {\n    return this.#element.nativeElement.preserveIconSpace;\n  }\n\n  @Output() public willOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  );\n\n  @Output() public didOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  );\n\n  @Output() public willClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  );\n\n  @Output() public didClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  );\n\n  public get originElement(): HTMLElement {\n    return this.#element.nativeElement.originElement;\n  }\n\n  public get triggerElement(): HTMLInputElement | undefined {\n    return this.#element.nativeElement.triggerElement;\n  }\n\n  public get isOpen(): boolean {\n    return this.#element.nativeElement.isOpen;\n  }\n\n  public open(): void {\n    return this.#element.nativeElement.open();\n  }\n\n  public close(): void {\n    return this.#element.nativeElement.close();\n  }\n}\n",
      "selector": "sbb-autocomplete",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "origin",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "string | HTMLElement | null",
          "decorators": []
        },
        {
          "required": false,
          "name": "preserve-icon-space",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "trigger",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "string | HTMLInputElement | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "didClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 62,
          "type": "Observable<void>"
        },
        {
          "name": "didOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 52,
          "type": "Observable<void>"
        },
        {
          "name": "willClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 57,
          "type": "Observable<void>"
        },
        {
          "name": "willOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 47,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 83,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        },
        {
          "name": "open",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 79,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": [],
      "accessors": {
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 19
          }
        },
        "origin": {
          "name": "origin",
          "setSignature": {
            "name": "origin",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | HTMLElement | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 24,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | HTMLElement | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "origin",
            "type": "",
            "returnType": "string | HTMLElement | null",
            "line": 27
          }
        },
        "trigger": {
          "name": "trigger",
          "setSignature": {
            "name": "trigger",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | HTMLInputElement | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 32,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | HTMLInputElement | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "trigger",
            "type": "",
            "returnType": "string | HTMLInputElement | null",
            "line": 35
          }
        },
        "preserveIconSpace": {
          "name": "preserveIconSpace",
          "setSignature": {
            "name": "preserveIconSpace",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 40,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "preserveIconSpace",
            "type": "boolean",
            "returnType": "boolean",
            "line": 43
          }
        },
        "originElement": {
          "name": "originElement",
          "getSignature": {
            "name": "originElement",
            "type": "",
            "returnType": "HTMLElement",
            "line": 67
          }
        },
        "triggerElement": {
          "name": "triggerElement",
          "getSignature": {
            "name": "triggerElement",
            "type": "",
            "returnType": "HTMLInputElement | undefined",
            "line": 71
          }
        },
        "isOpen": {
          "name": "isOpen",
          "getSignature": {
            "name": "isOpen",
            "type": "boolean",
            "returnType": "boolean",
            "line": 75
          }
        }
      }
    },
    {
      "name": "SbbAutocompleteGrid",
      "id": "directive-SbbAutocompleteGrid-a067aa155c1e75b747cee56db644260e38b2540b75b6c8502e539712911e8e4603dff91788a5abebe48d62696bf4ffa38012d59269918f6de6c0491fd4787d95",
      "file": "src/angular/autocomplete-grid/autocomplete-grid/autocomplete-grid.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone, Output } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbAutocompleteGridElement } from '@sbb-esta/lyne-elements/autocomplete-grid/autocomplete-grid.js';\nimport { fromEvent, type Observable } from 'rxjs';\n\nimport '@sbb-esta/lyne-elements/autocomplete-grid/autocomplete-grid.js';\n\n@Directive({\n  selector: 'sbb-autocomplete-grid',\n})\nexport class SbbAutocompleteGrid {\n  #element: ElementRef<SbbAutocompleteGridElement> = inject(ElementRef<SbbAutocompleteGridElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input()\n  public set origin(value: string | HTMLElement | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.origin = value));\n  }\n  public get origin(): string | HTMLElement | null {\n    return this.#element.nativeElement.origin;\n  }\n\n  @Input()\n  public set trigger(value: string | HTMLInputElement | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.trigger = value));\n  }\n  public get trigger(): string | HTMLInputElement | null {\n    return this.#element.nativeElement.trigger;\n  }\n\n  @Input({ alias: 'preserve-icon-space', transform: booleanAttribute })\n  public set preserveIconSpace(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.preserveIconSpace = value));\n  }\n  public get preserveIconSpace(): boolean {\n    return this.#element.nativeElement.preserveIconSpace;\n  }\n\n  @Output() public willOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  );\n\n  @Output() public didOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  );\n\n  @Output() public willClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  );\n\n  @Output() public didClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  );\n\n  public get originElement(): HTMLElement {\n    return this.#element.nativeElement.originElement;\n  }\n\n  public get triggerElement(): HTMLInputElement | undefined {\n    return this.#element.nativeElement.triggerElement;\n  }\n\n  public get isOpen(): boolean {\n    return this.#element.nativeElement.isOpen;\n  }\n\n  public open(): void {\n    return this.#element.nativeElement.open();\n  }\n\n  public close(): void {\n    return this.#element.nativeElement.close();\n  }\n}\n",
      "selector": "sbb-autocomplete-grid",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "origin",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "string | HTMLElement | null",
          "decorators": []
        },
        {
          "required": false,
          "name": "preserve-icon-space",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "trigger",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "string | HTMLInputElement | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "didClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 62,
          "type": "Observable<void>"
        },
        {
          "name": "didOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 52,
          "type": "Observable<void>"
        },
        {
          "name": "willClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 57,
          "type": "Observable<void>"
        },
        {
          "name": "willOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 47,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 83,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        },
        {
          "name": "open",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 79,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": [],
      "accessors": {
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 19
          }
        },
        "origin": {
          "name": "origin",
          "setSignature": {
            "name": "origin",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | HTMLElement | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 24,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | HTMLElement | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "origin",
            "type": "",
            "returnType": "string | HTMLElement | null",
            "line": 27
          }
        },
        "trigger": {
          "name": "trigger",
          "setSignature": {
            "name": "trigger",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | HTMLInputElement | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 32,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | HTMLInputElement | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "trigger",
            "type": "",
            "returnType": "string | HTMLInputElement | null",
            "line": 35
          }
        },
        "preserveIconSpace": {
          "name": "preserveIconSpace",
          "setSignature": {
            "name": "preserveIconSpace",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 40,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "preserveIconSpace",
            "type": "boolean",
            "returnType": "boolean",
            "line": 43
          }
        },
        "originElement": {
          "name": "originElement",
          "getSignature": {
            "name": "originElement",
            "type": "",
            "returnType": "HTMLElement",
            "line": 67
          }
        },
        "triggerElement": {
          "name": "triggerElement",
          "getSignature": {
            "name": "triggerElement",
            "type": "",
            "returnType": "HTMLInputElement | undefined",
            "line": 71
          }
        },
        "isOpen": {
          "name": "isOpen",
          "getSignature": {
            "name": "isOpen",
            "type": "boolean",
            "returnType": "boolean",
            "line": 75
          }
        }
      }
    },
    {
      "name": "SbbAutocompleteGridButton",
      "id": "directive-SbbAutocompleteGridButton-b4cc42a0aff0b3cc1fb198b70a90bdabad6019a6301dc72e88bd6e4e55fe73fe7cb3471dde05c0f38e383b85c7ad4ee1e8820a7b4a4c868e22598aa4579f9e85",
      "file": "src/angular/autocomplete-grid/autocomplete-grid-button/autocomplete-grid-button.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbAutocompleteGridButtonElement } from '@sbb-esta/lyne-elements/autocomplete-grid/autocomplete-grid-button.js';\nimport { SbbAutocompleteGridOptionElement } from '@sbb-esta/lyne-elements/autocomplete-grid/autocomplete-grid-option.js';\n\nimport '@sbb-esta/lyne-elements/autocomplete-grid/autocomplete-grid-button.js';\n\n@Directive({\n  selector: 'sbb-autocomplete-grid-button',\n})\nexport class SbbAutocompleteGridButton {\n  #element: ElementRef<SbbAutocompleteGridButtonElement> = inject(\n    ElementRef<SbbAutocompleteGridButtonElement>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  public get option(): SbbAutocompleteGridOptionElement | null {\n    return this.#element.nativeElement.option;\n  }\n}\n",
      "selector": "sbb-autocomplete-grid-button",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 21
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 29
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 34,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 37
          }
        },
        "option": {
          "name": "option",
          "getSignature": {
            "name": "option",
            "type": "",
            "returnType": "SbbAutocompleteGridOptionElement | null",
            "line": 41
          }
        }
      }
    },
    {
      "name": "SbbAutocompleteGridCell",
      "id": "directive-SbbAutocompleteGridCell-c270bcc68918441872295f6ba9090591af3f299be923597da08f0a2bd089bd818db0544f5247158b4acb1db1c9e7817ec3d6c7246aada4c2be3cfa32c33edab8",
      "file": "src/angular/autocomplete-grid/autocomplete-grid-cell/autocomplete-grid-cell.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive } from '@angular/core';\n\nimport '@sbb-esta/lyne-elements/autocomplete-grid/autocomplete-grid-cell.js';\n\n@Directive({\n  selector: 'sbb-autocomplete-grid-cell',\n})\nexport class SbbAutocompleteGridCell {}\n",
      "selector": "sbb-autocomplete-grid-cell",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": []
    },
    {
      "name": "SbbAutocompleteGridOptgroup",
      "id": "directive-SbbAutocompleteGridOptgroup-78b2302c95be248a3dff7fccd5b2387401e3a746c9f7086c72fddeafee937b9331e0b5adace7e8ee8dc61c31c6bbe851e715739dd21dde5a4a80db4f718a94b1",
      "file": "src/angular/autocomplete-grid/autocomplete-grid-optgroup/autocomplete-grid-optgroup.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbAutocompleteGridOptgroupElement } from '@sbb-esta/lyne-elements/autocomplete-grid/autocomplete-grid-optgroup.js';\n\nimport '@sbb-esta/lyne-elements/autocomplete-grid/autocomplete-grid-optgroup.js';\n\n@Directive({\n  selector: 'sbb-autocomplete-grid-optgroup',\n})\nexport class SbbAutocompleteGridOptgroup {\n  #element: ElementRef<SbbAutocompleteGridOptgroupElement> = inject(\n    ElementRef<SbbAutocompleteGridOptgroupElement>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set label(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.label = value));\n  }\n  public get label(): string {\n    return this.#element.nativeElement.label;\n  }\n}\n",
      "selector": "sbb-autocomplete-grid-optgroup",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 20
          }
        },
        "label": {
          "name": "label",
          "setSignature": {
            "name": "label",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "label",
            "type": "string",
            "returnType": "string",
            "line": 28
          }
        }
      }
    },
    {
      "name": "SbbAutocompleteGridOption",
      "id": "directive-SbbAutocompleteGridOption-845a478bd36c2850b46bee500d38edf1555da663dbb77ff83996dd89eddd0c82f1bbe20f1573b209e0d59cf10c9f4e3a823bacac33b0e43f9f60eaf22ab7d756",
      "file": "src/angular/autocomplete-grid/autocomplete-grid-option/autocomplete-grid-option.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone, Output } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbAutocompleteGridOptionElement } from '@sbb-esta/lyne-elements/autocomplete-grid/autocomplete-grid-option.js';\nimport { fromEvent, type Observable } from 'rxjs';\n\nimport '@sbb-esta/lyne-elements/autocomplete-grid/autocomplete-grid-option.js';\n\n@Directive({\n  selector: 'sbb-autocomplete-grid-option',\n})\nexport class SbbAutocompleteGridOption {\n  #element: ElementRef<SbbAutocompleteGridOptionElement> = inject(\n    ElementRef<SbbAutocompleteGridOptionElement>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input()\n  public set value(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set selected(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.selected = value));\n  }\n  public get selected(): boolean {\n    return this.#element.nativeElement.selected;\n  }\n\n  @Output() public autocompleteOptionSelectionChange: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'autocompleteOptionSelectionChange',\n  );\n\n  @Output() public autocompleteOptionSelected: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'autocompleteOptionSelected',\n  );\n}\n",
      "selector": "sbb-autocomplete-grid-option",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "selected",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 42,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "autocompleteOptionSelected",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'autocompleteOptionSelected',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 54,
          "type": "Observable<void>"
        },
        {
          "name": "autocompleteOptionSelectionChange",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'autocompleteOptionSelectionChange',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 49,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 21
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 29
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 34,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "string",
            "returnType": "string",
            "line": 37
          }
        },
        "selected": {
          "name": "selected",
          "setSignature": {
            "name": "selected",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 42,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "selected",
            "type": "boolean",
            "returnType": "boolean",
            "line": 45
          }
        }
      }
    },
    {
      "name": "SbbAutocompleteGridRow",
      "id": "directive-SbbAutocompleteGridRow-49540a3cd4f995c792ddd41a97fafea380a66c409138a348d943e3727f72b78f236aa79acaf60cdbd15cfa2dbd25a2cefc884908e5353d05dd1c77e1a712630c",
      "file": "src/angular/autocomplete-grid/autocomplete-grid-row/autocomplete-grid-row.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive } from '@angular/core';\n\nimport '@sbb-esta/lyne-elements/autocomplete-grid/autocomplete-grid-row.js';\n\n@Directive({\n  selector: 'sbb-autocomplete-grid-row',\n})\nexport class SbbAutocompleteGridRow {}\n",
      "selector": "sbb-autocomplete-grid-row",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": []
    },
    {
      "name": "SbbBlockLink",
      "id": "directive-SbbBlockLink-157274ff3eb6a2740d1fe7074367ab589fa352948b857b5d7cd433b8d680629f125be5fc6aaca7eea8ecb568a9e7453335361182cfd68a204dbb740cc31c04ba",
      "file": "src/angular/link/block-link/block-link.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute, SbbRouterLinkSupportMixin } from '@sbb-esta/lyne-angular/core';\nimport { LinkTargetType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport { SbbIconPlacement } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport type { SbbBlockLinkElement } from '@sbb-esta/lyne-elements/link/block-link.js';\nimport { SbbLinkSize } from '@sbb-esta/lyne-elements/link.js';\n\nimport '@sbb-esta/lyne-elements/link/block-link.js';\n\n@Directive({\n  selector: 'sbb-block-link',\n})\nexport class SbbBlockLink extends SbbRouterLinkSupportMixin(class {}) {\n  #element: ElementRef<SbbBlockLinkElement> = inject(ElementRef<SbbBlockLinkElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ alias: 'icon-placement' })\n  public set iconPlacement(value: SbbIconPlacement) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconPlacement = value));\n  }\n  public get iconPlacement(): SbbIconPlacement {\n    return this.#element.nativeElement.iconPlacement;\n  }\n\n  @Input()\n  public set size(value: SbbLinkSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbLinkSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set href(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.href = value));\n  }\n  public get href(): string {\n    return this.#element.nativeElement.href;\n  }\n\n  @Input()\n  public set target(value: LinkTargetType | string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.target = value));\n  }\n  public get target(): LinkTargetType | string {\n    return this.#element.nativeElement.target;\n  }\n\n  @Input()\n  public set rel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.rel = value));\n  }\n  public get rel(): string {\n    return this.#element.nativeElement.rel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set download(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.download = value));\n  }\n  public get download(): boolean {\n    return this.#element.nativeElement.download;\n  }\n\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n\n  @Input({ alias: 'accessibility-current' })\n  public set accessibilityCurrent(value: string) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.accessibilityCurrent = value),\n    );\n  }\n  public get accessibilityCurrent(): string {\n    return this.#element.nativeElement.accessibilityCurrent;\n  }\n}\n",
      "selector": "sbb-block-link",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-current",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 90,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 82,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 42,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "download",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 74,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "href",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 50,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-placement",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "SbbIconPlacement",
          "decorators": []
        },
        {
          "name": "rel",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 66,
          "type": "string",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "SbbLinkSize",
          "decorators": []
        },
        {
          "name": "target",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 58,
          "type": "LinkTargetType | string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": ["SbbRouterLinkSupportMixin(class {})"],
      "accessors": {
        "iconPlacement": {
          "name": "iconPlacement",
          "setSignature": {
            "name": "iconPlacement",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbIconPlacement",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbIconPlacement",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconPlacement",
            "type": "",
            "returnType": "SbbIconPlacement",
            "line": 21
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbLinkSize",
            "line": 29
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 34,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 37
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 42,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 45
          }
        },
        "href": {
          "name": "href",
          "setSignature": {
            "name": "href",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 50,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "href",
            "type": "string",
            "returnType": "string",
            "line": 53
          }
        },
        "target": {
          "name": "target",
          "setSignature": {
            "name": "target",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 58,
            "jsdoctags": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "target",
            "type": "",
            "returnType": "LinkTargetType | string",
            "line": 61
          }
        },
        "rel": {
          "name": "rel",
          "setSignature": {
            "name": "rel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 66,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "rel",
            "type": "string",
            "returnType": "string",
            "line": 69
          }
        },
        "download": {
          "name": "download",
          "setSignature": {
            "name": "download",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 74,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "download",
            "type": "boolean",
            "returnType": "boolean",
            "line": 77
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 82,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 85
          }
        },
        "accessibilityCurrent": {
          "name": "accessibilityCurrent",
          "setSignature": {
            "name": "accessibilityCurrent",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 90,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityCurrent",
            "type": "string",
            "returnType": "string",
            "line": 95
          }
        }
      }
    },
    {
      "name": "SbbBlockLinkButton",
      "id": "directive-SbbBlockLinkButton-87a5438685f8ec6504299f437e576a92707e15e06787e3def38086773a095534b52bbbc7d7f6264d8ad0a832c5cb3513e538b8c670d8399dd2c291dbba8acd59",
      "file": "src/angular/link/block-link-button/block-link-button.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbButtonType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport { SbbIconPlacement } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport type { SbbBlockLinkButtonElement } from '@sbb-esta/lyne-elements/link/block-link-button.js';\nimport { SbbLinkSize } from '@sbb-esta/lyne-elements/link.js';\n\nimport '@sbb-esta/lyne-elements/link/block-link-button.js';\n\n@Directive({\n  selector: 'sbb-block-link-button',\n})\nexport class SbbBlockLinkButton {\n  #element: ElementRef<SbbBlockLinkButtonElement> = inject(ElementRef<SbbBlockLinkButtonElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ alias: 'icon-placement' })\n  public set iconPlacement(value: SbbIconPlacement) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconPlacement = value));\n  }\n  public get iconPlacement(): SbbIconPlacement {\n    return this.#element.nativeElement.iconPlacement;\n  }\n\n  @Input()\n  public set size(value: SbbLinkSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbLinkSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input({ alias: 'disabled-interactive', transform: booleanAttribute })\n  public set disabledInteractive(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabledInteractive = value));\n  }\n  public get disabledInteractive(): boolean {\n    return this.#element.nativeElement.disabledInteractive;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set form(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.form = value));\n  }\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set type(value: SbbButtonType) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): SbbButtonType {\n    return this.#element.nativeElement.type;\n  }\n}\n",
      "selector": "sbb-block-link-button",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 50,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled-interactive",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 42,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "form",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 58,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-placement",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "SbbIconPlacement",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 66,
          "type": "string",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "SbbLinkSize",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 82,
          "type": "SbbButtonType",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 74,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "iconPlacement": {
          "name": "iconPlacement",
          "setSignature": {
            "name": "iconPlacement",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbIconPlacement",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbIconPlacement",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconPlacement",
            "type": "",
            "returnType": "SbbIconPlacement",
            "line": 21
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbLinkSize",
            "line": 29
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 34,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 37
          }
        },
        "disabledInteractive": {
          "name": "disabledInteractive",
          "setSignature": {
            "name": "disabledInteractive",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 42,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabledInteractive",
            "type": "boolean",
            "returnType": "boolean",
            "line": 45
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 50,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 53
          }
        },
        "form": {
          "name": "form",
          "setSignature": {
            "name": "form",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 58,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 61
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 66,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 69
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 74,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 77
          }
        },
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 82,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "SbbButtonType",
            "line": 85
          }
        }
      }
    },
    {
      "name": "SbbBlockLinkStatic",
      "id": "directive-SbbBlockLinkStatic-106082ffc52a0a3991bc2e11a63c324243bb87c19184c722525425363a27bc8f9ae5fda89c939b993b7dce6b80902ea705dcee5a6746b1e30fe38969de3d4f05",
      "file": "src/angular/link/block-link-static/block-link-static.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbIconPlacement } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport type { SbbBlockLinkStaticElement } from '@sbb-esta/lyne-elements/link/block-link-static.js';\nimport { SbbLinkSize } from '@sbb-esta/lyne-elements/link.js';\nimport '@sbb-esta/lyne-elements/link/block-link-static.js';\n\n@Directive({\n  selector: 'sbb-block-link-static',\n})\nexport class SbbBlockLinkStatic {\n  #element: ElementRef<SbbBlockLinkStaticElement> = inject(ElementRef<SbbBlockLinkStaticElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ alias: 'icon-placement' })\n  public set iconPlacement(value: SbbIconPlacement) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconPlacement = value));\n  }\n  public get iconPlacement(): SbbIconPlacement {\n    return this.#element.nativeElement.iconPlacement;\n  }\n\n  @Input()\n  public set size(value: SbbLinkSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbLinkSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n}\n",
      "selector": "sbb-block-link-static",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-placement",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "SbbIconPlacement",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "SbbLinkSize",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "iconPlacement": {
          "name": "iconPlacement",
          "setSignature": {
            "name": "iconPlacement",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbIconPlacement",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbIconPlacement",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconPlacement",
            "type": "",
            "returnType": "SbbIconPlacement",
            "line": 19
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 24,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbLinkSize",
            "line": 27
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 32,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 35
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 40,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 43
          }
        }
      }
    },
    {
      "name": "SbbBreadcrumb",
      "id": "directive-SbbBreadcrumb-3b13dcb6c362e1d828b7b5c6991056bbaf77e39f78729468bc194bc54f9437797bb8f584e02f7044778a581a8baa5f8a2fc80dcb0f7c77b35c62815cdd94e591",
      "file": "src/angular/breadcrumb/breadcrumb/breadcrumb.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute, SbbRouterLinkSupportMixin } from '@sbb-esta/lyne-angular/core';\nimport type { SbbBreadcrumbElement } from '@sbb-esta/lyne-elements/breadcrumb/breadcrumb.js';\nimport { LinkTargetType } from '@sbb-esta/lyne-elements/core/base-elements.js';\n\nimport '@sbb-esta/lyne-elements/breadcrumb/breadcrumb.js';\n\n@Directive({\n  selector: 'sbb-breadcrumb',\n})\nexport class SbbBreadcrumb extends SbbRouterLinkSupportMixin(class {}) {\n  #element: ElementRef<SbbBreadcrumbElement> = inject(ElementRef<SbbBreadcrumbElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input()\n  public set href(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.href = value));\n  }\n  public get href(): string {\n    return this.#element.nativeElement.href;\n  }\n\n  @Input()\n  public set target(value: LinkTargetType | string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.target = value));\n  }\n  public get target(): LinkTargetType | string {\n    return this.#element.nativeElement.target;\n  }\n\n  @Input()\n  public set rel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.rel = value));\n  }\n  public get rel(): string {\n    return this.#element.nativeElement.rel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set download(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.download = value));\n  }\n  public get download(): boolean {\n    return this.#element.nativeElement.download;\n  }\n\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n\n  @Input({ alias: 'accessibility-current' })\n  public set accessibilityCurrent(value: string) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.accessibilityCurrent = value),\n    );\n  }\n  public get accessibilityCurrent(): string {\n    return this.#element.nativeElement.accessibilityCurrent;\n  }\n}\n",
      "selector": "sbb-breadcrumb",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-current",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 64,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 56,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "download",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 48,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "href",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "string",
          "decorators": []
        },
        {
          "name": "rel",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "string",
          "decorators": []
        },
        {
          "name": "target",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "LinkTargetType | string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": ["SbbRouterLinkSupportMixin(class {})"],
      "accessors": {
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 19
          }
        },
        "href": {
          "name": "href",
          "setSignature": {
            "name": "href",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 24,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "href",
            "type": "string",
            "returnType": "string",
            "line": 27
          }
        },
        "target": {
          "name": "target",
          "setSignature": {
            "name": "target",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 32,
            "jsdoctags": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "target",
            "type": "",
            "returnType": "LinkTargetType | string",
            "line": 35
          }
        },
        "rel": {
          "name": "rel",
          "setSignature": {
            "name": "rel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 40,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "rel",
            "type": "string",
            "returnType": "string",
            "line": 43
          }
        },
        "download": {
          "name": "download",
          "setSignature": {
            "name": "download",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 48,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "download",
            "type": "boolean",
            "returnType": "boolean",
            "line": 51
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 56,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 59
          }
        },
        "accessibilityCurrent": {
          "name": "accessibilityCurrent",
          "setSignature": {
            "name": "accessibilityCurrent",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 64,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityCurrent",
            "type": "string",
            "returnType": "string",
            "line": 69
          }
        }
      }
    },
    {
      "name": "SbbBreadcrumbGroup",
      "id": "directive-SbbBreadcrumbGroup-1a3c6412eac068f8688cff38216a8550873f474edf67868da02345d67163f6cbae7b4192012231ea925047df74ead62c5565d731caca598cf590d1fc3813cf3f",
      "file": "src/angular/breadcrumb/breadcrumb-group/breadcrumb-group.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive } from '@angular/core';\n\nimport '@sbb-esta/lyne-elements/breadcrumb/breadcrumb-group.js';\n\n@Directive({\n  selector: 'sbb-breadcrumb-group',\n})\nexport class SbbBreadcrumbGroup {}\n",
      "selector": "sbb-breadcrumb-group",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": []
    },
    {
      "name": "SbbButton",
      "id": "directive-SbbButton-3b20d6ca88c069c6020ba5c4fa7b4bc437e541d39dd03c8627211a89ef9f028a3ad41b70c02f0a8dad909433cdc63ebff7b7562c339ff1af2e71a1d04915bda2",
      "file": "src/angular/button/button/button.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbButtonElement } from '@sbb-esta/lyne-elements/button/button.js';\nimport { SbbButtonSize } from '@sbb-esta/lyne-elements/button.js';\nimport { SbbButtonType } from '@sbb-esta/lyne-elements/core/base-elements.js';\n\nimport '@sbb-esta/lyne-elements/button/button.js';\n\n@Directive({\n  selector: 'sbb-button',\n})\nexport class SbbButton {\n  #element: ElementRef<SbbButtonElement> = inject(ElementRef<SbbButtonElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: SbbButtonSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbButtonSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input({ alias: 'disabled-interactive', transform: booleanAttribute })\n  public set disabledInteractive(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabledInteractive = value));\n  }\n  public get disabledInteractive(): boolean {\n    return this.#element.nativeElement.disabledInteractive;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set form(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.form = value));\n  }\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set type(value: SbbButtonType) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): SbbButtonType {\n    return this.#element.nativeElement.type;\n  }\n}\n",
      "selector": "sbb-button",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 49,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled-interactive",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 41,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "form",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 57,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 65,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "SbbButtonSize",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 81,
          "type": "SbbButtonType",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 73,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbButtonSize",
            "line": 20
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 28
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 33,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 36
          }
        },
        "disabledInteractive": {
          "name": "disabledInteractive",
          "setSignature": {
            "name": "disabledInteractive",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 41,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabledInteractive",
            "type": "boolean",
            "returnType": "boolean",
            "line": 44
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 49,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 52
          }
        },
        "form": {
          "name": "form",
          "setSignature": {
            "name": "form",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 57,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 60
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 65,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 68
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 73,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 76
          }
        },
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 81,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "SbbButtonType",
            "line": 84
          }
        }
      }
    },
    {
      "name": "SbbButtonLink",
      "id": "directive-SbbButtonLink-679a3162605c88ca171f200330118dc457bdf0ff589e549e5f6c3a8cec1c56621155caaa453b579ed6a90d7f8c12f562004f5c1d75e60ccef09292ca9f8e3240",
      "file": "src/angular/button/button-link/button-link.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute, SbbRouterLinkSupportMixin } from '@sbb-esta/lyne-angular/core';\nimport type { SbbButtonLinkElement } from '@sbb-esta/lyne-elements/button/button-link.js';\nimport { SbbButtonSize } from '@sbb-esta/lyne-elements/button.js';\nimport { LinkTargetType } from '@sbb-esta/lyne-elements/core/base-elements.js';\n\nimport '@sbb-esta/lyne-elements/button/button-link.js';\n\n@Directive({\n  selector: 'sbb-button-link',\n})\nexport class SbbButtonLink extends SbbRouterLinkSupportMixin(class {}) {\n  #element: ElementRef<SbbButtonLinkElement> = inject(ElementRef<SbbButtonLinkElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: SbbButtonSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbButtonSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input({ alias: 'disabled-interactive', transform: booleanAttribute })\n  public set disabledInteractive(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabledInteractive = value));\n  }\n  public get disabledInteractive(): boolean {\n    return this.#element.nativeElement.disabledInteractive;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set href(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.href = value));\n  }\n  public get href(): string {\n    return this.#element.nativeElement.href;\n  }\n\n  @Input()\n  public set target(value: LinkTargetType | string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.target = value));\n  }\n  public get target(): LinkTargetType | string {\n    return this.#element.nativeElement.target;\n  }\n\n  @Input()\n  public set rel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.rel = value));\n  }\n  public get rel(): string {\n    return this.#element.nativeElement.rel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set download(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.download = value));\n  }\n  public get download(): boolean {\n    return this.#element.nativeElement.download;\n  }\n\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n\n  @Input({ alias: 'accessibility-current' })\n  public set accessibilityCurrent(value: string) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.accessibilityCurrent = value),\n    );\n  }\n  public get accessibilityCurrent(): string {\n    return this.#element.nativeElement.accessibilityCurrent;\n  }\n}\n",
      "selector": "sbb-button-link",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-current",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 97,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 89,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 49,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled-interactive",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 41,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "download",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 81,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "href",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 57,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "rel",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 73,
          "type": "string",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "SbbButtonSize",
          "decorators": []
        },
        {
          "name": "target",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 65,
          "type": "LinkTargetType | string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": ["SbbRouterLinkSupportMixin(class {})"],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbButtonSize",
            "line": 20
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 28
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 33,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 36
          }
        },
        "disabledInteractive": {
          "name": "disabledInteractive",
          "setSignature": {
            "name": "disabledInteractive",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 41,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabledInteractive",
            "type": "boolean",
            "returnType": "boolean",
            "line": 44
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 49,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 52
          }
        },
        "href": {
          "name": "href",
          "setSignature": {
            "name": "href",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 57,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "href",
            "type": "string",
            "returnType": "string",
            "line": 60
          }
        },
        "target": {
          "name": "target",
          "setSignature": {
            "name": "target",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 65,
            "jsdoctags": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "target",
            "type": "",
            "returnType": "LinkTargetType | string",
            "line": 68
          }
        },
        "rel": {
          "name": "rel",
          "setSignature": {
            "name": "rel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 73,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "rel",
            "type": "string",
            "returnType": "string",
            "line": 76
          }
        },
        "download": {
          "name": "download",
          "setSignature": {
            "name": "download",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 81,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "download",
            "type": "boolean",
            "returnType": "boolean",
            "line": 84
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 89,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 92
          }
        },
        "accessibilityCurrent": {
          "name": "accessibilityCurrent",
          "setSignature": {
            "name": "accessibilityCurrent",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 97,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityCurrent",
            "type": "string",
            "returnType": "string",
            "line": 102
          }
        }
      }
    },
    {
      "name": "SbbButtonStatic",
      "id": "directive-SbbButtonStatic-6c17523949d519abcf814c2172fd86ebdd71a29eed039c93af26dfcb08b3eeb15b852e6fe2bb42733967614af74147830668335a05cf34e0dff5f97b6bbe4018",
      "file": "src/angular/button/button-static/button-static.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbButtonStaticElement } from '@sbb-esta/lyne-elements/button/button-static.js';\nimport { SbbButtonSize } from '@sbb-esta/lyne-elements/button.js';\n\nimport '@sbb-esta/lyne-elements/button/button-static.js';\n\n@Directive({\n  selector: 'sbb-button-static',\n})\nexport class SbbButtonStatic {\n  #element: ElementRef<SbbButtonStaticElement> = inject(ElementRef<SbbButtonStaticElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: SbbButtonSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbButtonSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n}\n",
      "selector": "sbb-button-static",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "SbbButtonSize",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbButtonSize",
            "line": 19
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 24,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 27
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 32,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 35
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 40,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 43
          }
        }
      }
    },
    {
      "name": "SbbCalendar",
      "id": "directive-SbbCalendar-f5daf23517d21771d4e2d39a070802799ebad6e39812a89ee0143883be982961a4c9f279f4e0647b5a69b12bde9f7220fea67d79e8f91cd9827e4a1f8cbe626a",
      "file": "src/angular/calendar/calendar.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone, Output } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { CalendarView, SbbCalendarElement } from '@sbb-esta/lyne-elements/calendar.js';\nimport { SbbDateLike } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport { fromEvent, type Observable } from 'rxjs';\n\nimport '@sbb-esta/lyne-elements/calendar.js';\n\n@Directive({\n  selector: 'sbb-calendar',\n})\nexport class SbbCalendar<T = Date> {\n  #element: ElementRef<SbbCalendarElement<T>> = inject(ElementRef<SbbCalendarElement<T>>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set wide(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.wide = value));\n  }\n  public get wide(): boolean {\n    return this.#element.nativeElement.wide;\n  }\n\n  @Input()\n  public set view(value: CalendarView) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.view = value));\n  }\n  public get view(): CalendarView {\n    return this.#element.nativeElement.view;\n  }\n\n  @Input()\n  public set min(value: SbbDateLike<T> | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.min = value));\n  }\n  public get min(): T | null {\n    return this.#element.nativeElement.min;\n  }\n\n  @Input()\n  public set max(value: SbbDateLike<T> | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.max = value));\n  }\n  public get max(): T | null {\n    return this.#element.nativeElement.max;\n  }\n\n  @Input()\n  public set now(value: SbbDateLike<T> | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.now = value));\n  }\n  public get now(): T {\n    return this.#element.nativeElement.now;\n  }\n\n  @Input()\n  public set selected(value: SbbDateLike<T> | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.selected = value));\n  }\n  public get selected(): T | null {\n    return this.#element.nativeElement.selected;\n  }\n\n  @Input({ alias: 'date-filter' })\n  public set dateFilter(value: ((date: T | null) => boolean) | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.dateFilter = value));\n  }\n  public get dateFilter(): ((date: T | null) => boolean) | null {\n    return this.#element.nativeElement.dateFilter;\n  }\n\n  @Output() public dateSelected: Observable<T> = fromEvent<T>(\n    this.#element.nativeElement,\n    'dateSelected',\n  );\n\n  public resetPosition(): void {\n    return this.#element.nativeElement.resetPosition();\n  }\n}\n",
      "selector": "sbb-calendar",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "date-filter",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 65,
          "type": " | null",
          "decorators": []
        },
        {
          "name": "max",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 41,
          "type": "SbbDateLike | null",
          "decorators": []
        },
        {
          "name": "min",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "SbbDateLike | null",
          "decorators": []
        },
        {
          "name": "now",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 49,
          "type": "SbbDateLike | null",
          "decorators": []
        },
        {
          "name": "selected",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 57,
          "type": "SbbDateLike | null",
          "decorators": []
        },
        {
          "name": "view",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "CalendarView",
          "decorators": []
        },
        {
          "required": false,
          "name": "wide",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "dateSelected",
          "defaultValue": "fromEvent<T>(\n    this.#element.nativeElement,\n    'dateSelected',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 72,
          "type": "Observable<T>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "resetPosition",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 77,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": [],
      "accessors": {
        "wide": {
          "name": "wide",
          "setSignature": {
            "name": "wide",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "wide",
            "type": "boolean",
            "returnType": "boolean",
            "line": 20
          }
        },
        "view": {
          "name": "view",
          "setSignature": {
            "name": "view",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "CalendarView",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "CalendarView",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "view",
            "type": "",
            "returnType": "CalendarView",
            "line": 28
          }
        },
        "min": {
          "name": "min",
          "setSignature": {
            "name": "min",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbDateLike<T> | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 33,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbDateLike<T> | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "min",
            "type": "",
            "returnType": "T | null",
            "line": 36
          }
        },
        "max": {
          "name": "max",
          "setSignature": {
            "name": "max",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbDateLike<T> | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 41,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbDateLike<T> | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "max",
            "type": "",
            "returnType": "T | null",
            "line": 44
          }
        },
        "now": {
          "name": "now",
          "setSignature": {
            "name": "now",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbDateLike<T> | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 49,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbDateLike<T> | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "now",
            "type": "",
            "returnType": "T",
            "line": 52
          }
        },
        "selected": {
          "name": "selected",
          "setSignature": {
            "name": "selected",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbDateLike<T> | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 57,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbDateLike<T> | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "selected",
            "type": "",
            "returnType": "T | null",
            "line": 60
          }
        },
        "dateFilter": {
          "name": "dateFilter",
          "setSignature": {
            "name": "dateFilter",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": " | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 65,
            "jsdoctags": [
              {
                "name": "value",
                "type": " | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "dateFilter",
            "type": "",
            "returnType": " | null",
            "line": 68
          }
        }
      }
    },
    {
      "name": "SbbCard",
      "id": "directive-SbbCard-5cfc5f861e182e11b48516e4ee4a23e0b793591cf80e92d612881c6bd3a75ce1efb2793df3ad964800644493da2e0c01105243fe374002083d0b7595cc0bedce",
      "file": "src/angular/card/card/card.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport type { SbbCardElement } from '@sbb-esta/lyne-elements/card/card.js';\n\nimport '@sbb-esta/lyne-elements/card/card.js';\n\n@Directive({\n  selector: 'sbb-card',\n})\nexport class SbbCard {\n  #element: ElementRef<SbbCardElement> = inject(ElementRef<SbbCardElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: 'xs' | 's' | 'm' | 'l' | 'xl' | 'xxl' | 'xxxl') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): 'xs' | 's' | 'm' | 'l' | 'xl' | 'xxl' | 'xxxl' {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input()\n  public set color(\n    value: 'white' | 'milk' | 'transparent-bordered' | 'transparent-bordered-dashed',\n  ) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.color = value));\n  }\n  public get color(): 'white' | 'milk' | 'transparent-bordered' | 'transparent-bordered-dashed' {\n    return this.#element.nativeElement.color;\n  }\n}\n",
      "selector": "sbb-card",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "name": "color",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "\"white\" | \"milk\" | \"transparent-bordered\" | \"transparent-bordered-dashed\"",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "\"xs\" | \"s\" | \"m\" | \"l\" | \"xl\" | \"xxl\" | \"xxxl\"",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"xs\" | \"s\" | \"m\" | \"l\" | \"xl\" | \"xxl\" | \"xxxl\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 14,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"xs\" | \"s\" | \"m\" | \"l\" | \"xl\" | \"xxl\" | \"xxxl\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "\"xs\" | \"s\" | \"m\" | \"l\" | \"xl\" | \"xxl\" | \"xxxl\"",
            "line": 17
          }
        },
        "color": {
          "name": "color",
          "setSignature": {
            "name": "color",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"white\" | \"milk\" | \"transparent-bordered\" | \"transparent-bordered-dashed\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 22,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"white\" | \"milk\" | \"transparent-bordered\" | \"transparent-bordered-dashed\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "color",
            "type": "",
            "returnType": "\"white\" | \"milk\" | \"transparent-bordered\" | \"transparent-bordered-dashed\"",
            "line": 27
          }
        }
      }
    },
    {
      "name": "SbbCardBadge",
      "id": "directive-SbbCardBadge-70d45f6f765ae26196b513de10df1b8a091d8bf2757098a9bf7b8d91ab0e3fc7b9bfd0fe7cab0fdae4c5f6c6b928af678e274d9ab24429364f63cbdf2d7c2a4b",
      "file": "src/angular/card/card-badge/card-badge.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport type { SbbCardBadgeElement } from '@sbb-esta/lyne-elements/card/card-badge.js';\n\nimport '@sbb-esta/lyne-elements/card/card-badge.js';\n\n@Directive({\n  selector: 'sbb-card-badge',\n})\nexport class SbbCardBadge {\n  #element: ElementRef<SbbCardBadgeElement> = inject(ElementRef<SbbCardBadgeElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set color(value: 'charcoal' | 'white') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.color = value));\n  }\n  public get color(): 'charcoal' | 'white' {\n    return this.#element.nativeElement.color;\n  }\n}\n",
      "selector": "sbb-card-badge",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "name": "color",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "\"charcoal\" | \"white\"",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "color": {
          "name": "color",
          "setSignature": {
            "name": "color",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"charcoal\" | \"white\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 14,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"charcoal\" | \"white\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "color",
            "type": "",
            "returnType": "\"charcoal\" | \"white\"",
            "line": 17
          }
        }
      }
    },
    {
      "name": "SbbCardButton",
      "id": "directive-SbbCardButton-bd398687f145c94685db775f05b4cd3d7e1bb3d7c95ef9516c18b767502549ca71669bc6d0299d87c39ababaf327d5956e4d1cac558ce8b1b685ab06a4950c8c",
      "file": "src/angular/card/card-button/card-button.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbCardButtonElement } from '@sbb-esta/lyne-elements/card/card-button.js';\nimport { SbbButtonType } from '@sbb-esta/lyne-elements/core/base-elements.js';\n\nimport '@sbb-esta/lyne-elements/card/card-button.js';\n\n@Directive({\n  selector: 'sbb-card-button',\n})\nexport class SbbCardButton {\n  #element: ElementRef<SbbCardButtonElement> = inject(ElementRef<SbbCardButtonElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set active(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.active = value));\n  }\n  public get active(): boolean {\n    return this.#element.nativeElement.active;\n  }\n\n  @Input()\n  public set form(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.form = value));\n  }\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set type(value: SbbButtonType) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): SbbButtonType {\n    return this.#element.nativeElement.type;\n  }\n}\n",
      "selector": "sbb-card-button",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "active",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "form",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "string",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 48,
          "type": "SbbButtonType",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "active": {
          "name": "active",
          "setSignature": {
            "name": "active",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "active",
            "type": "boolean",
            "returnType": "boolean",
            "line": 19
          }
        },
        "form": {
          "name": "form",
          "setSignature": {
            "name": "form",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 24,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 27
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 32,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 35
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 40,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 43
          }
        },
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 48,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "SbbButtonType",
            "line": 51
          }
        }
      }
    },
    {
      "name": "SbbCardLink",
      "id": "directive-SbbCardLink-bc620af637f01df1c6fdd2c4a61839ce801ddeb11da550ce4184ca9e67ee27624132a4e9f2f56f4badb08c40679fdb9f3c1fc88fbb19cefeec464d5895359524",
      "file": "src/angular/card/card-link/card-link.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute, SbbRouterLinkSupportMixin } from '@sbb-esta/lyne-angular/core';\nimport type { SbbCardLinkElement } from '@sbb-esta/lyne-elements/card/card-link.js';\nimport { LinkTargetType } from '@sbb-esta/lyne-elements/core/base-elements.js';\n\nimport '@sbb-esta/lyne-elements/card/card-link.js';\n\n@Directive({\n  selector: 'sbb-card-link',\n})\nexport class SbbCardLink extends SbbRouterLinkSupportMixin(class {}) {\n  #element: ElementRef<SbbCardLinkElement> = inject(ElementRef<SbbCardLinkElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set active(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.active = value));\n  }\n  public get active(): boolean {\n    return this.#element.nativeElement.active;\n  }\n\n  @Input()\n  public set href(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.href = value));\n  }\n  public get href(): string {\n    return this.#element.nativeElement.href;\n  }\n\n  @Input()\n  public set target(value: LinkTargetType | string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.target = value));\n  }\n  public get target(): LinkTargetType | string {\n    return this.#element.nativeElement.target;\n  }\n\n  @Input()\n  public set rel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.rel = value));\n  }\n  public get rel(): string {\n    return this.#element.nativeElement.rel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set download(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.download = value));\n  }\n  public get download(): boolean {\n    return this.#element.nativeElement.download;\n  }\n\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n\n  @Input({ alias: 'accessibility-current' })\n  public set accessibilityCurrent(value: string) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.accessibilityCurrent = value),\n    );\n  }\n  public get accessibilityCurrent(): string {\n    return this.#element.nativeElement.accessibilityCurrent;\n  }\n}\n",
      "selector": "sbb-card-link",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-current",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 64,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 56,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "active",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "download",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 48,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "href",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "string",
          "decorators": []
        },
        {
          "name": "rel",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "string",
          "decorators": []
        },
        {
          "name": "target",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "LinkTargetType | string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": ["SbbRouterLinkSupportMixin(class {})"],
      "accessors": {
        "active": {
          "name": "active",
          "setSignature": {
            "name": "active",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "active",
            "type": "boolean",
            "returnType": "boolean",
            "line": 19
          }
        },
        "href": {
          "name": "href",
          "setSignature": {
            "name": "href",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 24,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "href",
            "type": "string",
            "returnType": "string",
            "line": 27
          }
        },
        "target": {
          "name": "target",
          "setSignature": {
            "name": "target",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 32,
            "jsdoctags": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "target",
            "type": "",
            "returnType": "LinkTargetType | string",
            "line": 35
          }
        },
        "rel": {
          "name": "rel",
          "setSignature": {
            "name": "rel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 40,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "rel",
            "type": "string",
            "returnType": "string",
            "line": 43
          }
        },
        "download": {
          "name": "download",
          "setSignature": {
            "name": "download",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 48,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "download",
            "type": "boolean",
            "returnType": "boolean",
            "line": 51
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 56,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 59
          }
        },
        "accessibilityCurrent": {
          "name": "accessibilityCurrent",
          "setSignature": {
            "name": "accessibilityCurrent",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 64,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityCurrent",
            "type": "string",
            "returnType": "string",
            "line": 69
          }
        }
      }
    },
    {
      "name": "SbbCheckbox",
      "id": "directive-SbbCheckbox-55673ad4166df0773d644559ade6b50904a5f2c169b615cbfe1b5d537bac849f4f5d74dbe9b1ad436d3b21f5b7f46b61e18f1fcb54da6bb963dd124c652fe0de",
      "file": "src/angular/checkbox/checkbox/checkbox.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { FocusMonitor } from '@angular/cdk/a11y';\nimport {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  forwardRef,\n  inject,\n  Input,\n  NgZone,\n  Output,\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { booleanAttribute, SbbControlValueAccessorMixin } from '@sbb-esta/lyne-angular/core';\nimport { SbbCheckboxGroupElement } from '@sbb-esta/lyne-elements/checkbox/checkbox-group.js';\nimport type { SbbCheckboxElement } from '@sbb-esta/lyne-elements/checkbox/checkbox.js';\nimport { SbbCheckboxSize } from '@sbb-esta/lyne-elements/checkbox.js';\nimport { SbbIconPlacement } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport { fromEvent, type Observable } from 'rxjs';\n\nimport '@sbb-esta/lyne-elements/checkbox/checkbox.js';\n\n@Directive({\n  selector: 'sbb-checkbox',\n  exportAs: 'sbbCheckbox',\n  host: {\n    '(change)': 'this.onChangeFn(this.checked)',\n  },\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SbbCheckbox),\n      multi: true,\n    },\n  ],\n})\nexport class SbbCheckbox extends SbbControlValueAccessorMixin(class {}) implements AfterViewInit {\n  #element: ElementRef<SbbCheckboxElement> = inject(ElementRef<SbbCheckboxElement>);\n  #ngZone: NgZone = inject(NgZone);\n  #focusMonitor: FocusMonitor = inject(FocusMonitor);\n\n  @Input()\n  public set size(value: SbbCheckboxSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbCheckboxSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ alias: 'icon-placement' })\n  public set iconPlacement(value: SbbIconPlacement) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconPlacement = value));\n  }\n  public get iconPlacement(): SbbIconPlacement {\n    return this.#element.nativeElement.iconPlacement;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set indeterminate(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.indeterminate = value));\n  }\n  public get indeterminate(): boolean {\n    return this.#element.nativeElement.indeterminate;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set checked(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.checked = value));\n  }\n  public get checked(): boolean {\n    return this.#element.nativeElement.checked;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set required(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.required = value));\n  }\n  public get required(): boolean {\n    return this.#element.nativeElement.required;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public change: Observable<Event> = fromEvent<Event>(\n    this.#element.nativeElement,\n    'change',\n  );\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public input: Observable<InputEvent> = fromEvent<InputEvent>(\n    this.#element.nativeElement,\n    'input',\n  );\n\n  public get group(): SbbCheckboxGroupElement | null {\n    return this.#element.nativeElement.group;\n  }\n\n  public get type(): string {\n    return this.#element.nativeElement.type;\n  }\n\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  override writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  ngAfterViewInit() {\n    this.#focusMonitor.monitor(this.#element, true).subscribe((focusOrigin) => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this.onTouchedFn();\n        });\n      }\n    });\n  }\n}\n",
      "selector": "sbb-checkbox",
      "providers": [
        {
          "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SbbCheckbox), multi: true,\n}"
        }
      ],
      "exportAs": "sbbCheckbox",
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "checked",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 66,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 74,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 106,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-placement",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 50,
          "type": "SbbIconPlacement",
          "decorators": []
        },
        {
          "required": false,
          "name": "indeterminate",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 58,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 90,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "required",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 82,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 42,
          "type": "SbbCheckboxSize",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 98,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "change",
          "defaultValue": "fromEvent<Event>(\n    this.#element.nativeElement,\n    'change',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 114,
          "type": "Observable<Event>"
        },
        {
          "name": "input",
          "defaultValue": "fromEvent<InputEvent>(\n    this.#element.nativeElement,\n    'input',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 120,
          "type": "Observable<InputEvent>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 142,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "writeValue",
          "args": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 138,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [164],
          "jsdoctags": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "extends": ["SbbControlValueAccessorMixin(class {})"],
      "implements": ["AfterViewInit"],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbCheckboxSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 42,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbCheckboxSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbCheckboxSize",
            "line": 45
          }
        },
        "iconPlacement": {
          "name": "iconPlacement",
          "setSignature": {
            "name": "iconPlacement",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbIconPlacement",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 50,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbIconPlacement",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconPlacement",
            "type": "",
            "returnType": "SbbIconPlacement",
            "line": 53
          }
        },
        "indeterminate": {
          "name": "indeterminate",
          "setSignature": {
            "name": "indeterminate",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 58,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "indeterminate",
            "type": "boolean",
            "returnType": "boolean",
            "line": 61
          }
        },
        "checked": {
          "name": "checked",
          "setSignature": {
            "name": "checked",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 66,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "checked",
            "type": "boolean",
            "returnType": "boolean",
            "line": 69
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 74,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 77
          }
        },
        "required": {
          "name": "required",
          "setSignature": {
            "name": "required",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 82,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "required",
            "type": "boolean",
            "returnType": "boolean",
            "line": 85
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 90,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 93
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 98,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 101
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 106,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 109
          }
        },
        "group": {
          "name": "group",
          "getSignature": {
            "name": "group",
            "type": "",
            "returnType": "SbbCheckboxGroupElement | null",
            "line": 125
          }
        },
        "type": {
          "name": "type",
          "getSignature": {
            "name": "type",
            "type": "string",
            "returnType": "string",
            "line": 129
          }
        },
        "form": {
          "name": "form",
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 133
          }
        }
      }
    },
    {
      "name": "SbbCheckboxGroup",
      "id": "directive-SbbCheckboxGroup-db8c3f1d2096234db950f1127e24427f5392853a08eb03f4bfae5d94ba731a14c7bd5bdc5d0fa0b5cdcbfe6c8f4b9906faf0e1770919f126c7e4a80f14bb26d7",
      "file": "src/angular/checkbox/checkbox-group/checkbox-group.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbCheckboxGroupElement } from '@sbb-esta/lyne-elements/checkbox/checkbox-group.js';\nimport { SbbCheckboxPanelElement } from '@sbb-esta/lyne-elements/checkbox/checkbox-panel.js';\nimport { SbbCheckboxElement } from '@sbb-esta/lyne-elements/checkbox/checkbox.js';\nimport { SbbCheckboxSize } from '@sbb-esta/lyne-elements/checkbox.js';\nimport { SbbHorizontalFrom, SbbOrientation } from '@sbb-esta/lyne-elements/core/interfaces.js';\n\nimport '@sbb-esta/lyne-elements/checkbox/checkbox-group.js';\n\n@Directive({\n  selector: 'sbb-checkbox-group',\n})\nexport class SbbCheckboxGroup {\n  #element: ElementRef<SbbCheckboxGroupElement> = inject(ElementRef<SbbCheckboxGroupElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set required(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.required = value));\n  }\n  public get required(): boolean {\n    return this.#element.nativeElement.required;\n  }\n\n  @Input()\n  public set size(value: SbbCheckboxSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbCheckboxSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ alias: 'horizontal-from' })\n  public set horizontalFrom(value: SbbHorizontalFrom | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.horizontalFrom = value));\n  }\n  public get horizontalFrom(): SbbHorizontalFrom | null {\n    return this.#element.nativeElement.horizontalFrom;\n  }\n\n  @Input()\n  public set orientation(value: SbbOrientation) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.orientation = value));\n  }\n  public get orientation(): SbbOrientation {\n    return this.#element.nativeElement.orientation;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  public get checkboxes(): (SbbCheckboxElement | SbbCheckboxPanelElement)[] {\n    return this.#element.nativeElement.checkboxes;\n  }\n}\n",
      "selector": "sbb-checkbox-group",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 51,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "horizontal-from",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "SbbHorizontalFrom | null",
          "decorators": []
        },
        {
          "name": "orientation",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "SbbOrientation",
          "decorators": []
        },
        {
          "required": false,
          "name": "required",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "SbbCheckboxSize",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "required": {
          "name": "required",
          "setSignature": {
            "name": "required",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 19,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "required",
            "type": "boolean",
            "returnType": "boolean",
            "line": 22
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbCheckboxSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 27,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbCheckboxSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbCheckboxSize",
            "line": 30
          }
        },
        "horizontalFrom": {
          "name": "horizontalFrom",
          "setSignature": {
            "name": "horizontalFrom",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbHorizontalFrom | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 35,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbHorizontalFrom | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "horizontalFrom",
            "type": "",
            "returnType": "SbbHorizontalFrom | null",
            "line": 38
          }
        },
        "orientation": {
          "name": "orientation",
          "setSignature": {
            "name": "orientation",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbOrientation",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 43,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbOrientation",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "orientation",
            "type": "",
            "returnType": "SbbOrientation",
            "line": 46
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 51,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 54
          }
        },
        "checkboxes": {
          "name": "checkboxes",
          "getSignature": {
            "name": "checkboxes",
            "type": "[]",
            "returnType": "[]",
            "line": 58
          }
        }
      }
    },
    {
      "name": "SbbCheckboxPanel",
      "id": "directive-SbbCheckboxPanel-557bd80bb03e4a7572319287a58ae4f60e8719b64547a5dbf73c237ed0e852a4cf95e76f5079ff8acd98d0e523f3ef1d31501828db9c497c69e8766c94a5331e",
      "file": "src/angular/checkbox/checkbox-panel/checkbox-panel.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { FocusMonitor } from '@angular/cdk/a11y';\nimport {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  forwardRef,\n  inject,\n  Input,\n  NgZone,\n  Output,\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { booleanAttribute, SbbControlValueAccessorMixin } from '@sbb-esta/lyne-angular/core';\nimport { SbbCheckboxGroupElement } from '@sbb-esta/lyne-elements/checkbox/checkbox-group.js';\nimport type { SbbCheckboxPanelElement } from '@sbb-esta/lyne-elements/checkbox/checkbox-panel.js';\nimport { SbbPanelSize } from '@sbb-esta/lyne-elements/core/mixins.js';\nimport { fromEvent, type Observable } from 'rxjs';\n\nimport '@sbb-esta/lyne-elements/checkbox/checkbox-panel.js';\n\n@Directive({\n  selector: 'sbb-checkbox-panel',\n  exportAs: 'sbbCheckboxPanel',\n  host: {\n    '(change)': 'this.onChangeFn(this.checked)',\n  },\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SbbCheckboxPanel),\n      multi: true,\n    },\n  ],\n})\nexport class SbbCheckboxPanel\n  extends SbbControlValueAccessorMixin(class {})\n  implements AfterViewInit\n{\n  #element: ElementRef<SbbCheckboxPanelElement> = inject(ElementRef<SbbCheckboxPanelElement>);\n  #ngZone: NgZone = inject(NgZone);\n  #focusMonitor: FocusMonitor = inject(FocusMonitor);\n\n  @Input()\n  public set size(value: SbbPanelSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbPanelSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input()\n  public set color(value: 'white' | 'milk') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.color = value));\n  }\n  public get color(): 'white' | 'milk' {\n    return this.#element.nativeElement.color;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set borderless(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.borderless = value));\n  }\n  public get borderless(): boolean {\n    return this.#element.nativeElement.borderless;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set indeterminate(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.indeterminate = value));\n  }\n  public get indeterminate(): boolean {\n    return this.#element.nativeElement.indeterminate;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set checked(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.checked = value));\n  }\n  public get checked(): boolean {\n    return this.#element.nativeElement.checked;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set required(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.required = value));\n  }\n  public get required(): boolean {\n    return this.#element.nativeElement.required;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public change: Observable<Event> = fromEvent<Event>(\n    this.#element.nativeElement,\n    'change',\n  );\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public input: Observable<InputEvent> = fromEvent<InputEvent>(\n    this.#element.nativeElement,\n    'input',\n  );\n\n  public get group(): SbbCheckboxGroupElement | null {\n    return this.#element.nativeElement.group;\n  }\n\n  public get type(): string {\n    return this.#element.nativeElement.type;\n  }\n\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  override writeValue(value: any): void {\n    this.checked = !!value;\n  }\n\n  ngAfterViewInit() {\n    this.#focusMonitor.monitor(this.#element, true).subscribe((focusOrigin) => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this.onTouchedFn();\n        });\n      }\n    });\n  }\n}\n",
      "selector": "sbb-checkbox-panel",
      "providers": [
        {
          "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SbbCheckboxPanel), multi: true,\n}"
        }
      ],
      "exportAs": "sbbCheckboxPanel",
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "borderless",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 60,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "checked",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 76,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "color",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 52,
          "type": "\"white\" | \"milk\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 84,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "indeterminate",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 68,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 100,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "required",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 92,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 44,
          "type": "SbbPanelSize",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 108,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "change",
          "defaultValue": "fromEvent<Event>(\n    this.#element.nativeElement,\n    'change',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 116,
          "type": "Observable<Event>"
        },
        {
          "name": "input",
          "defaultValue": "fromEvent<InputEvent>(\n    this.#element.nativeElement,\n    'input',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 122,
          "type": "Observable<InputEvent>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 144,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "writeValue",
          "args": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 140,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [164],
          "jsdoctags": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "extends": ["SbbControlValueAccessorMixin(class {})"],
      "implements": ["AfterViewInit"],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbPanelSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 44,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbPanelSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbPanelSize",
            "line": 47
          }
        },
        "color": {
          "name": "color",
          "setSignature": {
            "name": "color",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"white\" | \"milk\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 52,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"white\" | \"milk\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "color",
            "type": "",
            "returnType": "\"white\" | \"milk\"",
            "line": 55
          }
        },
        "borderless": {
          "name": "borderless",
          "setSignature": {
            "name": "borderless",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 60,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "borderless",
            "type": "boolean",
            "returnType": "boolean",
            "line": 63
          }
        },
        "indeterminate": {
          "name": "indeterminate",
          "setSignature": {
            "name": "indeterminate",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 68,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "indeterminate",
            "type": "boolean",
            "returnType": "boolean",
            "line": 71
          }
        },
        "checked": {
          "name": "checked",
          "setSignature": {
            "name": "checked",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 76,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "checked",
            "type": "boolean",
            "returnType": "boolean",
            "line": 79
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 84,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 87
          }
        },
        "required": {
          "name": "required",
          "setSignature": {
            "name": "required",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 92,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "required",
            "type": "boolean",
            "returnType": "boolean",
            "line": 95
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 100,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 103
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 108,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 111
          }
        },
        "group": {
          "name": "group",
          "getSignature": {
            "name": "group",
            "type": "",
            "returnType": "SbbCheckboxGroupElement | null",
            "line": 127
          }
        },
        "type": {
          "name": "type",
          "getSignature": {
            "name": "type",
            "type": "string",
            "returnType": "string",
            "line": 131
          }
        },
        "form": {
          "name": "form",
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 135
          }
        }
      }
    },
    {
      "name": "SbbChipLabel",
      "id": "directive-SbbChipLabel-a2fedb243ef47a60581edb1a5d5ea8ba25be9b20390e56fa1ad966f61726fa53db1a5767bc9c41b65fff87154677b925fb8927988028f8aab90f09d36fce2b94",
      "file": "src/angular/chip-label/chip-label.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport type { SbbChipLabelElement } from '@sbb-esta/lyne-elements/chip-label.js';\n\nimport '@sbb-esta/lyne-elements/chip-label.js';\n\n@Directive({\n  selector: 'sbb-chip-label',\n})\nexport class SbbChipLabel {\n  #element: ElementRef<SbbChipLabelElement> = inject(ElementRef<SbbChipLabelElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: 'xxs' | 'xs' | 's') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): 'xxs' | 'xs' | 's' {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input()\n  public set color(value: 'milk' | 'charcoal' | 'white' | 'granite') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.color = value));\n  }\n  public get color(): 'milk' | 'charcoal' | 'white' | 'granite' {\n    return this.#element.nativeElement.color;\n  }\n}\n",
      "selector": "sbb-chip-label",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "name": "color",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "\"milk\" | \"charcoal\" | \"white\" | \"granite\"",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "\"xxs\" | \"xs\" | \"s\"",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"xxs\" | \"xs\" | \"s\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 14,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"xxs\" | \"xs\" | \"s\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "\"xxs\" | \"xs\" | \"s\"",
            "line": 17
          }
        },
        "color": {
          "name": "color",
          "setSignature": {
            "name": "color",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"milk\" | \"charcoal\" | \"white\" | \"granite\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 22,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"milk\" | \"charcoal\" | \"white\" | \"granite\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "color",
            "type": "",
            "returnType": "\"milk\" | \"charcoal\" | \"white\" | \"granite\"",
            "line": 25
          }
        }
      }
    },
    {
      "name": "SbbClock",
      "id": "directive-SbbClock-1925a1b22c68fe72271650de840954255565b32c076e9651d76fa573543d9068097f87db3ba2869b0247070fbf4de16b46a3d274f746f66242c03f1842b495e1",
      "file": "src/angular/clock/clock.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport type { SbbClockElement } from '@sbb-esta/lyne-elements/clock.js';\nimport { SbbTime } from '@sbb-esta/lyne-elements/core/interfaces.js';\n\nimport '@sbb-esta/lyne-elements/clock.js';\n\n@Directive({\n  selector: 'sbb-clock',\n})\nexport class SbbClock {\n  #element: ElementRef<SbbClockElement> = inject(ElementRef<SbbClockElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set now(value: SbbTime | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.now = value));\n  }\n  public get now(): SbbTime | null {\n    return this.#element.nativeElement.now;\n  }\n}\n",
      "selector": "sbb-clock",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "name": "now",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "SbbTime | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "now": {
          "name": "now",
          "setSignature": {
            "name": "now",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTime | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 15,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTime | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "now",
            "type": "",
            "returnType": "SbbTime | null",
            "line": 18
          }
        }
      }
    },
    {
      "name": "SbbCompactPaginator",
      "id": "directive-SbbCompactPaginator-74de6a05c6bfb1d22754255bc278dae24bd036cd0295f498bf884cbffb1b09ccd5acc8792d115dca558c7a4ae005373a8af2f1d27968635e6f6fda6246df09e6",
      "file": "src/angular/paginator/compact-paginator/compact-paginator.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {\n  Directive,\n  ElementRef,\n  inject,\n  Input,\n  NgZone,\n  numberAttribute,\n  Output,\n} from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbPaginatorPageEventDetails } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport type { SbbCompactPaginatorElement } from '@sbb-esta/lyne-elements/paginator/compact-paginator.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/paginator/compact-paginator.js';\n\n@Directive({\n  selector: 'sbb-compact-paginator',\n})\nexport class SbbCompactPaginator {\n  #element: ElementRef<SbbCompactPaginatorElement> = inject(ElementRef<SbbCompactPaginatorElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: numberAttribute })\n  public set length(value: number) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.length = value));\n  }\n  public get length(): number {\n    return this.#element.nativeElement.length;\n  }\n\n  @Input({ alias: 'page-size', transform: numberAttribute })\n  public set pageSize(value: number) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.pageSize = value));\n  }\n  public get pageSize(): number {\n    return this.#element.nativeElement.pageSize;\n  }\n\n  @Input({ alias: 'page-index', transform: numberAttribute })\n  public set pageIndex(value: number) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.pageIndex = value));\n  }\n  public get pageIndex(): number {\n    return this.#element.nativeElement.pageIndex;\n  }\n\n  @Input({ alias: 'pager-position' })\n  public set pagerPosition(value: 'start' | 'end') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.pagerPosition = value));\n  }\n  public get pagerPosition(): 'start' | 'end' {\n    return this.#element.nativeElement.pagerPosition;\n  }\n\n  @Input()\n  public set size(value: 'm' | 's') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): 'm' | 's' {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Output() public page: Observable<SbbPaginatorPageEventDetails> =\n    fromEvent<SbbPaginatorPageEventDetails>(this.#element.nativeElement, 'page');\n}\n",
      "selector": "sbb-compact-paginator",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 72,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "length",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "number",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 64,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "page-index",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "number",
          "decorators": []
        },
        {
          "required": false,
          "name": "page-size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "number",
          "decorators": []
        },
        {
          "required": false,
          "name": "pager-position",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 48,
          "type": "\"start\" | \"end\"",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 56,
          "type": "\"m\" | \"s\"",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "page",
          "defaultValue": "fromEvent<SbbPaginatorPageEventDetails>(this.#element.nativeElement, 'page')",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 79,
          "type": "Observable<SbbPaginatorPageEventDetails>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "length": {
          "name": "length",
          "setSignature": {
            "name": "length",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 24,
            "jsdoctags": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "length",
            "type": "number",
            "returnType": "number",
            "line": 27
          }
        },
        "pageSize": {
          "name": "pageSize",
          "setSignature": {
            "name": "pageSize",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 32,
            "jsdoctags": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "pageSize",
            "type": "number",
            "returnType": "number",
            "line": 35
          }
        },
        "pageIndex": {
          "name": "pageIndex",
          "setSignature": {
            "name": "pageIndex",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 40,
            "jsdoctags": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "pageIndex",
            "type": "number",
            "returnType": "number",
            "line": 43
          }
        },
        "pagerPosition": {
          "name": "pagerPosition",
          "setSignature": {
            "name": "pagerPosition",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"start\" | \"end\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 48,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"start\" | \"end\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "pagerPosition",
            "type": "",
            "returnType": "\"start\" | \"end\"",
            "line": 51
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"m\" | \"s\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 56,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"m\" | \"s\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "\"m\" | \"s\"",
            "line": 59
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 64,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 67
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 72,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 75
          }
        }
      }
    },
    {
      "name": "SbbContainer",
      "id": "directive-SbbContainer-29621124f249c182a08956e124a03fa6f848a5a5bb90103cf572b9fcb4b90bf4d4cb0e02d5ea1ae20f998237826aa65ff8f0ca6c3130db5bf0ceeb0ce1d6b682",
      "file": "src/angular/container/container/container.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbContainerElement } from '@sbb-esta/lyne-elements/container/container.js';\n\nimport '@sbb-esta/lyne-elements/container/container.js';\n\n@Directive({\n  selector: 'sbb-container',\n})\nexport class SbbContainer {\n  #element: ElementRef<SbbContainerElement> = inject(ElementRef<SbbContainerElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set expanded(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.expanded = value));\n  }\n  public get expanded(): boolean {\n    return this.#element.nativeElement.expanded;\n  }\n\n  @Input({ alias: 'background-expanded', transform: booleanAttribute })\n  public set backgroundExpanded(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.backgroundExpanded = value));\n  }\n  public get backgroundExpanded(): boolean {\n    return this.#element.nativeElement.backgroundExpanded;\n  }\n\n  @Input()\n  public set color(value: 'transparent' | 'white' | 'milk' | 'midnight' | 'charcoal') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.color = value));\n  }\n  public get color(): 'transparent' | 'white' | 'milk' | 'midnight' | 'charcoal' {\n    return this.#element.nativeElement.color;\n  }\n}\n",
      "selector": "sbb-container",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "background-expanded",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "color",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 31,
          "type": "\"transparent\" | \"white\" | \"milk\" | \"midnight\" | \"charcoal\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "expanded",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "expanded": {
          "name": "expanded",
          "setSignature": {
            "name": "expanded",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 15,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "expanded",
            "type": "boolean",
            "returnType": "boolean",
            "line": 18
          }
        },
        "backgroundExpanded": {
          "name": "backgroundExpanded",
          "setSignature": {
            "name": "backgroundExpanded",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 23,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "backgroundExpanded",
            "type": "boolean",
            "returnType": "boolean",
            "line": 26
          }
        },
        "color": {
          "name": "color",
          "setSignature": {
            "name": "color",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"transparent\" | \"white\" | \"milk\" | \"midnight\" | \"charcoal\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 31,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"transparent\" | \"white\" | \"milk\" | \"midnight\" | \"charcoal\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "color",
            "type": "",
            "returnType": "\"transparent\" | \"white\" | \"milk\" | \"midnight\" | \"charcoal\"",
            "line": 34
          }
        }
      }
    },
    {
      "name": "SbbDatepicker",
      "id": "directive-SbbDatepicker-3f0a552eb67a4ccc8931291061db8445ba4ad434d2ee5ffd817dce43a2ce1f958adf5219fffd7166c7a2630c544c5407e2eab155bd3ebdace9c334dd057d1d73",
      "file": "src/angular/datepicker/datepicker/datepicker.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone, Output } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbValidationChangeEvent } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport type {\n  SbbDatepickerElement,\n  SbbInputUpdateEvent,\n} from '@sbb-esta/lyne-elements/datepicker/datepicker.js';\nimport { fromEvent, type Observable } from 'rxjs';\n\nimport '@sbb-esta/lyne-elements/datepicker/datepicker.js';\n\n@Directive({\n  selector: 'sbb-datepicker',\n})\nexport class SbbDatepicker<T = Date> {\n  #element: ElementRef<SbbDatepickerElement<T>> = inject(ElementRef<SbbDatepickerElement<T>>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set wide(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.wide = value));\n  }\n  public get wide(): boolean {\n    return this.#element.nativeElement.wide;\n  }\n\n  @Input()\n  public set dateFilter(value: (date: T | null) => boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.dateFilter = value));\n  }\n  public get dateFilter(): (date: T | null) => boolean {\n    return this.#element.nativeElement.dateFilter;\n  }\n\n  @Input()\n  public set input(value: string | HTMLElement | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.input = value));\n  }\n  public get input(): string | HTMLElement | null {\n    return this.#element.nativeElement.input;\n  }\n\n  @Input()\n  public set now(value: T) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.now = value));\n  }\n  public get now(): T {\n    return this.#element.nativeElement.now;\n  }\n\n  @Input()\n  public set valueAsDate(value: T | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.valueAsDate = value));\n  }\n  public get valueAsDate(): T | null {\n    return this.#element.nativeElement.valueAsDate;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public change: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'change',\n  );\n\n  // eslint-disable-next-line @angular-eslint/no-output-rename, @angular-eslint/no-output-native\n  @Output('input') public inputEvent: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'input',\n  );\n\n  @Output() public inputUpdated: Observable<SbbInputUpdateEvent> = fromEvent<SbbInputUpdateEvent>(\n    this.#element.nativeElement,\n    'inputUpdated',\n  );\n\n  @Output() public datePickerUpdated: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'datePickerUpdated',\n  );\n\n  @Output() public validationChange: Observable<SbbValidationChangeEvent> =\n    fromEvent<SbbValidationChangeEvent>(this.#element.nativeElement, 'validationChange');\n\n  public get inputElement(): HTMLInputElement | null {\n    return this.#element.nativeElement.inputElement;\n  }\n\n  public findPreviousAvailableDate(date: T): T {\n    return this.#element.nativeElement.findPreviousAvailableDate(date);\n  }\n\n  public findNextAvailableDate(date: T): T {\n    return this.#element.nativeElement.findNextAvailableDate(date);\n  }\n}\n",
      "selector": "sbb-datepicker",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "name": "dateFilter",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "input",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "string | HTMLElement | null",
          "decorators": []
        },
        {
          "name": "now",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 44,
          "type": "T",
          "decorators": []
        },
        {
          "name": "valueAsDate",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 52,
          "type": "T | null",
          "decorators": []
        },
        {
          "required": false,
          "name": "wide",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "change",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'change',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 60,
          "type": "Observable<void>"
        },
        {
          "name": "datePickerUpdated",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'datePickerUpdated',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 76,
          "type": "Observable<void>"
        },
        {
          "name": "input",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'input',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 66,
          "type": "Observable<void>"
        },
        {
          "name": "inputUpdated",
          "defaultValue": "fromEvent<SbbInputUpdateEvent>(\n    this.#element.nativeElement,\n    'inputUpdated',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 71,
          "type": "Observable<SbbInputUpdateEvent>"
        },
        {
          "name": "validationChange",
          "defaultValue": "fromEvent<SbbValidationChangeEvent>(this.#element.nativeElement, 'validationChange')",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 81,
          "type": "Observable<SbbValidationChangeEvent>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "findNextAvailableDate",
          "args": [
            {
              "name": "date",
              "type": "T",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "T",
          "typeParameters": [],
          "line": 92,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": "date",
              "type": "T",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "findPreviousAvailableDate",
          "args": [
            {
              "name": "date",
              "type": "T",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "T",
          "typeParameters": [],
          "line": 88,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": "date",
              "type": "T",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "extends": [],
      "accessors": {
        "wide": {
          "name": "wide",
          "setSignature": {
            "name": "wide",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 20,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "wide",
            "type": "boolean",
            "returnType": "boolean",
            "line": 23
          }
        },
        "dateFilter": {
          "name": "dateFilter",
          "setSignature": {
            "name": "dateFilter",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "function": [
                  {
                    "name": "date",
                    "type": "T | null",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ]
              }
            ],
            "returnType": "void",
            "line": 28,
            "jsdoctags": [
              {
                "name": "value",
                "type": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "function": [
                  {
                    "name": "date",
                    "type": "T | null",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "dateFilter",
            "type": "function",
            "returnType": "boolean",
            "line": 31
          }
        },
        "input": {
          "name": "input",
          "setSignature": {
            "name": "input",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | HTMLElement | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 36,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | HTMLElement | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "input",
            "type": "",
            "returnType": "string | HTMLElement | null",
            "line": 39
          }
        },
        "now": {
          "name": "now",
          "setSignature": {
            "name": "now",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "T",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 44,
            "jsdoctags": [
              {
                "name": "value",
                "type": "T",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "now",
            "type": "",
            "returnType": "T",
            "line": 47
          }
        },
        "valueAsDate": {
          "name": "valueAsDate",
          "setSignature": {
            "name": "valueAsDate",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "T | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 52,
            "jsdoctags": [
              {
                "name": "value",
                "type": "T | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "valueAsDate",
            "type": "",
            "returnType": "T | null",
            "line": 55
          }
        },
        "inputElement": {
          "name": "inputElement",
          "getSignature": {
            "name": "inputElement",
            "type": "",
            "returnType": "HTMLInputElement | null",
            "line": 84
          }
        }
      }
    },
    {
      "name": "SbbDatepickerNextDay",
      "id": "directive-SbbDatepickerNextDay-7e6fafed5013196d16fef1dfc4a5ae3190503e1332561d0b0ce24b6f9f5d51f4d11259603ba2ad0f621ff9d67e17d1a5a0d5925372091f60a05a4c14da25af07",
      "file": "src/angular/datepicker/datepicker-next-day/datepicker-next-day.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbButtonType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport type { SbbDatepickerNextDayElement } from '@sbb-esta/lyne-elements/datepicker/datepicker-next-day.js';\nimport { SbbDatepickerElement } from '@sbb-esta/lyne-elements/datepicker/datepicker.js';\n\nimport '@sbb-esta/lyne-elements/datepicker/datepicker-next-day.js';\n\n@Directive({\n  selector: 'sbb-datepicker-next-day',\n})\nexport class SbbDatepickerNextDay<T = Date> {\n  #element: ElementRef<SbbDatepickerNextDayElement<T>> = inject(\n    ElementRef<SbbDatepickerNextDayElement<T>>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input()\n  public set datepicker(value: SbbDatepickerElement<T> | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.datepicker = value));\n  }\n  public get datepicker(): SbbDatepickerElement<T> | null {\n    return this.#element.nativeElement.datepicker;\n  }\n\n  @Input()\n  public set form(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.form = value));\n  }\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set type(value: SbbButtonType) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): SbbButtonType {\n    return this.#element.nativeElement.type;\n  }\n\n  @Input({ alias: 'date-picker' })\n  public set datePicker(value: string | SbbDatepickerElement<T> | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.datePicker = value));\n  }\n  public get datePicker(): string | SbbDatepickerElement<T> | null {\n    return this.#element.nativeElement.datePicker;\n  }\n}\n",
      "selector": "sbb-datepicker-next-day",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "date-picker",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 67,
          "type": "string | SbbDatepickerElement | null",
          "decorators": []
        },
        {
          "name": "datepicker",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "SbbDatepickerElement | null",
          "decorators": []
        },
        {
          "name": "form",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 59,
          "type": "SbbButtonType",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 51,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 19,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 22
          }
        },
        "datepicker": {
          "name": "datepicker",
          "setSignature": {
            "name": "datepicker",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbDatepickerElement<T> | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 27,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbDatepickerElement<T> | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "datepicker",
            "type": "",
            "returnType": "SbbDatepickerElement | null",
            "line": 30
          }
        },
        "form": {
          "name": "form",
          "setSignature": {
            "name": "form",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 35,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 38
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 43,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 46
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 51,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 54
          }
        },
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 59,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "SbbButtonType",
            "line": 62
          }
        },
        "datePicker": {
          "name": "datePicker",
          "setSignature": {
            "name": "datePicker",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | SbbDatepickerElement<T> | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 67,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | SbbDatepickerElement<T> | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "datePicker",
            "type": "",
            "returnType": "string | SbbDatepickerElement | null",
            "line": 70
          }
        }
      }
    },
    {
      "name": "SbbDatepickerPreviousDay",
      "id": "directive-SbbDatepickerPreviousDay-676754e4c1d35c0b52674219f8c34ce958e0508ddb0eac5c3424c43a3521ed92f81e475afda4e9cc3ba6b62f67af09af544af373e7f3f38c4c5fa4c97d798d0e",
      "file": "src/angular/datepicker/datepicker-previous-day/datepicker-previous-day.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbButtonType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport type { SbbDatepickerPreviousDayElement } from '@sbb-esta/lyne-elements/datepicker/datepicker-previous-day.js';\nimport { SbbDatepickerElement } from '@sbb-esta/lyne-elements/datepicker/datepicker.js';\n\nimport '@sbb-esta/lyne-elements/datepicker/datepicker-previous-day.js';\n\n@Directive({\n  selector: 'sbb-datepicker-previous-day',\n})\nexport class SbbDatepickerPreviousDay<T = Date> {\n  #element: ElementRef<SbbDatepickerPreviousDayElement<T>> = inject(\n    ElementRef<SbbDatepickerPreviousDayElement<T>>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input()\n  public set datepicker(value: SbbDatepickerElement<T> | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.datepicker = value));\n  }\n  public get datepicker(): SbbDatepickerElement<T> | null {\n    return this.#element.nativeElement.datepicker;\n  }\n\n  @Input()\n  public set form(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.form = value));\n  }\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set type(value: SbbButtonType) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): SbbButtonType {\n    return this.#element.nativeElement.type;\n  }\n\n  @Input({ alias: 'date-picker' })\n  public set datePicker(value: string | SbbDatepickerElement<T> | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.datePicker = value));\n  }\n  public get datePicker(): string | SbbDatepickerElement<T> | null {\n    return this.#element.nativeElement.datePicker;\n  }\n}\n",
      "selector": "sbb-datepicker-previous-day",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "date-picker",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 67,
          "type": "string | SbbDatepickerElement | null",
          "decorators": []
        },
        {
          "name": "datepicker",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "SbbDatepickerElement | null",
          "decorators": []
        },
        {
          "name": "form",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 59,
          "type": "SbbButtonType",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 51,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 19,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 22
          }
        },
        "datepicker": {
          "name": "datepicker",
          "setSignature": {
            "name": "datepicker",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbDatepickerElement<T> | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 27,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbDatepickerElement<T> | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "datepicker",
            "type": "",
            "returnType": "SbbDatepickerElement | null",
            "line": 30
          }
        },
        "form": {
          "name": "form",
          "setSignature": {
            "name": "form",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 35,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 38
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 43,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 46
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 51,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 54
          }
        },
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 59,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "SbbButtonType",
            "line": 62
          }
        },
        "datePicker": {
          "name": "datePicker",
          "setSignature": {
            "name": "datePicker",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | SbbDatepickerElement<T> | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 67,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | SbbDatepickerElement<T> | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "datePicker",
            "type": "",
            "returnType": "string | SbbDatepickerElement | null",
            "line": 70
          }
        }
      }
    },
    {
      "name": "SbbDatepickerToggle",
      "id": "directive-SbbDatepickerToggle-b9fc06857bc266e11f7a014e2e5ca5b6f2c382dc2cc32326ac8b10557efa3fd624753521d7037a3c494e3537286d4349b1a05726bf4ffc4846018c7ac5480fa1",
      "file": "src/angular/datepicker/datepicker-toggle/datepicker-toggle.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { CalendarView } from '@sbb-esta/lyne-elements/calendar.js';\nimport type { SbbDatepickerToggleElement } from '@sbb-esta/lyne-elements/datepicker/datepicker-toggle.js';\nimport { SbbDatepickerElement } from '@sbb-esta/lyne-elements/datepicker/datepicker.js';\nimport '@sbb-esta/lyne-elements/datepicker/datepicker-toggle.js';\n\n@Directive({\n  selector: 'sbb-datepicker-toggle',\n})\nexport class SbbDatepickerToggle<T = Date> {\n  #element: ElementRef<SbbDatepickerToggleElement<T>> = inject(\n    ElementRef<SbbDatepickerToggleElement<T>>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set datepicker(value: SbbDatepickerElement<T> | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.datepicker = value));\n  }\n  public get datepicker(): SbbDatepickerElement<T> | null {\n    return this.#element.nativeElement.datepicker;\n  }\n\n  @Input()\n  public set view(value: CalendarView) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.view = value));\n  }\n  public get view(): CalendarView {\n    return this.#element.nativeElement.view;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  public open(): void {\n    return this.#element.nativeElement.open();\n  }\n}\n",
      "selector": "sbb-datepicker-toggle",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "name": "datepicker",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "SbbDatepickerElement | null",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "view",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "CalendarView",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "open",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 41,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": [],
      "accessors": {
        "datepicker": {
          "name": "datepicker",
          "setSignature": {
            "name": "datepicker",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbDatepickerElement<T> | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbDatepickerElement<T> | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "datepicker",
            "type": "",
            "returnType": "SbbDatepickerElement | null",
            "line": 21
          }
        },
        "view": {
          "name": "view",
          "setSignature": {
            "name": "view",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "CalendarView",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "CalendarView",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "view",
            "type": "",
            "returnType": "CalendarView",
            "line": 29
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 34,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 37
          }
        }
      }
    },
    {
      "name": "SbbDialog",
      "id": "directive-SbbDialog-5dc622a7e4bfc89ba83d504d5534bc9486226f737b94e4bea5db328e672b2656070291f8695f43afa70f25cde84939e89ba512650939064b8f5172c65886c824",
      "file": "src/angular/dialog/dialog/dialog.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone, Output } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbOverlayCloseEventDetails } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport type { SbbDialogElement } from '@sbb-esta/lyne-elements/dialog/dialog.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/dialog/dialog.js';\n\n@Directive({\n  selector: 'sbb-dialog',\n})\nexport class SbbDialog {\n  #element: ElementRef<SbbDialogElement> = inject(ElementRef<SbbDialogElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ alias: 'backdrop-action' })\n  public set backdropAction(value: 'close' | 'none') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.backdropAction = value));\n  }\n  public get backdropAction(): 'close' | 'none' {\n    return this.#element.nativeElement.backdropAction;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input()\n  public set backdrop(value: 'opaque' | 'translucent') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.backdrop = value));\n  }\n  public get backdrop(): 'opaque' | 'translucent' {\n    return this.#element.nativeElement.backdrop;\n  }\n\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n\n  @Output() public willOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  );\n\n  @Output() public didOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  );\n\n  @Output() public willClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  );\n\n  @Output() public didClose: Observable<SbbOverlayCloseEventDetails> =\n    fromEvent<SbbOverlayCloseEventDetails>(this.#element.nativeElement, 'didClose');\n\n  public get isOpen(): boolean {\n    return this.#element.nativeElement.isOpen;\n  }\n\n  public open(): void {\n    return this.#element.nativeElement.open();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public close(result: any, target: HTMLElement): any {\n    return this.#element.nativeElement.close(result, target);\n  }\n}\n",
      "selector": "sbb-dialog",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "string",
          "decorators": []
        },
        {
          "name": "backdrop",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "\"opaque\" | \"translucent\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "backdrop-action",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "\"close\" | \"none\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "didClose",
          "defaultValue": "fromEvent<SbbOverlayCloseEventDetails>(this.#element.nativeElement, 'didClose')",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 62,
          "type": "Observable<SbbOverlayCloseEventDetails>"
        },
        {
          "name": "didOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 52,
          "type": "Observable<void>"
        },
        {
          "name": "willClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 57,
          "type": "Observable<void>"
        },
        {
          "name": "willOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 47,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "close",
          "args": [
            {
              "name": "result",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "target",
              "type": "HTMLElement",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 74,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": "result",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "target",
              "type": "HTMLElement",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "open",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 69,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": [],
      "accessors": {
        "backdropAction": {
          "name": "backdropAction",
          "setSignature": {
            "name": "backdropAction",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"close\" | \"none\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"close\" | \"none\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "backdropAction",
            "type": "",
            "returnType": "\"close\" | \"none\"",
            "line": 19
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 24,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 27
          }
        },
        "backdrop": {
          "name": "backdrop",
          "setSignature": {
            "name": "backdrop",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"opaque\" | \"translucent\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 32,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"opaque\" | \"translucent\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "backdrop",
            "type": "",
            "returnType": "\"opaque\" | \"translucent\"",
            "line": 35
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 40,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 43
          }
        },
        "isOpen": {
          "name": "isOpen",
          "getSignature": {
            "name": "isOpen",
            "type": "boolean",
            "returnType": "boolean",
            "line": 65
          }
        }
      }
    },
    {
      "name": "SbbDialogActions",
      "id": "directive-SbbDialogActions-d8f4fddef57b4d2920e42e74720428a1b04e053df6eddf6fc1078ac020d2e83865b4c281b1de2cd963ef8b8f98a22d492cd3989a342aa4c9983cb318a3351676",
      "file": "src/angular/dialog/dialog-actions/dialog-actions.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { SbbButtonSize } from '@sbb-esta/lyne-elements/button.js';\nimport { SbbHorizontalFrom, SbbOrientation } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport type { SbbDialogActionsElement } from '@sbb-esta/lyne-elements/dialog/dialog-actions.js';\nimport { SbbLinkSize } from '@sbb-esta/lyne-elements/link.js';\nimport '@sbb-esta/lyne-elements/dialog/dialog-actions.js';\n\n@Directive({\n  selector: 'sbb-dialog-actions',\n})\nexport class SbbDialogActions {\n  #element: ElementRef<SbbDialogActionsElement> = inject(ElementRef<SbbDialogActionsElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ alias: 'align-group' })\n  public set alignGroup(value: 'start' | 'center' | 'stretch' | 'end') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.alignGroup = value));\n  }\n  public get alignGroup(): 'start' | 'center' | 'stretch' | 'end' {\n    return this.#element.nativeElement.alignGroup;\n  }\n\n  @Input({ alias: 'horizontal-from' })\n  public set horizontalFrom(value: SbbHorizontalFrom) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.horizontalFrom = value));\n  }\n  public get horizontalFrom(): SbbHorizontalFrom {\n    return this.#element.nativeElement.horizontalFrom;\n  }\n\n  @Input()\n  public set orientation(value: SbbOrientation) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.orientation = value));\n  }\n  public get orientation(): SbbOrientation {\n    return this.#element.nativeElement.orientation;\n  }\n\n  @Input({ alias: 'button-size' })\n  public set buttonSize(value: SbbButtonSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.buttonSize = value));\n  }\n  public get buttonSize(): SbbButtonSize {\n    return this.#element.nativeElement.buttonSize;\n  }\n\n  @Input({ alias: 'link-size' })\n  public set linkSize(value: SbbLinkSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.linkSize = value));\n  }\n  public get linkSize(): SbbLinkSize {\n    return this.#element.nativeElement.linkSize;\n  }\n}\n",
      "selector": "sbb-dialog-actions",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "align-group",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "\"start\" | \"center\" | \"stretch\" | \"end\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "button-size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "SbbButtonSize",
          "decorators": []
        },
        {
          "required": false,
          "name": "horizontal-from",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "SbbHorizontalFrom",
          "decorators": []
        },
        {
          "required": false,
          "name": "link-size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 48,
          "type": "SbbLinkSize",
          "decorators": []
        },
        {
          "name": "orientation",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "SbbOrientation",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "alignGroup": {
          "name": "alignGroup",
          "setSignature": {
            "name": "alignGroup",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"start\" | \"center\" | \"stretch\" | \"end\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"start\" | \"center\" | \"stretch\" | \"end\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "alignGroup",
            "type": "",
            "returnType": "\"start\" | \"center\" | \"stretch\" | \"end\"",
            "line": 19
          }
        },
        "horizontalFrom": {
          "name": "horizontalFrom",
          "setSignature": {
            "name": "horizontalFrom",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbHorizontalFrom",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 24,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbHorizontalFrom",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "horizontalFrom",
            "type": "",
            "returnType": "SbbHorizontalFrom",
            "line": 27
          }
        },
        "orientation": {
          "name": "orientation",
          "setSignature": {
            "name": "orientation",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbOrientation",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 32,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbOrientation",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "orientation",
            "type": "",
            "returnType": "SbbOrientation",
            "line": 35
          }
        },
        "buttonSize": {
          "name": "buttonSize",
          "setSignature": {
            "name": "buttonSize",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 40,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "buttonSize",
            "type": "",
            "returnType": "SbbButtonSize",
            "line": 43
          }
        },
        "linkSize": {
          "name": "linkSize",
          "setSignature": {
            "name": "linkSize",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 48,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "linkSize",
            "type": "",
            "returnType": "SbbLinkSize",
            "line": 51
          }
        }
      }
    },
    {
      "name": "SbbDialogContent",
      "id": "directive-SbbDialogContent-2742900e813642cf5fac9230d1f6ee07306582d0a57a5c7354a1ff9eccb15b99721baf5b3a97cd7ac4ca3ad334711be14fae75232dc1dfe0a04a3655ce8e3c0c",
      "file": "src/angular/dialog/dialog-content/dialog-content.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive } from '@angular/core';\nimport '@sbb-esta/lyne-elements/dialog/dialog-content.js';\n\n@Directive({\n  selector: 'sbb-dialog-content',\n})\nexport class SbbDialogContent {}\n",
      "selector": "sbb-dialog-content",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": []
    },
    {
      "name": "SbbDialogTitle",
      "id": "directive-SbbDialogTitle-f5abb7bfd0dc5aa5c065cffc23a5b65dbbaccfd8d31e48d4f2b9e3e3db6de3182339f702f97c625cb19a580bc75a6e440a7d43085060cae5f27fa677c7b33d33",
      "file": "src/angular/dialog/dialog-title/dialog-title.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone, Output } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { Breakpoint } from '@sbb-esta/lyne-elements/core/dom.js';\nimport type { SbbDialogTitleElement } from '@sbb-esta/lyne-elements/dialog/dialog-title.js';\nimport { SbbTitleLevel } from '@sbb-esta/lyne-elements/title.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/dialog/dialog-title.js';\n\n@Directive({\n  selector: 'sbb-dialog-title',\n})\nexport class SbbDialogTitle {\n  #element: ElementRef<SbbDialogTitleElement> = inject(ElementRef<SbbDialogTitleElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ alias: 'back-button', transform: booleanAttribute })\n  public set backButton(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.backButton = value));\n  }\n  public get backButton(): boolean {\n    return this.#element.nativeElement.backButton;\n  }\n\n  @Input({ alias: 'accessibility-close-label' })\n  public set accessibilityCloseLabel(value: string) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.accessibilityCloseLabel = value),\n    );\n  }\n  public get accessibilityCloseLabel(): string {\n    return this.#element.nativeElement.accessibilityCloseLabel;\n  }\n\n  @Input({ alias: 'accessibility-back-label' })\n  public set accessibilityBackLabel(value: string) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.accessibilityBackLabel = value),\n    );\n  }\n  public get accessibilityBackLabel(): string {\n    return this.#element.nativeElement.accessibilityBackLabel;\n  }\n\n  @Input({ alias: 'hide-on-scroll' })\n  public set hideOnScroll(value: Breakpoint | boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.hideOnScroll = value));\n  }\n  public get hideOnScroll(): Breakpoint | boolean {\n    return this.#element.nativeElement.hideOnScroll;\n  }\n\n  @Input()\n  public set level(value: SbbTitleLevel) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.level = value));\n  }\n  public get level(): SbbTitleLevel {\n    return this.#element.nativeElement.level;\n  }\n\n  @Input({ alias: 'visual-level' })\n  public set visualLevel(value: SbbTitleLevel | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.visualLevel = value));\n  }\n  public get visualLevel(): SbbTitleLevel | null {\n    return this.#element.nativeElement.visualLevel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input({ alias: 'visually-hidden', transform: booleanAttribute })\n  public set visuallyHidden(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.visuallyHidden = value));\n  }\n  public get visuallyHidden(): boolean {\n    return this.#element.nativeElement.visuallyHidden;\n  }\n\n  @Output() public requestBackAction: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'requestBackAction',\n  );\n}\n",
      "selector": "sbb-dialog-title",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-back-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "accessibility-close-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "back-button",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "hide-on-scroll",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 45,
          "type": "Breakpoint | boolean",
          "decorators": []
        },
        {
          "name": "level",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 53,
          "type": "SbbTitleLevel",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 69,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "visual-level",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 61,
          "type": "SbbTitleLevel | null",
          "decorators": []
        },
        {
          "required": false,
          "name": "visually-hidden",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 77,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "requestBackAction",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'requestBackAction',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 84,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "backButton": {
          "name": "backButton",
          "setSignature": {
            "name": "backButton",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "backButton",
            "type": "boolean",
            "returnType": "boolean",
            "line": 20
          }
        },
        "accessibilityCloseLabel": {
          "name": "accessibilityCloseLabel",
          "setSignature": {
            "name": "accessibilityCloseLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityCloseLabel",
            "type": "string",
            "returnType": "string",
            "line": 30
          }
        },
        "accessibilityBackLabel": {
          "name": "accessibilityBackLabel",
          "setSignature": {
            "name": "accessibilityBackLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 35,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityBackLabel",
            "type": "string",
            "returnType": "string",
            "line": 40
          }
        },
        "hideOnScroll": {
          "name": "hideOnScroll",
          "setSignature": {
            "name": "hideOnScroll",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "Breakpoint | boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 45,
            "jsdoctags": [
              {
                "name": "value",
                "type": "Breakpoint | boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "hideOnScroll",
            "type": "",
            "returnType": "Breakpoint | boolean",
            "line": 48
          }
        },
        "level": {
          "name": "level",
          "setSignature": {
            "name": "level",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 53,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "level",
            "type": "",
            "returnType": "SbbTitleLevel",
            "line": 56
          }
        },
        "visualLevel": {
          "name": "visualLevel",
          "setSignature": {
            "name": "visualLevel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTitleLevel | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 61,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTitleLevel | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "visualLevel",
            "type": "",
            "returnType": "SbbTitleLevel | null",
            "line": 64
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 69,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 72
          }
        },
        "visuallyHidden": {
          "name": "visuallyHidden",
          "setSignature": {
            "name": "visuallyHidden",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 77,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "visuallyHidden",
            "type": "boolean",
            "returnType": "boolean",
            "line": 80
          }
        }
      }
    },
    {
      "name": "SbbDivider",
      "id": "directive-SbbDivider-916c6528063cf0f270115270e9e7be682fad05cf51490184681443e8a0bc4890ea1c41ea35d89f9d5a1ddd06116ea2cb6f70513fd6e4a30f80b2a4089e57b005",
      "file": "src/angular/divider/divider.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbOrientation } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport type { SbbDividerElement } from '@sbb-esta/lyne-elements/divider.js';\nimport '@sbb-esta/lyne-elements/divider.js';\n\n@Directive({\n  selector: 'sbb-divider',\n})\nexport class SbbDivider {\n  #element: ElementRef<SbbDividerElement> = inject(ElementRef<SbbDividerElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set orientation(value: SbbOrientation) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.orientation = value));\n  }\n  public get orientation(): SbbOrientation {\n    return this.#element.nativeElement.orientation;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n}\n",
      "selector": "sbb-divider",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "orientation",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "SbbOrientation",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "orientation": {
          "name": "orientation",
          "setSignature": {
            "name": "orientation",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbOrientation",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 15,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbOrientation",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "orientation",
            "type": "",
            "returnType": "SbbOrientation",
            "line": 18
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 23,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 26
          }
        }
      }
    },
    {
      "name": "SbbExpansionPanel",
      "id": "directive-SbbExpansionPanel-65da2d8a87fdc994be29a6b2be2878fa5bcfd919bd29464d19365aeac6c25b93f41b86254cb13300df610a650b0508e2b899f6cc891122427c961b032552770e",
      "file": "src/angular/expansion-panel/expansion-panel/expansion-panel.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone, Output } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbExpansionPanelElement } from '@sbb-esta/lyne-elements/expansion-panel/expansion-panel.js';\nimport { SbbTitleLevel } from '@sbb-esta/lyne-elements/title.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/expansion-panel/expansion-panel.js';\n\n@Directive({\n  selector: 'sbb-expansion-panel',\n})\nexport class SbbExpansionPanel {\n  #element: ElementRef<SbbExpansionPanelElement> = inject(ElementRef<SbbExpansionPanelElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ alias: 'title-level' })\n  public set titleLevel(value: SbbTitleLevel | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleLevel = value));\n  }\n  public get titleLevel(): SbbTitleLevel | null {\n    return this.#element.nativeElement.titleLevel;\n  }\n\n  @Input()\n  public set color(value: 'white' | 'milk') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.color = value));\n  }\n  public get color(): 'white' | 'milk' {\n    return this.#element.nativeElement.color;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set expanded(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.expanded = value));\n  }\n  public get expanded(): boolean {\n    return this.#element.nativeElement.expanded;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set borderless(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.borderless = value));\n  }\n  public get borderless(): boolean {\n    return this.#element.nativeElement.borderless;\n  }\n\n  @Input()\n  public set size(value: 's' | 'l') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): 's' | 'l' {\n    return this.#element.nativeElement.size;\n  }\n\n  @Output() public willOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  );\n\n  @Output() public didOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  );\n\n  @Output() public willClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  );\n\n  @Output() public didClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  );\n}\n",
      "selector": "sbb-expansion-panel",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "borderless",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 48,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "color",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "\"white\" | \"milk\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "expanded",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 56,
          "type": "\"s\" | \"l\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "title-level",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "SbbTitleLevel | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "didClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 78,
          "type": "Observable<void>"
        },
        {
          "name": "didOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 68,
          "type": "Observable<void>"
        },
        {
          "name": "willClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 73,
          "type": "Observable<void>"
        },
        {
          "name": "willOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 63,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "titleLevel": {
          "name": "titleLevel",
          "setSignature": {
            "name": "titleLevel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTitleLevel | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTitleLevel | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleLevel",
            "type": "",
            "returnType": "SbbTitleLevel | null",
            "line": 19
          }
        },
        "color": {
          "name": "color",
          "setSignature": {
            "name": "color",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"white\" | \"milk\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 24,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"white\" | \"milk\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "color",
            "type": "",
            "returnType": "\"white\" | \"milk\"",
            "line": 27
          }
        },
        "expanded": {
          "name": "expanded",
          "setSignature": {
            "name": "expanded",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 32,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "expanded",
            "type": "boolean",
            "returnType": "boolean",
            "line": 35
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 40,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 43
          }
        },
        "borderless": {
          "name": "borderless",
          "setSignature": {
            "name": "borderless",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 48,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "borderless",
            "type": "boolean",
            "returnType": "boolean",
            "line": 51
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"s\" | \"l\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 56,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"s\" | \"l\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "\"s\" | \"l\"",
            "line": 59
          }
        }
      }
    },
    {
      "name": "SbbExpansionPanelContent",
      "id": "directive-SbbExpansionPanelContent-79d0882e3731e00e871decf3f3a8843f61eecb800f347e4efaac8961611faf851df7b0d5115dc3c413db5a5699bc5d60a51da3ed28129cf73bd14b275f181c01",
      "file": "src/angular/expansion-panel/expansion-panel-content/expansion-panel-content.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive } from '@angular/core';\nimport '@sbb-esta/lyne-elements/expansion-panel/expansion-panel-content.js';\n\n@Directive({\n  selector: 'sbb-expansion-panel-content',\n})\nexport class SbbExpansionPanelContent {}\n",
      "selector": "sbb-expansion-panel-content",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": []
    },
    {
      "name": "SbbExpansionPanelHeader",
      "id": "directive-SbbExpansionPanelHeader-42895b6d42f6b63d9d0c97101cc79d10d46bfc89a87276704feaea097539792ab5fcdea87b1ea6ef962cc7f933318d01bfffffea84f524df1ac340d1c28a725b",
      "file": "src/angular/expansion-panel/expansion-panel-header/expansion-panel-header.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone, Output } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbButtonType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport type { SbbExpansionPanelHeaderElement } from '@sbb-esta/lyne-elements/expansion-panel/expansion-panel-header.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/expansion-panel/expansion-panel-header.js';\n\n@Directive({\n  selector: 'sbb-expansion-panel-header',\n})\nexport class SbbExpansionPanelHeader {\n  #element: ElementRef<SbbExpansionPanelHeaderElement> = inject(\n    ElementRef<SbbExpansionPanelHeaderElement>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ alias: 'disabled-interactive', transform: booleanAttribute })\n  public set disabledInteractive(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabledInteractive = value));\n  }\n  public get disabledInteractive(): boolean {\n    return this.#element.nativeElement.disabledInteractive;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input()\n  public set form(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.form = value));\n  }\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set type(value: SbbButtonType) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): SbbButtonType {\n    return this.#element.nativeElement.type;\n  }\n\n  @Output() public toggleExpanded: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'toggleExpanded',\n  );\n}\n",
      "selector": "sbb-expansion-panel-header",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled-interactive",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "form",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 42,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 50,
          "type": "string",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 66,
          "type": "SbbButtonType",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 58,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "toggleExpanded",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'toggleExpanded',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 73,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "disabledInteractive": {
          "name": "disabledInteractive",
          "setSignature": {
            "name": "disabledInteractive",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabledInteractive",
            "type": "boolean",
            "returnType": "boolean",
            "line": 21
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 29
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 34,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 37
          }
        },
        "form": {
          "name": "form",
          "setSignature": {
            "name": "form",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 42,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 45
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 50,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 53
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 58,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 61
          }
        },
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 66,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "SbbButtonType",
            "line": 69
          }
        }
      }
    },
    {
      "name": "SbbFileSelector",
      "id": "directive-SbbFileSelector-06f87e2f7b5a76f896c913c0000423ae93b12090552ff9df19e212c2e32baa1517f615c8ed25dc5b3af1563d99e2b24d27670160c42b7b85538cf62e24370e3d",
      "file": "src/angular/file-selector/file-selector/file-selector.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, forwardRef, inject, Input, NgZone, Output } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { booleanAttribute, SbbControlValueAccessorMixin } from '@sbb-esta/lyne-angular/core';\nimport type { SbbFileSelectorElement } from '@sbb-esta/lyne-elements/file-selector/file-selector.js';\nimport { fromEvent, type Observable } from 'rxjs';\n\nimport '@sbb-esta/lyne-elements/file-selector/file-selector.js';\n\n@Directive({\n  selector: 'sbb-file-selector',\n  exportAs: 'sbbFileSelector',\n  host: {\n    '(change)': 'this.onChangeFn(this.files)',\n    '(blur)': 'this.onTouchedFn()',\n  },\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SbbFileSelector),\n      multi: true,\n    },\n  ],\n})\nexport class SbbFileSelector extends SbbControlValueAccessorMixin(class {}) {\n  #element: ElementRef<SbbFileSelectorElement> = inject(ElementRef<SbbFileSelectorElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: 's' | 'm') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): 's' | 'm' {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set multiple(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.multiple = value));\n  }\n  public get multiple(): boolean {\n    return this.#element.nativeElement.multiple;\n  }\n\n  @Input({ alias: 'multiple-mode' })\n  public set multipleMode(value: 'default' | 'persistent') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.multipleMode = value));\n  }\n  public get multipleMode(): 'default' | 'persistent' {\n    return this.#element.nativeElement.multipleMode;\n  }\n\n  @Input()\n  public set accept(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accept = value));\n  }\n  public get accept(): string {\n    return this.#element.nativeElement.accept;\n  }\n\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set files(value: Readonly<File>[]) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.files = value));\n  }\n  public get files(): Readonly<File>[] {\n    return this.#element.nativeElement.files;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Output() public fileChanged: Observable<readonly File[]> = fromEvent<readonly File[]>(\n    this.#element.nativeElement,\n    'fileChanged',\n  );\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public change: Observable<Event> = fromEvent<Event>(\n    this.#element.nativeElement,\n    'change',\n  );\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public input: Observable<Event> = fromEvent<Event>(\n    this.#element.nativeElement,\n    'input',\n  );\n\n  public get type(): string {\n    return this.#element.nativeElement.type;\n  }\n\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  override writeValue(value: any): void {\n    this.files = value;\n  }\n}\n",
      "selector": "sbb-file-selector",
      "providers": [
        {
          "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SbbFileSelector), multi: true,\n}"
        }
      ],
      "exportAs": "sbbFileSelector",
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "name": "accept",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 53,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 61,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 85,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "files",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 77,
          "type": "Readonly[]",
          "decorators": []
        },
        {
          "required": false,
          "name": "multiple",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 37,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "multiple-mode",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 45,
          "type": "\"default\" | \"persistent\"",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 93,
          "type": "string",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 29,
          "type": "\"s\" | \"m\"",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 69,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "change",
          "defaultValue": "fromEvent<Event>(\n    this.#element.nativeElement,\n    'change',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 106,
          "type": "Observable<Event>"
        },
        {
          "name": "fileChanged",
          "defaultValue": "fromEvent<readonly File[]>(\n    this.#element.nativeElement,\n    'fileChanged',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 100,
          "type": "Observable<File[]>"
        },
        {
          "name": "input",
          "defaultValue": "fromEvent<Event>(\n    this.#element.nativeElement,\n    'input',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 112,
          "type": "Observable<Event>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "writeValue",
          "args": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 126,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [164],
          "jsdoctags": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "extends": ["SbbControlValueAccessorMixin(class {})"],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"s\" | \"m\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 29,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"s\" | \"m\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "\"s\" | \"m\"",
            "line": 32
          }
        },
        "multiple": {
          "name": "multiple",
          "setSignature": {
            "name": "multiple",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 37,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "multiple",
            "type": "boolean",
            "returnType": "boolean",
            "line": 40
          }
        },
        "multipleMode": {
          "name": "multipleMode",
          "setSignature": {
            "name": "multipleMode",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"default\" | \"persistent\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 45,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"default\" | \"persistent\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "multipleMode",
            "type": "",
            "returnType": "\"default\" | \"persistent\"",
            "line": 48
          }
        },
        "accept": {
          "name": "accept",
          "setSignature": {
            "name": "accept",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 53,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accept",
            "type": "string",
            "returnType": "string",
            "line": 56
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 61,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 64
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 69,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 72
          }
        },
        "files": {
          "name": "files",
          "setSignature": {
            "name": "files",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "Readonly<File>[]",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 77,
            "jsdoctags": [
              {
                "name": "value",
                "type": "Readonly<File>[]",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "files",
            "type": "[]",
            "returnType": "Readonly[]",
            "line": 80
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 85,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 88
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 93,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 96
          }
        },
        "type": {
          "name": "type",
          "getSignature": {
            "name": "type",
            "type": "string",
            "returnType": "string",
            "line": 117
          }
        },
        "form": {
          "name": "form",
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 121
          }
        }
      }
    },
    {
      "name": "SbbFileSelectorDropzone",
      "id": "directive-SbbFileSelectorDropzone-5b052e98b37a2eac988ec3ffef2ac3c64dce241b7c20d9b53693c7c9467f8019a9d0564b87f46f520cfb8c391e029f607c79d090544d5c46d100f0129d9dd5b4",
      "file": "src/angular/file-selector/file-selector-dropzone/file-selector-dropzone.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, forwardRef, inject, Input, NgZone, Output } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { booleanAttribute, SbbControlValueAccessorMixin } from '@sbb-esta/lyne-angular/core';\nimport type { SbbFileSelectorDropzoneElement } from '@sbb-esta/lyne-elements/file-selector/file-selector-dropzone.js';\nimport { fromEvent, type Observable } from 'rxjs';\n\nimport '@sbb-esta/lyne-elements/file-selector/file-selector-dropzone.js';\n\n@Directive({\n  selector: 'sbb-file-selector-dropzone',\n  exportAs: 'sbbFileSelectorDropzone',\n  host: {\n    '(change)': 'this.onChangeFn(this.files)',\n    '(blur)': 'this.onTouchedFn()',\n  },\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SbbFileSelectorDropzone),\n      multi: true,\n    },\n  ],\n})\nexport class SbbFileSelectorDropzone extends SbbControlValueAccessorMixin(class {}) {\n  #element: ElementRef<SbbFileSelectorDropzoneElement> = inject(\n    ElementRef<SbbFileSelectorDropzoneElement>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ alias: 'title-content' })\n  public set titleContent(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleContent = value));\n  }\n  public get titleContent(): string {\n    return this.#element.nativeElement.titleContent;\n  }\n\n  @Input()\n  public set size(value: 's' | 'm') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): 's' | 'm' {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set multiple(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.multiple = value));\n  }\n  public get multiple(): boolean {\n    return this.#element.nativeElement.multiple;\n  }\n\n  @Input({ alias: 'multiple-mode' })\n  public set multipleMode(value: 'default' | 'persistent') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.multipleMode = value));\n  }\n  public get multipleMode(): 'default' | 'persistent' {\n    return this.#element.nativeElement.multipleMode;\n  }\n\n  @Input()\n  public set accept(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accept = value));\n  }\n  public get accept(): string {\n    return this.#element.nativeElement.accept;\n  }\n\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set files(value: Readonly<File>[]) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.files = value));\n  }\n  public get files(): Readonly<File>[] {\n    return this.#element.nativeElement.files;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Output() public fileChanged: Observable<readonly File[]> = fromEvent<readonly File[]>(\n    this.#element.nativeElement,\n    'fileChanged',\n  );\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public change: Observable<Event> = fromEvent<Event>(\n    this.#element.nativeElement,\n    'change',\n  );\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public input: Observable<Event> = fromEvent<Event>(\n    this.#element.nativeElement,\n    'input',\n  );\n\n  public get type(): string {\n    return this.#element.nativeElement.type;\n  }\n\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  override writeValue(value: any): void {\n    this.files = value;\n  }\n}\n",
      "selector": "sbb-file-selector-dropzone",
      "providers": [
        {
          "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SbbFileSelectorDropzone), multi: true,\n}"
        }
      ],
      "exportAs": "sbbFileSelectorDropzone",
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "name": "accept",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 63,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 71,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 95,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "files",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 87,
          "type": "Readonly[]",
          "decorators": []
        },
        {
          "required": false,
          "name": "multiple",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 47,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "multiple-mode",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 55,
          "type": "\"default\" | \"persistent\"",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 103,
          "type": "string",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 39,
          "type": "\"s\" | \"m\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "title-content",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 31,
          "type": "string",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 79,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "change",
          "defaultValue": "fromEvent<Event>(\n    this.#element.nativeElement,\n    'change',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 116,
          "type": "Observable<Event>"
        },
        {
          "name": "fileChanged",
          "defaultValue": "fromEvent<readonly File[]>(\n    this.#element.nativeElement,\n    'fileChanged',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 110,
          "type": "Observable<File[]>"
        },
        {
          "name": "input",
          "defaultValue": "fromEvent<Event>(\n    this.#element.nativeElement,\n    'input',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 122,
          "type": "Observable<Event>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "writeValue",
          "args": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 136,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [164],
          "jsdoctags": [
            {
              "name": "value",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "extends": ["SbbControlValueAccessorMixin(class {})"],
      "accessors": {
        "titleContent": {
          "name": "titleContent",
          "setSignature": {
            "name": "titleContent",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 31,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleContent",
            "type": "string",
            "returnType": "string",
            "line": 34
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"s\" | \"m\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 39,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"s\" | \"m\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "\"s\" | \"m\"",
            "line": 42
          }
        },
        "multiple": {
          "name": "multiple",
          "setSignature": {
            "name": "multiple",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 47,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "multiple",
            "type": "boolean",
            "returnType": "boolean",
            "line": 50
          }
        },
        "multipleMode": {
          "name": "multipleMode",
          "setSignature": {
            "name": "multipleMode",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"default\" | \"persistent\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 55,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"default\" | \"persistent\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "multipleMode",
            "type": "",
            "returnType": "\"default\" | \"persistent\"",
            "line": 58
          }
        },
        "accept": {
          "name": "accept",
          "setSignature": {
            "name": "accept",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 63,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accept",
            "type": "string",
            "returnType": "string",
            "line": 66
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 71,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 74
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 79,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 82
          }
        },
        "files": {
          "name": "files",
          "setSignature": {
            "name": "files",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "Readonly<File>[]",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 87,
            "jsdoctags": [
              {
                "name": "value",
                "type": "Readonly<File>[]",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "files",
            "type": "[]",
            "returnType": "Readonly[]",
            "line": 90
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 95,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 98
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 103,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 106
          }
        },
        "type": {
          "name": "type",
          "getSignature": {
            "name": "type",
            "type": "string",
            "returnType": "string",
            "line": 127
          }
        },
        "form": {
          "name": "form",
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 131
          }
        }
      }
    },
    {
      "name": "SbbFlipCard",
      "id": "directive-SbbFlipCard-11bfbea604189878f070c928c46c89deec549a6541cd2f645e07421bf78df2c29686fd750f6dfade2625b9f3d59b7f5dc21373b86cf20e5943c0115a21315890",
      "file": "src/angular/flip-card/flip-card/flip-card.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone, Output } from '@angular/core';\nimport { SbbFlipCardSummaryElement } from '@sbb-esta/lyne-elements/flip-card/flip-card-summary.js';\nimport type { SbbFlipCardElement } from '@sbb-esta/lyne-elements/flip-card/flip-card.js';\nimport { SbbFlipCardDetailsElement } from '@sbb-esta/lyne-elements/flip-card.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/flip-card/flip-card.js';\n\n@Directive({\n  selector: 'sbb-flip-card',\n})\nexport class SbbFlipCard {\n  #element: ElementRef<SbbFlipCardElement> = inject(ElementRef<SbbFlipCardElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n\n  @Output() public flip: Observable<void> = fromEvent<void>(this.#element.nativeElement, 'flip');\n\n  public get summary(): SbbFlipCardSummaryElement | null {\n    return this.#element.nativeElement.summary;\n  }\n\n  public get details(): SbbFlipCardDetailsElement | null {\n    return this.#element.nativeElement.details;\n  }\n\n  public get isFlipped(): boolean {\n    return this.#element.nativeElement.isFlipped;\n  }\n\n  public toggle(): void {\n    return this.#element.nativeElement.toggle();\n  }\n}\n",
      "selector": "sbb-flip-card",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "flip",
          "defaultValue": "fromEvent<void>(this.#element.nativeElement, 'flip')",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "toggle",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 37,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": [],
      "accessors": {
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 19
          }
        },
        "summary": {
          "name": "summary",
          "getSignature": {
            "name": "summary",
            "type": "",
            "returnType": "SbbFlipCardSummaryElement | null",
            "line": 25
          }
        },
        "details": {
          "name": "details",
          "getSignature": {
            "name": "details",
            "type": "",
            "returnType": "SbbFlipCardDetailsElement | null",
            "line": 29
          }
        },
        "isFlipped": {
          "name": "isFlipped",
          "getSignature": {
            "name": "isFlipped",
            "type": "boolean",
            "returnType": "boolean",
            "line": 33
          }
        }
      }
    },
    {
      "name": "SbbFlipCardDetails",
      "id": "directive-SbbFlipCardDetails-abd1d6838e690de24fda34722192d23ff0d7421f5c2ca3c662e29ec92b0ab92346f3e3ce076ae8f4811e43633ce3519113031eed27723a75dd89f9a9e5460e99",
      "file": "src/angular/flip-card/flip-card-details/flip-card-details.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive } from '@angular/core';\nimport '@sbb-esta/lyne-elements/flip-card/flip-card-details.js';\n\n@Directive({\n  selector: 'sbb-flip-card-details',\n})\nexport class SbbFlipCardDetails {}\n",
      "selector": "sbb-flip-card-details",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": []
    },
    {
      "name": "SbbFlipCardSummary",
      "id": "directive-SbbFlipCardSummary-da0b073ab026266fffd1bee7e010bb5ee1036ab6eaef15bbdc1380fbf2a7988b855d6368954b6625c818604f88d611f28e2a3cb8d3de4fb1eae6691e6837356e",
      "file": "src/angular/flip-card/flip-card-summary/flip-card-summary.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport type {\n  SbbFlipCardImageAlignment,\n  SbbFlipCardSummaryElement,\n} from '@sbb-esta/lyne-elements/flip-card/flip-card-summary.js';\nimport '@sbb-esta/lyne-elements/flip-card/flip-card-summary.js';\n\n@Directive({\n  selector: 'sbb-flip-card-summary',\n})\nexport class SbbFlipCardSummary {\n  #element: ElementRef<SbbFlipCardSummaryElement> = inject(ElementRef<SbbFlipCardSummaryElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ alias: 'image-alignment' })\n  public set imageAlignment(value: SbbFlipCardImageAlignment) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.imageAlignment = value));\n  }\n  public get imageAlignment(): SbbFlipCardImageAlignment {\n    return this.#element.nativeElement.imageAlignment;\n  }\n}\n",
      "selector": "sbb-flip-card-summary",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "image-alignment",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "SbbFlipCardImageAlignment",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "imageAlignment": {
          "name": "imageAlignment",
          "setSignature": {
            "name": "imageAlignment",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbFlipCardImageAlignment",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbFlipCardImageAlignment",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "imageAlignment",
            "type": "",
            "returnType": "SbbFlipCardImageAlignment",
            "line": 19
          }
        }
      }
    },
    {
      "name": "SbbFooter",
      "id": "directive-SbbFooter-5a2823da4de8071eead4d138e96774e0d6655d274715f27eafc382d96fa18e2e64899332f984c83df43e4ad83b3e8fbd074fb49b825681a9e16bb45918dde4d6",
      "file": "src/angular/footer/footer.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbFooterElement } from '@sbb-esta/lyne-elements/footer.js';\nimport '@sbb-esta/lyne-elements/footer.js';\nimport { SbbTitleLevel } from '@sbb-esta/lyne-elements/title.js';\n\n@Directive({\n  selector: 'sbb-footer',\n})\nexport class SbbFooter {\n  #element: ElementRef<SbbFooterElement> = inject(ElementRef<SbbFooterElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set variant(value: 'default' | 'clock-columns') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.variant = value));\n  }\n  public get variant(): 'default' | 'clock-columns' {\n    return this.#element.nativeElement.variant;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set expanded(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.expanded = value));\n  }\n  public get expanded(): boolean {\n    return this.#element.nativeElement.expanded;\n  }\n\n  @Input({ alias: 'accessibility-title' })\n  public set accessibilityTitle(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityTitle = value));\n  }\n  public get accessibilityTitle(): string {\n    return this.#element.nativeElement.accessibilityTitle;\n  }\n\n  @Input({ alias: 'accessibility-title-level' })\n  public set accessibilityTitleLevel(value: SbbTitleLevel) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.accessibilityTitleLevel = value),\n    );\n  }\n  public get accessibilityTitleLevel(): SbbTitleLevel {\n    return this.#element.nativeElement.accessibilityTitleLevel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n}\n",
      "selector": "sbb-footer",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-title",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 31,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "accessibility-title-level",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 39,
          "type": "SbbTitleLevel",
          "decorators": []
        },
        {
          "required": false,
          "name": "expanded",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 49,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "variant",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "\"default\" | \"clock-columns\"",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "variant": {
          "name": "variant",
          "setSignature": {
            "name": "variant",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"default\" | \"clock-columns\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 15,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"default\" | \"clock-columns\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "variant",
            "type": "",
            "returnType": "\"default\" | \"clock-columns\"",
            "line": 18
          }
        },
        "expanded": {
          "name": "expanded",
          "setSignature": {
            "name": "expanded",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 23,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "expanded",
            "type": "boolean",
            "returnType": "boolean",
            "line": 26
          }
        },
        "accessibilityTitle": {
          "name": "accessibilityTitle",
          "setSignature": {
            "name": "accessibilityTitle",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 31,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityTitle",
            "type": "string",
            "returnType": "string",
            "line": 34
          }
        },
        "accessibilityTitleLevel": {
          "name": "accessibilityTitleLevel",
          "setSignature": {
            "name": "accessibilityTitleLevel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 39,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityTitleLevel",
            "type": "",
            "returnType": "SbbTitleLevel",
            "line": 44
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 49,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 52
          }
        }
      }
    },
    {
      "name": "SbbFormError",
      "id": "directive-SbbFormError-8fab2c115db772b43aad310c3dc0fbe5ac6c3c8621caa00080cbdbb1e46c2927ad151ca3ba57d4a654dd5200a10228cf1219d1c0f33339a930e5c1d9caa3287e",
      "file": "src/angular/form-error/form-error.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbFormErrorElement } from '@sbb-esta/lyne-elements/form-error.js';\nimport '@sbb-esta/lyne-elements/form-error.js';\n\n@Directive({\n  selector: 'sbb-form-error',\n})\nexport class SbbFormError {\n  #element: ElementRef<SbbFormErrorElement> = inject(ElementRef<SbbFormErrorElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n}\n",
      "selector": "sbb-form-error",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 14,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 17
          }
        }
      }
    },
    {
      "name": "SbbFormField",
      "id": "directive-SbbFormField-bb395b540427fe8314ce022fb7c0351454032365452f49d76c897ff5dd382c95c2274f00a47458fedac2f722497a2cda37f56ed8c18743d8764078bc2685fb3a",
      "file": "src/angular/form-field/form-field/form-field.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbFormFieldElement } from '@sbb-esta/lyne-elements/form-field/form-field.js';\nimport '@sbb-esta/lyne-elements/form-field/form-field.js';\n\n@Directive({\n  selector: 'sbb-form-field',\n})\nexport class SbbFormField {\n  #element: ElementRef<SbbFormFieldElement> = inject(ElementRef<SbbFormFieldElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ alias: 'error-space' })\n  public set errorSpace(value: 'none' | 'reserve') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.errorSpace = value));\n  }\n  public get errorSpace(): 'none' | 'reserve' {\n    return this.#element.nativeElement.errorSpace;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set optional(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.optional = value));\n  }\n  public get optional(): boolean {\n    return this.#element.nativeElement.optional;\n  }\n\n  @Input()\n  public set size(value: 'l' | 'm' | 's') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): 'l' | 'm' | 's' {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set borderless(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.borderless = value));\n  }\n  public get borderless(): boolean {\n    return this.#element.nativeElement.borderless;\n  }\n\n  @Input()\n  public set width(value: 'default' | 'collapse') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.width = value));\n  }\n  public get width(): 'default' | 'collapse' {\n    return this.#element.nativeElement.width;\n  }\n\n  @Input({ alias: 'hidden-label', transform: booleanAttribute })\n  public set hiddenLabel(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.hiddenLabel = value));\n  }\n  public get hiddenLabel(): boolean {\n    return this.#element.nativeElement.hiddenLabel;\n  }\n\n  @Input({ alias: 'floating-label', transform: booleanAttribute })\n  public set floatingLabel(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.floatingLabel = value));\n  }\n  public get floatingLabel(): boolean {\n    return this.#element.nativeElement.floatingLabel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  public get inputElement(): HTMLInputElement | HTMLSelectElement | HTMLElement | undefined {\n    return this.#element.nativeElement.inputElement;\n  }\n\n  public reset(): void {\n    return this.#element.nativeElement.reset();\n  }\n\n  public clear(): void {\n    return this.#element.nativeElement.clear();\n  }\n}\n",
      "selector": "sbb-form-field",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "borderless",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 38,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "error-space",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "\"none\" | \"reserve\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "floating-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 62,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "hidden-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 54,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 70,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "optional",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 30,
          "type": "\"l\" | \"m\" | \"s\"",
          "decorators": []
        },
        {
          "name": "width",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 46,
          "type": "\"default\" | \"collapse\"",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "clear",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 85,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        },
        {
          "name": "reset",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 81,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": [],
      "accessors": {
        "errorSpace": {
          "name": "errorSpace",
          "setSignature": {
            "name": "errorSpace",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"none\" | \"reserve\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 14,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"none\" | \"reserve\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "errorSpace",
            "type": "",
            "returnType": "\"none\" | \"reserve\"",
            "line": 17
          }
        },
        "optional": {
          "name": "optional",
          "setSignature": {
            "name": "optional",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 22,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "optional",
            "type": "boolean",
            "returnType": "boolean",
            "line": 25
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"l\" | \"m\" | \"s\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 30,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"l\" | \"m\" | \"s\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "\"l\" | \"m\" | \"s\"",
            "line": 33
          }
        },
        "borderless": {
          "name": "borderless",
          "setSignature": {
            "name": "borderless",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 38,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "borderless",
            "type": "boolean",
            "returnType": "boolean",
            "line": 41
          }
        },
        "width": {
          "name": "width",
          "setSignature": {
            "name": "width",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"default\" | \"collapse\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 46,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"default\" | \"collapse\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "width",
            "type": "",
            "returnType": "\"default\" | \"collapse\"",
            "line": 49
          }
        },
        "hiddenLabel": {
          "name": "hiddenLabel",
          "setSignature": {
            "name": "hiddenLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 54,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "hiddenLabel",
            "type": "boolean",
            "returnType": "boolean",
            "line": 57
          }
        },
        "floatingLabel": {
          "name": "floatingLabel",
          "setSignature": {
            "name": "floatingLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 62,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "floatingLabel",
            "type": "boolean",
            "returnType": "boolean",
            "line": 65
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 70,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 73
          }
        },
        "inputElement": {
          "name": "inputElement",
          "getSignature": {
            "name": "inputElement",
            "type": "",
            "returnType": "HTMLInputElement | HTMLSelectElement | HTMLElement | undefined",
            "line": 77
          }
        }
      }
    },
    {
      "name": "SbbFormFieldClear",
      "id": "directive-SbbFormFieldClear-45595960eedb15aeb25121cb2c396db668a3eb9634e5bb307df351f3344eb30940602ad8a7960815cc8c18f0b83a1a8efa62fa509791da071cc6ae6ab09f7f68",
      "file": "src/angular/form-field/form-field-clear/form-field-clear.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbButtonType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport type { SbbFormFieldClearElement } from '@sbb-esta/lyne-elements/form-field/form-field-clear.js';\n\nimport '@sbb-esta/lyne-elements/form-field/form-field-clear.js';\n\n@Directive({\n  selector: 'sbb-form-field-clear',\n})\nexport class SbbFormFieldClear {\n  #element: ElementRef<SbbFormFieldClearElement> = inject(ElementRef<SbbFormFieldClearElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input()\n  public set form(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.form = value));\n  }\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set type(value: SbbButtonType) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): SbbButtonType {\n    return this.#element.nativeElement.type;\n  }\n}\n",
      "selector": "sbb-form-field-clear",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "name": "form",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 48,
          "type": "SbbButtonType",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 19
          }
        },
        "form": {
          "name": "form",
          "setSignature": {
            "name": "form",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 24,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 27
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 32,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 35
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 40,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 43
          }
        },
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 48,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "SbbButtonType",
            "line": 51
          }
        }
      }
    },
    {
      "name": "SbbHeader",
      "id": "directive-SbbHeader-987366c0370cabb823b9a2e01f031e503978228f136593e326aa310c71afddaff9588c1b3916708aee3f3dc0fd13d1ae35ff0dc88bf22da199996ff718bcbdc1",
      "file": "src/angular/header/header/header.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbHeaderElement } from '@sbb-esta/lyne-elements/header/header.js';\nimport '@sbb-esta/lyne-elements/header/header.js';\n\n@Directive({\n  selector: 'sbb-header',\n})\nexport class SbbHeader {\n  #element: ElementRef<SbbHeaderElement> = inject(ElementRef<SbbHeaderElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set expanded(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.expanded = value));\n  }\n  public get expanded(): boolean {\n    return this.#element.nativeElement.expanded;\n  }\n\n  @Input({ alias: 'scroll-origin' })\n  public set scrollOrigin(value: string | HTMLElement | Document) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.scrollOrigin = value));\n  }\n  public get scrollOrigin(): string | HTMLElement | Document {\n    return this.#element.nativeElement.scrollOrigin;\n  }\n\n  @Input({ alias: 'hide-on-scroll', transform: booleanAttribute })\n  public set hideOnScroll(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.hideOnScroll = value));\n  }\n  public get hideOnScroll(): boolean {\n    return this.#element.nativeElement.hideOnScroll;\n  }\n\n  @Input()\n  public set size(value: 'm' | 's') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): 'm' | 's' {\n    return this.#element.nativeElement.size;\n  }\n}\n",
      "selector": "sbb-header",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "expanded",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "hide-on-scroll",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 30,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "scroll-origin",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "string | HTMLElement | Document",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 38,
          "type": "\"m\" | \"s\"",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "expanded": {
          "name": "expanded",
          "setSignature": {
            "name": "expanded",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 14,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "expanded",
            "type": "boolean",
            "returnType": "boolean",
            "line": 17
          }
        },
        "scrollOrigin": {
          "name": "scrollOrigin",
          "setSignature": {
            "name": "scrollOrigin",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | HTMLElement | Document",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 22,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | HTMLElement | Document",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "scrollOrigin",
            "type": "",
            "returnType": "string | HTMLElement | Document",
            "line": 25
          }
        },
        "hideOnScroll": {
          "name": "hideOnScroll",
          "setSignature": {
            "name": "hideOnScroll",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 30,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "hideOnScroll",
            "type": "boolean",
            "returnType": "boolean",
            "line": 33
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"m\" | \"s\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 38,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"m\" | \"s\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "\"m\" | \"s\"",
            "line": 41
          }
        }
      }
    },
    {
      "name": "SbbHeaderButton",
      "id": "directive-SbbHeaderButton-8d57d25a3739c18e1294db491f83d8162991b452361f401450dfef2a5512851c4f202e5ee97a84ef7033cd6396f7e356b338a0a4d88aa8ba4f1d47e086943b4d",
      "file": "src/angular/header/header-button/header-button.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { SbbButtonType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport { SbbHorizontalFrom } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport type { SbbHeaderButtonElement } from '@sbb-esta/lyne-elements/header/header-button.js';\n\nimport '@sbb-esta/lyne-elements/header/header-button.js';\n\n@Directive({\n  selector: 'sbb-header-button',\n})\nexport class SbbHeaderButton {\n  #element: ElementRef<SbbHeaderButtonElement> = inject(ElementRef<SbbHeaderButtonElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ alias: 'expand-from' })\n  public set expandFrom(value: SbbHorizontalFrom) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.expandFrom = value));\n  }\n  public get expandFrom(): SbbHorizontalFrom {\n    return this.#element.nativeElement.expandFrom;\n  }\n\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input()\n  public set form(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.form = value));\n  }\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set type(value: SbbButtonType) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): SbbButtonType {\n    return this.#element.nativeElement.type;\n  }\n}\n",
      "selector": "sbb-header-button",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "expand-from",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "SbbHorizontalFrom",
          "decorators": []
        },
        {
          "name": "form",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "string",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 56,
          "type": "SbbButtonType",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 48,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "expandFrom": {
          "name": "expandFrom",
          "setSignature": {
            "name": "expandFrom",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbHorizontalFrom",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbHorizontalFrom",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "expandFrom",
            "type": "",
            "returnType": "SbbHorizontalFrom",
            "line": 19
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 24,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 27
          }
        },
        "form": {
          "name": "form",
          "setSignature": {
            "name": "form",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 32,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 35
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 40,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 43
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 48,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 51
          }
        },
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 56,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "SbbButtonType",
            "line": 59
          }
        }
      }
    },
    {
      "name": "SbbHeaderLink",
      "id": "directive-SbbHeaderLink-0285e9393de59499d100ab3312cc4812cafa7ec7cc6f1874afe384edbd41a86f92b53817a0cb9a6f8d383fe80cea799cff6d778a2bec93c588b76f60a1e0a914",
      "file": "src/angular/header/header-link/header-link.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute, SbbRouterLinkSupportMixin } from '@sbb-esta/lyne-angular/core';\nimport { LinkTargetType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport { SbbHorizontalFrom } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport type { SbbHeaderLinkElement } from '@sbb-esta/lyne-elements/header/header-link.js';\nimport '@sbb-esta/lyne-elements/header/header-link.js';\n\n@Directive({\n  selector: 'sbb-header-link',\n})\nexport class SbbHeaderLink extends SbbRouterLinkSupportMixin(class {}) {\n  #element: ElementRef<SbbHeaderLinkElement> = inject(ElementRef<SbbHeaderLinkElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ alias: 'expand-from' })\n  public set expandFrom(value: SbbHorizontalFrom) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.expandFrom = value));\n  }\n  public get expandFrom(): SbbHorizontalFrom {\n    return this.#element.nativeElement.expandFrom;\n  }\n\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input()\n  public set href(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.href = value));\n  }\n  public get href(): string {\n    return this.#element.nativeElement.href;\n  }\n\n  @Input()\n  public set target(value: LinkTargetType | string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.target = value));\n  }\n  public get target(): LinkTargetType | string {\n    return this.#element.nativeElement.target;\n  }\n\n  @Input()\n  public set rel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.rel = value));\n  }\n  public get rel(): string {\n    return this.#element.nativeElement.rel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set download(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.download = value));\n  }\n  public get download(): boolean {\n    return this.#element.nativeElement.download;\n  }\n\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n\n  @Input({ alias: 'accessibility-current' })\n  public set accessibilityCurrent(value: string) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.accessibilityCurrent = value),\n    );\n  }\n  public get accessibilityCurrent(): string {\n    return this.#element.nativeElement.accessibilityCurrent;\n  }\n}\n",
      "selector": "sbb-header-link",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-current",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 72,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 64,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "download",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 56,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "expand-from",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "SbbHorizontalFrom",
          "decorators": []
        },
        {
          "name": "href",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "string",
          "decorators": []
        },
        {
          "name": "rel",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 48,
          "type": "string",
          "decorators": []
        },
        {
          "name": "target",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "LinkTargetType | string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": ["SbbRouterLinkSupportMixin(class {})"],
      "accessors": {
        "expandFrom": {
          "name": "expandFrom",
          "setSignature": {
            "name": "expandFrom",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbHorizontalFrom",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbHorizontalFrom",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "expandFrom",
            "type": "",
            "returnType": "SbbHorizontalFrom",
            "line": 19
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 24,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 27
          }
        },
        "href": {
          "name": "href",
          "setSignature": {
            "name": "href",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 32,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "href",
            "type": "string",
            "returnType": "string",
            "line": 35
          }
        },
        "target": {
          "name": "target",
          "setSignature": {
            "name": "target",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 40,
            "jsdoctags": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "target",
            "type": "",
            "returnType": "LinkTargetType | string",
            "line": 43
          }
        },
        "rel": {
          "name": "rel",
          "setSignature": {
            "name": "rel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 48,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "rel",
            "type": "string",
            "returnType": "string",
            "line": 51
          }
        },
        "download": {
          "name": "download",
          "setSignature": {
            "name": "download",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 56,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "download",
            "type": "boolean",
            "returnType": "boolean",
            "line": 59
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 64,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 67
          }
        },
        "accessibilityCurrent": {
          "name": "accessibilityCurrent",
          "setSignature": {
            "name": "accessibilityCurrent",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 72,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityCurrent",
            "type": "string",
            "returnType": "string",
            "line": 77
          }
        }
      }
    },
    {
      "name": "SbbIcon",
      "id": "directive-SbbIcon-2cc81f05dd666a03ec215510ae6bd3f74621cf982c52b71de72db312b19d9a8da9533974e7777a6012996a88268b68b3b6d4b1dd0a0d9c2f5ce871fc9ec7e2b5",
      "file": "src/angular/icon/icon.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbIconElement } from '@sbb-esta/lyne-elements/icon.js';\nimport '@sbb-esta/lyne-elements/icon.js';\n\n@Directive({\n  selector: 'sbb-icon',\n})\nexport class SbbIcon {\n  #element: ElementRef<SbbIconElement> = inject(ElementRef<SbbIconElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input({ alias: 'no-sanitize', transform: booleanAttribute })\n  public set noSanitize(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.noSanitize = value));\n  }\n  public get noSanitize(): boolean {\n    return this.#element.nativeElement.noSanitize;\n  }\n}\n",
      "selector": "sbb-icon",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "no-sanitize",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 14,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 17
          }
        },
        "noSanitize": {
          "name": "noSanitize",
          "setSignature": {
            "name": "noSanitize",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 22,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "noSanitize",
            "type": "boolean",
            "returnType": "boolean",
            "line": 25
          }
        }
      }
    },
    {
      "name": "SbbImage",
      "id": "directive-SbbImage-db8c2248439a6466c8a4de0afefc641d23a75a0c51c0faa2bfb0c69fa7ba1f439ae0778dc3b41bdd51aea8243b953f8d570c9c161754a6584ac0ee4233673609",
      "file": "src/angular/image/image.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {\n  Directive,\n  ElementRef,\n  inject,\n  Input,\n  NgZone,\n  numberAttribute,\n  Output,\n} from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbImageElement } from '@sbb-esta/lyne-elements/image.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/image.js';\n\n@Directive({\n  selector: 'sbb-image',\n})\nexport class SbbImage {\n  #element: ElementRef<SbbImageElement> = inject(ElementRef<SbbImageElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set alt(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.alt = value));\n  }\n  public get alt(): string {\n    return this.#element.nativeElement.alt;\n  }\n\n  @Input({ alias: 'skip-lqip', transform: booleanAttribute })\n  public set skipLqip(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.skipLqip = value));\n  }\n  public get skipLqip(): boolean {\n    return this.#element.nativeElement.skipLqip;\n  }\n\n  @Input({ alias: 'custom-focal-point', transform: booleanAttribute })\n  public set customFocalPoint(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.customFocalPoint = value));\n  }\n  public get customFocalPoint(): boolean {\n    return this.#element.nativeElement.customFocalPoint;\n  }\n\n  @Input()\n  public set decoding(value: 'sync' | 'async' | 'auto') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.decoding = value));\n  }\n  public get decoding(): 'sync' | 'async' | 'auto' {\n    return this.#element.nativeElement.decoding;\n  }\n\n  @Input({ alias: 'focal-point-debug', transform: booleanAttribute })\n  public set focalPointDebug(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.focalPointDebug = value));\n  }\n  public get focalPointDebug(): boolean {\n    return this.#element.nativeElement.focalPointDebug;\n  }\n\n  @Input({ alias: 'focal-point-x', transform: numberAttribute })\n  public set focalPointX(value: number) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.focalPointX = value));\n  }\n  public get focalPointX(): number {\n    return this.#element.nativeElement.focalPointX;\n  }\n\n  @Input({ alias: 'focal-point-y', transform: numberAttribute })\n  public set focalPointY(value: number) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.focalPointY = value));\n  }\n  public get focalPointY(): number {\n    return this.#element.nativeElement.focalPointY;\n  }\n\n  @Input({ alias: 'image-src' })\n  public set imageSrc(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.imageSrc = value));\n  }\n  public get imageSrc(): string {\n    return this.#element.nativeElement.imageSrc;\n  }\n\n  @Input()\n  public set importance(value: 'auto' | 'high' | 'low') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.importance = value));\n  }\n  public get importance(): 'auto' | 'high' | 'low' {\n    return this.#element.nativeElement.importance;\n  }\n\n  @Input()\n  public set loading(value: 'eager' | 'lazy') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.loading = value));\n  }\n  public get loading(): 'eager' | 'lazy' {\n    return this.#element.nativeElement.loading;\n  }\n\n  @Input({ alias: 'performance-mark' })\n  public set performanceMark(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.performanceMark = value));\n  }\n  public get performanceMark(): string {\n    return this.#element.nativeElement.performanceMark;\n  }\n\n  @Input({ alias: 'picture-sizes-config' })\n  public set pictureSizesConfig(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.pictureSizesConfig = value));\n  }\n  public get pictureSizesConfig(): string {\n    return this.#element.nativeElement.pictureSizesConfig;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public load: Observable<Event> = fromEvent<Event>(this.#element.nativeElement, 'load');\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public error: Observable<Event> = fromEvent<Event>(\n    this.#element.nativeElement,\n    'error',\n  );\n\n  public get complete(): boolean {\n    return this.#element.nativeElement.complete;\n  }\n}\n",
      "selector": "sbb-image",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "name": "alt",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "custom-focal-point",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 39,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "decoding",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 47,
          "type": "\"sync\" | \"async\" | \"auto\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "focal-point-debug",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 55,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "focal-point-x",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 63,
          "type": "number",
          "decorators": []
        },
        {
          "required": false,
          "name": "focal-point-y",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 71,
          "type": "number",
          "decorators": []
        },
        {
          "required": false,
          "name": "image-src",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 79,
          "type": "string",
          "decorators": []
        },
        {
          "name": "importance",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 87,
          "type": "\"auto\" | \"high\" | \"low\"",
          "decorators": []
        },
        {
          "name": "loading",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 95,
          "type": "\"eager\" | \"lazy\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "performance-mark",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 103,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "picture-sizes-config",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 111,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "skip-lqip",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 31,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "error",
          "defaultValue": "fromEvent<Event>(\n    this.#element.nativeElement,\n    'error',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 122,
          "type": "Observable<Event>"
        },
        {
          "name": "load",
          "defaultValue": "fromEvent<Event>(this.#element.nativeElement, 'load')",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 119,
          "type": "Observable<Event>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "alt": {
          "name": "alt",
          "setSignature": {
            "name": "alt",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 23,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "alt",
            "type": "string",
            "returnType": "string",
            "line": 26
          }
        },
        "skipLqip": {
          "name": "skipLqip",
          "setSignature": {
            "name": "skipLqip",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 31,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "skipLqip",
            "type": "boolean",
            "returnType": "boolean",
            "line": 34
          }
        },
        "customFocalPoint": {
          "name": "customFocalPoint",
          "setSignature": {
            "name": "customFocalPoint",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 39,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "customFocalPoint",
            "type": "boolean",
            "returnType": "boolean",
            "line": 42
          }
        },
        "decoding": {
          "name": "decoding",
          "setSignature": {
            "name": "decoding",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"sync\" | \"async\" | \"auto\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 47,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"sync\" | \"async\" | \"auto\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "decoding",
            "type": "",
            "returnType": "\"sync\" | \"async\" | \"auto\"",
            "line": 50
          }
        },
        "focalPointDebug": {
          "name": "focalPointDebug",
          "setSignature": {
            "name": "focalPointDebug",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 55,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "focalPointDebug",
            "type": "boolean",
            "returnType": "boolean",
            "line": 58
          }
        },
        "focalPointX": {
          "name": "focalPointX",
          "setSignature": {
            "name": "focalPointX",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 63,
            "jsdoctags": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "focalPointX",
            "type": "number",
            "returnType": "number",
            "line": 66
          }
        },
        "focalPointY": {
          "name": "focalPointY",
          "setSignature": {
            "name": "focalPointY",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 71,
            "jsdoctags": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "focalPointY",
            "type": "number",
            "returnType": "number",
            "line": 74
          }
        },
        "imageSrc": {
          "name": "imageSrc",
          "setSignature": {
            "name": "imageSrc",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 79,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "imageSrc",
            "type": "string",
            "returnType": "string",
            "line": 82
          }
        },
        "importance": {
          "name": "importance",
          "setSignature": {
            "name": "importance",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"auto\" | \"high\" | \"low\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 87,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"auto\" | \"high\" | \"low\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "importance",
            "type": "",
            "returnType": "\"auto\" | \"high\" | \"low\"",
            "line": 90
          }
        },
        "loading": {
          "name": "loading",
          "setSignature": {
            "name": "loading",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"eager\" | \"lazy\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 95,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"eager\" | \"lazy\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "loading",
            "type": "",
            "returnType": "\"eager\" | \"lazy\"",
            "line": 98
          }
        },
        "performanceMark": {
          "name": "performanceMark",
          "setSignature": {
            "name": "performanceMark",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 103,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "performanceMark",
            "type": "string",
            "returnType": "string",
            "line": 106
          }
        },
        "pictureSizesConfig": {
          "name": "pictureSizesConfig",
          "setSignature": {
            "name": "pictureSizesConfig",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 111,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "pictureSizesConfig",
            "type": "string",
            "returnType": "string",
            "line": 114
          }
        },
        "complete": {
          "name": "complete",
          "getSignature": {
            "name": "complete",
            "type": "boolean",
            "returnType": "boolean",
            "line": 127
          }
        }
      }
    },
    {
      "name": "SbbJourneyHeader",
      "id": "directive-SbbJourneyHeader-2c0bb06b146d52a42ba8ad953df754dfd917f6bcb226674baa9961c57f1a05c672e7683adb4b42500982d4f4e47123306e12d4b838ae43a7a3fcdd12398b84df",
      "file": "src/angular/journey-header/journey-header.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type {\n  JourneyHeaderSize,\n  SbbJourneyHeaderElement,\n} from '@sbb-esta/lyne-elements/journey-header.js';\nimport '@sbb-esta/lyne-elements/journey-header.js';\nimport { SbbTitleLevel } from '@sbb-esta/lyne-elements/title.js';\n\n@Directive({\n  selector: 'sbb-journey-header',\n})\nexport class SbbJourneyHeader {\n  #element: ElementRef<SbbJourneyHeaderElement> = inject(ElementRef<SbbJourneyHeaderElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set origin(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.origin = value));\n  }\n  public get origin(): string {\n    return this.#element.nativeElement.origin;\n  }\n\n  @Input()\n  public set destination(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.destination = value));\n  }\n  public get destination(): string {\n    return this.#element.nativeElement.destination;\n  }\n\n  @Input({ alias: 'round-trip', transform: booleanAttribute })\n  public set roundTrip(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.roundTrip = value));\n  }\n  public get roundTrip(): boolean {\n    return this.#element.nativeElement.roundTrip;\n  }\n\n  @Input()\n  public set level(value: SbbTitleLevel) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.level = value));\n  }\n  public get level(): SbbTitleLevel {\n    return this.#element.nativeElement.level;\n  }\n\n  @Input()\n  public set size(value: JourneyHeaderSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): JourneyHeaderSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n}\n",
      "selector": "sbb-journey-header",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "name": "destination",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "string",
          "decorators": []
        },
        {
          "name": "level",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 42,
          "type": "SbbTitleLevel",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 58,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "origin",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "round-trip",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 50,
          "type": "JourneyHeaderSize",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "origin": {
          "name": "origin",
          "setSignature": {
            "name": "origin",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "origin",
            "type": "string",
            "returnType": "string",
            "line": 21
          }
        },
        "destination": {
          "name": "destination",
          "setSignature": {
            "name": "destination",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "destination",
            "type": "string",
            "returnType": "string",
            "line": 29
          }
        },
        "roundTrip": {
          "name": "roundTrip",
          "setSignature": {
            "name": "roundTrip",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 34,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "roundTrip",
            "type": "boolean",
            "returnType": "boolean",
            "line": 37
          }
        },
        "level": {
          "name": "level",
          "setSignature": {
            "name": "level",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 42,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "level",
            "type": "",
            "returnType": "SbbTitleLevel",
            "line": 45
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "JourneyHeaderSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 50,
            "jsdoctags": [
              {
                "name": "value",
                "type": "JourneyHeaderSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "JourneyHeaderSize",
            "line": 53
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 58,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 61
          }
        }
      }
    },
    {
      "name": "SbbLeadContainer",
      "id": "directive-SbbLeadContainer-d3cc682d6443c3026e94ca432076aab9a012a19d5b4d315c4d7909f310612b9ddb98a1434f40562168a883bbb4328279786c0a7af823ee2118cd5267462f3a17",
      "file": "src/angular/lead-container/lead-container.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive } from '@angular/core';\nimport '@sbb-esta/lyne-elements/lead-container.js';\n\n@Directive({\n  selector: 'sbb-lead-container',\n})\nexport class SbbLeadContainer {}\n",
      "selector": "sbb-lead-container",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": []
    },
    {
      "name": "SbbLink",
      "id": "directive-SbbLink-095837b2a846061dd4d8608b16558aecb112db12f5c2e9f157572db655d760f0adff77301f3517979c2effd4e3e375f892cd4ed64c3b2e6279555a9381c5e2f3",
      "file": "src/angular/link/link/link.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute, SbbRouterLinkSupportMixin } from '@sbb-esta/lyne-angular/core';\nimport { LinkTargetType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport type { SbbLinkElement } from '@sbb-esta/lyne-elements/link/link.js';\nimport { SbbLinkSize } from '@sbb-esta/lyne-elements/link.js';\nimport '@sbb-esta/lyne-elements/link/link.js';\n\n@Directive({\n  selector: 'sbb-link',\n})\nexport class SbbLink extends SbbRouterLinkSupportMixin(class {}) {\n  #element: ElementRef<SbbLinkElement> = inject(ElementRef<SbbLinkElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: SbbLinkSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbLinkSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set href(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.href = value));\n  }\n  public get href(): string {\n    return this.#element.nativeElement.href;\n  }\n\n  @Input()\n  public set target(value: LinkTargetType | string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.target = value));\n  }\n  public get target(): LinkTargetType | string {\n    return this.#element.nativeElement.target;\n  }\n\n  @Input()\n  public set rel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.rel = value));\n  }\n  public get rel(): string {\n    return this.#element.nativeElement.rel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set download(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.download = value));\n  }\n  public get download(): boolean {\n    return this.#element.nativeElement.download;\n  }\n\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n\n  @Input({ alias: 'accessibility-current' })\n  public set accessibilityCurrent(value: string) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.accessibilityCurrent = value),\n    );\n  }\n  public get accessibilityCurrent(): string {\n    return this.#element.nativeElement.accessibilityCurrent;\n  }\n}\n",
      "selector": "sbb-link",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-current",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 80,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 72,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "download",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 64,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "href",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "rel",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 56,
          "type": "string",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "SbbLinkSize",
          "decorators": []
        },
        {
          "name": "target",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 48,
          "type": "LinkTargetType | string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": ["SbbRouterLinkSupportMixin(class {})"],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbLinkSize",
            "line": 19
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 24,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 27
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 32,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 35
          }
        },
        "href": {
          "name": "href",
          "setSignature": {
            "name": "href",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 40,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "href",
            "type": "string",
            "returnType": "string",
            "line": 43
          }
        },
        "target": {
          "name": "target",
          "setSignature": {
            "name": "target",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 48,
            "jsdoctags": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "target",
            "type": "",
            "returnType": "LinkTargetType | string",
            "line": 51
          }
        },
        "rel": {
          "name": "rel",
          "setSignature": {
            "name": "rel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 56,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "rel",
            "type": "string",
            "returnType": "string",
            "line": 59
          }
        },
        "download": {
          "name": "download",
          "setSignature": {
            "name": "download",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 64,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "download",
            "type": "boolean",
            "returnType": "boolean",
            "line": 67
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 72,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 75
          }
        },
        "accessibilityCurrent": {
          "name": "accessibilityCurrent",
          "setSignature": {
            "name": "accessibilityCurrent",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 80,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityCurrent",
            "type": "string",
            "returnType": "string",
            "line": 85
          }
        }
      }
    },
    {
      "name": "SbbLinkButton",
      "id": "directive-SbbLinkButton-fcac184632906b91276c365e906062064477d44db26c2cb9ed4417691bf1488ca456750bc186a1cb250c0f2bec693e1c96a132713e06871346a75ffcac2510a4",
      "file": "src/angular/link/link-button/link-button.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbButtonType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport type { SbbLinkButtonElement } from '@sbb-esta/lyne-elements/link/link-button.js';\nimport { SbbLinkSize } from '@sbb-esta/lyne-elements/link.js';\n\nimport '@sbb-esta/lyne-elements/link/link-button.js';\n\n@Directive({\n  selector: 'sbb-link-button',\n})\nexport class SbbLinkButton {\n  #element: ElementRef<SbbLinkButtonElement> = inject(ElementRef<SbbLinkButtonElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: SbbLinkSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbLinkSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input({ alias: 'disabled-interactive', transform: booleanAttribute })\n  public set disabledInteractive(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabledInteractive = value));\n  }\n  public get disabledInteractive(): boolean {\n    return this.#element.nativeElement.disabledInteractive;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set form(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.form = value));\n  }\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set type(value: SbbButtonType) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): SbbButtonType {\n    return this.#element.nativeElement.type;\n  }\n}\n",
      "selector": "sbb-link-button",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 41,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled-interactive",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "form",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 49,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 57,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "SbbLinkSize",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 73,
          "type": "SbbButtonType",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 65,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbLinkSize",
            "line": 20
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 28
          }
        },
        "disabledInteractive": {
          "name": "disabledInteractive",
          "setSignature": {
            "name": "disabledInteractive",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 33,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabledInteractive",
            "type": "boolean",
            "returnType": "boolean",
            "line": 36
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 41,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 44
          }
        },
        "form": {
          "name": "form",
          "setSignature": {
            "name": "form",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 49,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 52
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 57,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 60
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 65,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 68
          }
        },
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 73,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "SbbButtonType",
            "line": 76
          }
        }
      }
    },
    {
      "name": "SbbLinkList",
      "id": "directive-SbbLinkList-7ce4088b6fa49201cc18f669b84d85691658c97fbc7fe265c84801865693978ba320fc3d71a9daa21832de36dbf92555db79f2a3d2d684ad1898748971ee3ee8",
      "file": "src/angular/link-list/link-list/link-list.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbHorizontalFrom, SbbOrientation } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport type { SbbLinkListElement } from '@sbb-esta/lyne-elements/link-list/link-list.js';\nimport { SbbLinkSize } from '@sbb-esta/lyne-elements/link.js';\nimport { SbbTitleLevel } from '@sbb-esta/lyne-elements/title.js';\nimport '@sbb-esta/lyne-elements/link-list/link-list.js';\n\n@Directive({\n  selector: 'sbb-link-list',\n})\nexport class SbbLinkList {\n  #element: ElementRef<SbbLinkListElement> = inject(ElementRef<SbbLinkListElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ alias: 'horizontal-from' })\n  public set horizontalFrom(value: SbbHorizontalFrom | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.horizontalFrom = value));\n  }\n  public get horizontalFrom(): SbbHorizontalFrom | null {\n    return this.#element.nativeElement.horizontalFrom;\n  }\n\n  @Input()\n  public set orientation(value: SbbOrientation) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.orientation = value));\n  }\n  public get orientation(): SbbOrientation {\n    return this.#element.nativeElement.orientation;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input({ alias: 'title-content' })\n  public set titleContent(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleContent = value));\n  }\n  public get titleContent(): string {\n    return this.#element.nativeElement.titleContent;\n  }\n\n  @Input({ alias: 'title-level' })\n  public set titleLevel(value: SbbTitleLevel) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleLevel = value));\n  }\n  public get titleLevel(): SbbTitleLevel {\n    return this.#element.nativeElement.titleLevel;\n  }\n\n  @Input()\n  public set size(value: SbbLinkSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbLinkSize {\n    return this.#element.nativeElement.size;\n  }\n}\n",
      "selector": "sbb-link-list",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "horizontal-from",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "SbbHorizontalFrom | null",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "orientation",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "SbbOrientation",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 57,
          "type": "SbbLinkSize",
          "decorators": []
        },
        {
          "required": false,
          "name": "title-content",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 41,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "title-level",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 49,
          "type": "SbbTitleLevel",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "horizontalFrom": {
          "name": "horizontalFrom",
          "setSignature": {
            "name": "horizontalFrom",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbHorizontalFrom | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbHorizontalFrom | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "horizontalFrom",
            "type": "",
            "returnType": "SbbHorizontalFrom | null",
            "line": 20
          }
        },
        "orientation": {
          "name": "orientation",
          "setSignature": {
            "name": "orientation",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbOrientation",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbOrientation",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "orientation",
            "type": "",
            "returnType": "SbbOrientation",
            "line": 28
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 33,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 36
          }
        },
        "titleContent": {
          "name": "titleContent",
          "setSignature": {
            "name": "titleContent",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 41,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleContent",
            "type": "string",
            "returnType": "string",
            "line": 44
          }
        },
        "titleLevel": {
          "name": "titleLevel",
          "setSignature": {
            "name": "titleLevel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 49,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleLevel",
            "type": "",
            "returnType": "SbbTitleLevel",
            "line": 52
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 57,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbLinkSize",
            "line": 60
          }
        }
      }
    },
    {
      "name": "SbbLinkListAnchor",
      "id": "directive-SbbLinkListAnchor-a81be5b7f15107ff872c3eb1e846ab15103df5700154ad0269e1ccebb315cbb61f66752d6b3aa1bb6515033682c136e787cdde8319a5e957b270be5d744c6e89",
      "file": "src/angular/link-list/link-list-anchor/link-list-anchor.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbLinkListAnchorElement } from '@sbb-esta/lyne-elements/link-list/link-list-anchor.js';\nimport '@sbb-esta/lyne-elements/link-list/link-list-anchor.js';\nimport { SbbLinkSize } from '@sbb-esta/lyne-elements/link.js';\nimport { SbbTitleLevel } from '@sbb-esta/lyne-elements/title.js';\n\n@Directive({\n  selector: 'sbb-link-list-anchor',\n})\nexport class SbbLinkListAnchor {\n  #element: ElementRef<SbbLinkListAnchorElement> = inject(ElementRef<SbbLinkListAnchorElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input({ alias: 'title-content' })\n  public set titleContent(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleContent = value));\n  }\n  public get titleContent(): string {\n    return this.#element.nativeElement.titleContent;\n  }\n\n  @Input({ alias: 'title-level' })\n  public set titleLevel(value: SbbTitleLevel) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleLevel = value));\n  }\n  public get titleLevel(): SbbTitleLevel {\n    return this.#element.nativeElement.titleLevel;\n  }\n\n  @Input()\n  public set size(value: SbbLinkSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbLinkSize {\n    return this.#element.nativeElement.size;\n  }\n}\n",
      "selector": "sbb-link-list-anchor",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "SbbLinkSize",
          "decorators": []
        },
        {
          "required": false,
          "name": "title-content",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "title-level",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "SbbTitleLevel",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 19
          }
        },
        "titleContent": {
          "name": "titleContent",
          "setSignature": {
            "name": "titleContent",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 24,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleContent",
            "type": "string",
            "returnType": "string",
            "line": 27
          }
        },
        "titleLevel": {
          "name": "titleLevel",
          "setSignature": {
            "name": "titleLevel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 32,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleLevel",
            "type": "",
            "returnType": "SbbTitleLevel",
            "line": 35
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 40,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbLinkSize",
            "line": 43
          }
        }
      }
    },
    {
      "name": "SbbLinkStatic",
      "id": "directive-SbbLinkStatic-49e69cae41a23595424e9a08880af7696ba1e836f04e4419a24601b441f3eee53ed8ce6c4faaef219a15c8e40568fcd72c721c432cc08b3661f65b0231b79985",
      "file": "src/angular/link/link-static/link-static.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbLinkStaticElement } from '@sbb-esta/lyne-elements/link/link-static.js';\nimport '@sbb-esta/lyne-elements/link/link-static.js';\nimport { SbbLinkSize } from '@sbb-esta/lyne-elements/link.js';\n\n@Directive({\n  selector: 'sbb-link-static',\n})\nexport class SbbLinkStatic {\n  #element: ElementRef<SbbLinkStaticElement> = inject(ElementRef<SbbLinkStaticElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: SbbLinkSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbLinkSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n}\n",
      "selector": "sbb-link-static",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 31,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "SbbLinkSize",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 15,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbLinkSize",
            "line": 18
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 23,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 26
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 31,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 34
          }
        }
      }
    },
    {
      "name": "SbbLoadingIndicator",
      "id": "directive-SbbLoadingIndicator-1b0edae7c22d1e0b8a40271e91da47a19ee128b850d345367bb8109fbd36f4cfab407dfb2a9ad342523c6b6ca020d205427c83c5712314e5df14620d278df920",
      "file": "src/angular/loading-indicator/loading-indicator.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport type { SbbLoadingIndicatorElement } from '@sbb-esta/lyne-elements/loading-indicator.js';\nimport '@sbb-esta/lyne-elements/loading-indicator.js';\n\n@Directive({\n  selector: 'sbb-loading-indicator',\n})\nexport class SbbLoadingIndicator {\n  #element: ElementRef<SbbLoadingIndicatorElement> = inject(ElementRef<SbbLoadingIndicatorElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: 's' | 'l' | 'xl' | 'xxl' | 'xxxl') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): 's' | 'l' | 'xl' | 'xxl' | 'xxxl' {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input()\n  public set color(value: 'default' | 'smoke' | 'white') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.color = value));\n  }\n  public get color(): 'default' | 'smoke' | 'white' {\n    return this.#element.nativeElement.color;\n  }\n}\n",
      "selector": "sbb-loading-indicator",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "name": "color",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 21,
          "type": "\"default\" | \"smoke\" | \"white\"",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 13,
          "type": "\"s\" | \"l\" | \"xl\" | \"xxl\" | \"xxxl\"",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"s\" | \"l\" | \"xl\" | \"xxl\" | \"xxxl\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 13,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"s\" | \"l\" | \"xl\" | \"xxl\" | \"xxxl\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "\"s\" | \"l\" | \"xl\" | \"xxl\" | \"xxxl\"",
            "line": 16
          }
        },
        "color": {
          "name": "color",
          "setSignature": {
            "name": "color",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"default\" | \"smoke\" | \"white\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 21,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"default\" | \"smoke\" | \"white\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "color",
            "type": "",
            "returnType": "\"default\" | \"smoke\" | \"white\"",
            "line": 24
          }
        }
      }
    },
    {
      "name": "SbbLoadingIndicatorCircle",
      "id": "directive-SbbLoadingIndicatorCircle-11d2c9152ef0b8b01253e62aea3f6e4aed36e003a2d75b6d446795662e549c800c94cabc5a3a879772d5a11e9d03f9f2f152a5ece32eabadac9bb6238af8c6d1",
      "file": "src/angular/loading-indicator-circle/loading-indicator-circle.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport type { SbbLoadingIndicatorCircleElement } from '@sbb-esta/lyne-elements/loading-indicator-circle.js';\nimport '@sbb-esta/lyne-elements/loading-indicator-circle.js';\n\n@Directive({\n  selector: 'sbb-loading-indicator-circle',\n})\nexport class SbbLoadingIndicatorCircle {\n  #element: ElementRef<SbbLoadingIndicatorCircleElement> = inject(\n    ElementRef<SbbLoadingIndicatorCircleElement>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set color(value: 'default' | 'smoke' | 'white') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.color = value));\n  }\n  public get color(): 'default' | 'smoke' | 'white' {\n    return this.#element.nativeElement.color;\n  }\n}\n",
      "selector": "sbb-loading-indicator-circle",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "name": "color",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "\"default\" | \"smoke\" | \"white\"",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "color": {
          "name": "color",
          "setSignature": {
            "name": "color",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"default\" | \"smoke\" | \"white\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 15,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"default\" | \"smoke\" | \"white\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "color",
            "type": "",
            "returnType": "\"default\" | \"smoke\" | \"white\"",
            "line": 18
          }
        }
      }
    },
    {
      "name": "SbbLogo",
      "id": "directive-SbbLogo-59a5ab845e26b499a70737c8857338681a86b19dc3d91f9450ba19af6c9e3dfe3e7e20dcfa42a8b4e58a9a5b9975dee1c2316c9fb1aad74949222bd1ac0a8786",
      "file": "src/angular/logo/logo.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbProtectiveRoom } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport type { SbbLogoElement } from '@sbb-esta/lyne-elements/logo.js';\nimport '@sbb-esta/lyne-elements/logo.js';\n\n@Directive({\n  selector: 'sbb-logo',\n})\nexport class SbbLogo {\n  #element: ElementRef<SbbLogoElement> = inject(ElementRef<SbbLogoElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ alias: 'protective-room' })\n  public set protectiveRoom(value: SbbProtectiveRoom) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.protectiveRoom = value));\n  }\n  public get protectiveRoom(): SbbProtectiveRoom {\n    return this.#element.nativeElement.protectiveRoom;\n  }\n\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n}\n",
      "selector": "sbb-logo",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 31,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "protective-room",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "SbbProtectiveRoom",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "protectiveRoom": {
          "name": "protectiveRoom",
          "setSignature": {
            "name": "protectiveRoom",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbProtectiveRoom",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 15,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbProtectiveRoom",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "protectiveRoom",
            "type": "",
            "returnType": "SbbProtectiveRoom",
            "line": 18
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 23,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 26
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 31,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 34
          }
        }
      }
    },
    {
      "name": "SbbMapContainer",
      "id": "directive-SbbMapContainer-0b3d49438f9cde3ab4e6416739021266683b9dce95de807ea3650ffea677541c1049d19888574fc1d7f9d9851af3f9f3123b168977b40a318f93e1bd74291900",
      "file": "src/angular/map-container/map-container.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbMapContainerElement } from '@sbb-esta/lyne-elements/map-container.js';\nimport '@sbb-esta/lyne-elements/map-container.js';\n\n@Directive({\n  selector: 'sbb-map-container',\n})\nexport class SbbMapContainer {\n  #element: ElementRef<SbbMapContainerElement> = inject(ElementRef<SbbMapContainerElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ alias: 'hide-scroll-up-button', transform: booleanAttribute })\n  public set hideScrollUpButton(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.hideScrollUpButton = value));\n  }\n  public get hideScrollUpButton(): boolean {\n    return this.#element.nativeElement.hideScrollUpButton;\n  }\n}\n",
      "selector": "sbb-map-container",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "hide-scroll-up-button",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "hideScrollUpButton": {
          "name": "hideScrollUpButton",
          "setSignature": {
            "name": "hideScrollUpButton",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 14,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "hideScrollUpButton",
            "type": "boolean",
            "returnType": "boolean",
            "line": 17
          }
        }
      }
    },
    {
      "name": "SbbMenu",
      "id": "directive-SbbMenu-aff19209469bba618db1fefbb8950a8f308d66d33de576952d701fea143f150b325e6d4ec8106269ca3537b30a98589dfb2745015d1c7870c3225aa9fed3cf84",
      "file": "src/angular/menu/menu/menu.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone, Output } from '@angular/core';\nimport type { SbbMenuElement } from '@sbb-esta/lyne-elements/menu/menu.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/menu/menu.js';\n\n@Directive({\n  selector: 'sbb-menu',\n})\nexport class SbbMenu {\n  #element: ElementRef<SbbMenuElement> = inject(ElementRef<SbbMenuElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set trigger(value: string | HTMLElement | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.trigger = value));\n  }\n  public get trigger(): string | HTMLElement | null {\n    return this.#element.nativeElement.trigger;\n  }\n\n  @Input({ alias: 'list-accessibility-label' })\n  public set listAccessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.listAccessibilityLabel = value),\n    );\n  }\n  public get listAccessibilityLabel(): string {\n    return this.#element.nativeElement.listAccessibilityLabel;\n  }\n\n  @Output() public willOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  );\n\n  @Output() public didOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  );\n\n  @Output() public willClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  );\n\n  @Output() public didClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  );\n\n  public get isOpen(): boolean {\n    return this.#element.nativeElement.isOpen;\n  }\n\n  public open(): void {\n    return this.#element.nativeElement.open();\n  }\n\n  public close(): void {\n    return this.#element.nativeElement.close();\n  }\n}\n",
      "selector": "sbb-menu",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "list-accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "string",
          "decorators": []
        },
        {
          "name": "trigger",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "string | HTMLElement | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "didClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 46,
          "type": "Observable<void>"
        },
        {
          "name": "didOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "Observable<void>"
        },
        {
          "name": "willClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 41,
          "type": "Observable<void>"
        },
        {
          "name": "willOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 31,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 59,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        },
        {
          "name": "open",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 55,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": [],
      "accessors": {
        "trigger": {
          "name": "trigger",
          "setSignature": {
            "name": "trigger",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | HTMLElement | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 14,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | HTMLElement | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "trigger",
            "type": "",
            "returnType": "string | HTMLElement | null",
            "line": 17
          }
        },
        "listAccessibilityLabel": {
          "name": "listAccessibilityLabel",
          "setSignature": {
            "name": "listAccessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 22,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "listAccessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 27
          }
        },
        "isOpen": {
          "name": "isOpen",
          "getSignature": {
            "name": "isOpen",
            "type": "boolean",
            "returnType": "boolean",
            "line": 51
          }
        }
      }
    },
    {
      "name": "SbbMenuButton",
      "id": "directive-SbbMenuButton-a6ccdfb6b0bdd2f979a53f769b167671bd177d72f98de8f0cbc285b7aa6bfafe1eb2ce018ef52abecb9fbc81870719b46642a287143714d38dc6975e40152a45",
      "file": "src/angular/menu/menu-button/menu-button.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbButtonType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport type { SbbMenuButtonElement } from '@sbb-esta/lyne-elements/menu/menu-button.js';\n\nimport '@sbb-esta/lyne-elements/menu/menu-button.js';\n\n@Directive({\n  selector: 'sbb-menu-button',\n})\nexport class SbbMenuButton {\n  #element: ElementRef<SbbMenuButtonElement> = inject(ElementRef<SbbMenuButtonElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ alias: 'disabled-interactive', transform: booleanAttribute })\n  public set disabledInteractive(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabledInteractive = value));\n  }\n  public get disabledInteractive(): boolean {\n    return this.#element.nativeElement.disabledInteractive;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set amount(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.amount = value));\n  }\n  public get amount(): string {\n    return this.#element.nativeElement.amount;\n  }\n\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input()\n  public set form(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.form = value));\n  }\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set type(value: SbbButtonType) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): SbbButtonType {\n    return this.#element.nativeElement.type;\n  }\n}\n",
      "selector": "sbb-menu-button",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "name": "amount",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled-interactive",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "form",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 48,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 56,
          "type": "string",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 72,
          "type": "SbbButtonType",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 64,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "disabledInteractive": {
          "name": "disabledInteractive",
          "setSignature": {
            "name": "disabledInteractive",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabledInteractive",
            "type": "boolean",
            "returnType": "boolean",
            "line": 19
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 24,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 27
          }
        },
        "amount": {
          "name": "amount",
          "setSignature": {
            "name": "amount",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 32,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "amount",
            "type": "string",
            "returnType": "string",
            "line": 35
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 40,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 43
          }
        },
        "form": {
          "name": "form",
          "setSignature": {
            "name": "form",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 48,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 51
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 56,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 59
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 64,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 67
          }
        },
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 72,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "SbbButtonType",
            "line": 75
          }
        }
      }
    },
    {
      "name": "SbbMenuLink",
      "id": "directive-SbbMenuLink-3608c2c65b660edc41d271ede9847422356d3284b386aeab1c03aeccaa211eb5a0b4c67f6689af9d40231b9b77dd471715ff0cc85c186c3f830b878d9466a9da",
      "file": "src/angular/menu/menu-link/menu-link.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute, SbbRouterLinkSupportMixin } from '@sbb-esta/lyne-angular/core';\nimport { LinkTargetType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport type { SbbMenuLinkElement } from '@sbb-esta/lyne-elements/menu/menu-link.js';\nimport '@sbb-esta/lyne-elements/menu/menu-link.js';\n\n@Directive({\n  selector: 'sbb-menu-link',\n})\nexport class SbbMenuLink extends SbbRouterLinkSupportMixin(class {}) {\n  #element: ElementRef<SbbMenuLinkElement> = inject(ElementRef<SbbMenuLinkElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ alias: 'disabled-interactive', transform: booleanAttribute })\n  public set disabledInteractive(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabledInteractive = value));\n  }\n  public get disabledInteractive(): boolean {\n    return this.#element.nativeElement.disabledInteractive;\n  }\n\n  @Input()\n  public set amount(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.amount = value));\n  }\n  public get amount(): string {\n    return this.#element.nativeElement.amount;\n  }\n\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set href(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.href = value));\n  }\n  public get href(): string {\n    return this.#element.nativeElement.href;\n  }\n\n  @Input()\n  public set target(value: LinkTargetType | string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.target = value));\n  }\n  public get target(): LinkTargetType | string {\n    return this.#element.nativeElement.target;\n  }\n\n  @Input()\n  public set rel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.rel = value));\n  }\n  public get rel(): string {\n    return this.#element.nativeElement.rel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set download(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.download = value));\n  }\n  public get download(): boolean {\n    return this.#element.nativeElement.download;\n  }\n\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n\n  @Input({ alias: 'accessibility-current' })\n  public set accessibilityCurrent(value: string) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.accessibilityCurrent = value),\n    );\n  }\n  public get accessibilityCurrent(): string {\n    return this.#element.nativeElement.accessibilityCurrent;\n  }\n}\n",
      "selector": "sbb-menu-link",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-current",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 87,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 79,
          "type": "string",
          "decorators": []
        },
        {
          "name": "amount",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 39,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled-interactive",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "download",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 71,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "href",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 47,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 31,
          "type": "string",
          "decorators": []
        },
        {
          "name": "rel",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 63,
          "type": "string",
          "decorators": []
        },
        {
          "name": "target",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 55,
          "type": "LinkTargetType | string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": ["SbbRouterLinkSupportMixin(class {})"],
      "accessors": {
        "disabledInteractive": {
          "name": "disabledInteractive",
          "setSignature": {
            "name": "disabledInteractive",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 15,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabledInteractive",
            "type": "boolean",
            "returnType": "boolean",
            "line": 18
          }
        },
        "amount": {
          "name": "amount",
          "setSignature": {
            "name": "amount",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 23,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "amount",
            "type": "string",
            "returnType": "string",
            "line": 26
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 31,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 34
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 39,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 42
          }
        },
        "href": {
          "name": "href",
          "setSignature": {
            "name": "href",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 47,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "href",
            "type": "string",
            "returnType": "string",
            "line": 50
          }
        },
        "target": {
          "name": "target",
          "setSignature": {
            "name": "target",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 55,
            "jsdoctags": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "target",
            "type": "",
            "returnType": "LinkTargetType | string",
            "line": 58
          }
        },
        "rel": {
          "name": "rel",
          "setSignature": {
            "name": "rel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 63,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "rel",
            "type": "string",
            "returnType": "string",
            "line": 66
          }
        },
        "download": {
          "name": "download",
          "setSignature": {
            "name": "download",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 71,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "download",
            "type": "boolean",
            "returnType": "boolean",
            "line": 74
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 79,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 82
          }
        },
        "accessibilityCurrent": {
          "name": "accessibilityCurrent",
          "setSignature": {
            "name": "accessibilityCurrent",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 87,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityCurrent",
            "type": "string",
            "returnType": "string",
            "line": 92
          }
        }
      }
    },
    {
      "name": "SbbMessage",
      "id": "directive-SbbMessage-c0a21832b7d8f6e53fcd06ebe54fed729959a8f27d8b0c9b11c8c49bf2ba4a688831902fa1e7f8fb41a9f0c18c8949f38875e1af7e50ce0cf5e2b40faa76958f",
      "file": "src/angular/message/message.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport type { SbbMessageElement } from '@sbb-esta/lyne-elements/message.js';\nimport '@sbb-esta/lyne-elements/message.js';\nimport { SbbTitleLevel } from '@sbb-esta/lyne-elements/title.js';\n\n@Directive({\n  selector: 'sbb-message',\n})\nexport class SbbMessage {\n  #element: ElementRef<SbbMessageElement> = inject(ElementRef<SbbMessageElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ alias: 'title-content' })\n  public set titleContent(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleContent = value));\n  }\n  public get titleContent(): string {\n    return this.#element.nativeElement.titleContent;\n  }\n\n  @Input({ alias: 'title-level' })\n  public set titleLevel(value: SbbTitleLevel) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleLevel = value));\n  }\n  public get titleLevel(): SbbTitleLevel {\n    return this.#element.nativeElement.titleLevel;\n  }\n}\n",
      "selector": "sbb-message",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "title-content",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "title-level",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "SbbTitleLevel",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "titleContent": {
          "name": "titleContent",
          "setSignature": {
            "name": "titleContent",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 14,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleContent",
            "type": "string",
            "returnType": "string",
            "line": 17
          }
        },
        "titleLevel": {
          "name": "titleLevel",
          "setSignature": {
            "name": "titleLevel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 22,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleLevel",
            "type": "",
            "returnType": "SbbTitleLevel",
            "line": 25
          }
        }
      }
    },
    {
      "name": "SbbMiniButton",
      "id": "directive-SbbMiniButton-0f20d98ea8fcd95ad5a0303acfeb08127d56720589861cb66e098b41ebc60940b25e4f2e86457e1b2a57e59e5677c350963755b3085425d9999269117a8f4c77",
      "file": "src/angular/button/mini-button/mini-button.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbMiniButtonElement } from '@sbb-esta/lyne-elements/button/mini-button.js';\nimport { SbbButtonType } from '@sbb-esta/lyne-elements/core/base-elements.js';\n\nimport '@sbb-esta/lyne-elements/button/mini-button.js';\n\n@Directive({\n  selector: 'sbb-mini-button',\n})\nexport class SbbMiniButton {\n  #element: ElementRef<SbbMiniButtonElement> = inject(ElementRef<SbbMiniButtonElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ alias: 'disabled-interactive', transform: booleanAttribute })\n  public set disabledInteractive(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabledInteractive = value));\n  }\n  public get disabledInteractive(): boolean {\n    return this.#element.nativeElement.disabledInteractive;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input()\n  public set form(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.form = value));\n  }\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set type(value: SbbButtonType) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): SbbButtonType {\n    return this.#element.nativeElement.type;\n  }\n}\n",
      "selector": "sbb-mini-button",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled-interactive",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "form",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 48,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 56,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 72,
          "type": "SbbButtonType",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 64,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "disabledInteractive": {
          "name": "disabledInteractive",
          "setSignature": {
            "name": "disabledInteractive",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabledInteractive",
            "type": "boolean",
            "returnType": "boolean",
            "line": 19
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 24,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 27
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 32,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 35
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 40,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 43
          }
        },
        "form": {
          "name": "form",
          "setSignature": {
            "name": "form",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 48,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 51
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 56,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 59
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 64,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 67
          }
        },
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 72,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "SbbButtonType",
            "line": 75
          }
        }
      }
    },
    {
      "name": "SbbMiniButtonGroup",
      "id": "directive-SbbMiniButtonGroup-34100cfaec42c7ccfa040adcbdef7b558b84ab95cb00a7ad799c16baf63e9f6c32392b66f0c3bcc4748e2da967e7a976105a2989eff4d83c55e6fddec91351df",
      "file": "src/angular/button/mini-button-group/mini-button-group.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type {\n  SbbMiniButtonGroupElement,\n  SbbMiniButtonGroupSize,\n} from '@sbb-esta/lyne-elements/button/mini-button-group.js';\n\nimport '@sbb-esta/lyne-elements/button/mini-button-group.js';\n\n@Directive({\n  selector: 'sbb-mini-button-group',\n})\nexport class SbbMiniButtonGroup {\n  #element: ElementRef<SbbMiniButtonGroupElement> = inject(ElementRef<SbbMiniButtonGroupElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n\n  @Input()\n  public set size(value: SbbMiniButtonGroupSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbMiniButtonGroupSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n}\n",
      "selector": "sbb-mini-button-group",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "SbbMiniButtonGroupSize",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 21
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbMiniButtonGroupSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbMiniButtonGroupSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbMiniButtonGroupSize",
            "line": 29
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 34,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 37
          }
        }
      }
    },
    {
      "name": "SbbNavigation",
      "id": "directive-SbbNavigation-2e1fd56ed209cb9c29387935d4f80061171b8e93b17193ff2c2cd7451b9123fb316cc3c53bf8fad8b3d4c6701f86c80114c1ad4721a5a65999907d4371793d60",
      "file": "src/angular/navigation/navigation/navigation.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone, Output } from '@angular/core';\nimport type { SbbNavigationElement } from '@sbb-esta/lyne-elements/navigation/navigation.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/navigation/navigation.js';\n\n@Directive({\n  selector: 'sbb-navigation',\n})\nexport class SbbNavigation {\n  #element: ElementRef<SbbNavigationElement> = inject(ElementRef<SbbNavigationElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set trigger(value: string | HTMLElement | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.trigger = value));\n  }\n  public get trigger(): string | HTMLElement | null {\n    return this.#element.nativeElement.trigger;\n  }\n\n  @Input({ alias: 'accessibility-close-label' })\n  public set accessibilityCloseLabel(value: string) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.accessibilityCloseLabel = value),\n    );\n  }\n  public get accessibilityCloseLabel(): string {\n    return this.#element.nativeElement.accessibilityCloseLabel;\n  }\n\n  @Output() public willOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  );\n\n  @Output() public didOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  );\n\n  @Output() public willClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  );\n\n  @Output() public didClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  );\n\n  public get activeNavigationSection(): HTMLElement | null {\n    return this.#element.nativeElement.activeNavigationSection;\n  }\n\n  public get isOpen(): boolean {\n    return this.#element.nativeElement.isOpen;\n  }\n\n  public open(): void {\n    return this.#element.nativeElement.open();\n  }\n\n  public close(): void {\n    return this.#element.nativeElement.close();\n  }\n}\n",
      "selector": "sbb-navigation",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-close-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "string",
          "decorators": []
        },
        {
          "name": "trigger",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "string | HTMLElement | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "didClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 46,
          "type": "Observable<void>"
        },
        {
          "name": "didOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "Observable<void>"
        },
        {
          "name": "willClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 41,
          "type": "Observable<void>"
        },
        {
          "name": "willOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 31,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 63,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        },
        {
          "name": "open",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 59,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": [],
      "accessors": {
        "trigger": {
          "name": "trigger",
          "setSignature": {
            "name": "trigger",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | HTMLElement | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 14,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | HTMLElement | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "trigger",
            "type": "",
            "returnType": "string | HTMLElement | null",
            "line": 17
          }
        },
        "accessibilityCloseLabel": {
          "name": "accessibilityCloseLabel",
          "setSignature": {
            "name": "accessibilityCloseLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 22,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityCloseLabel",
            "type": "string",
            "returnType": "string",
            "line": 27
          }
        },
        "activeNavigationSection": {
          "name": "activeNavigationSection",
          "getSignature": {
            "name": "activeNavigationSection",
            "type": "",
            "returnType": "HTMLElement | null",
            "line": 51
          }
        },
        "isOpen": {
          "name": "isOpen",
          "getSignature": {
            "name": "isOpen",
            "type": "boolean",
            "returnType": "boolean",
            "line": 55
          }
        }
      }
    },
    {
      "name": "SbbNavigationButton",
      "id": "directive-SbbNavigationButton-611132c630b86a03199ddedec2d3e7b643ff40411e27b0fa140e413e3db30fa059c1f23fb2379661ec4bc9a3db96bd0444e93c51e2832ac76366c570be282de7",
      "file": "src/angular/navigation/navigation-button/navigation-button.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { SbbButtonType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport type { SbbNavigationButtonElement } from '@sbb-esta/lyne-elements/navigation/navigation-button.js';\nimport { SbbNavigationMarkerElement } from '@sbb-esta/lyne-elements/navigation/navigation-marker.js';\nimport { SbbNavigationSectionElement } from '@sbb-esta/lyne-elements/navigation/navigation-section.js';\nimport { SbbNavigationActionSize } from '@sbb-esta/lyne-elements/navigation.js';\n\nimport '@sbb-esta/lyne-elements/navigation/navigation-button.js';\n\n@Directive({\n  selector: 'sbb-navigation-button',\n})\nexport class SbbNavigationButton {\n  #element: ElementRef<SbbNavigationButtonElement> = inject(ElementRef<SbbNavigationButtonElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: SbbNavigationActionSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbNavigationActionSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input()\n  public set connectedSection(value: SbbNavigationSectionElement | undefined) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.connectedSection = value));\n  }\n  public get connectedSection(): SbbNavigationSectionElement | undefined {\n    return this.#element.nativeElement.connectedSection;\n  }\n\n  @Input()\n  public set form(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.form = value));\n  }\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set type(value: SbbButtonType) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): SbbButtonType {\n    return this.#element.nativeElement.type;\n  }\n\n  public get marker(): SbbNavigationMarkerElement | null {\n    return this.#element.nativeElement.marker;\n  }\n\n  public get section(): SbbNavigationSectionElement | null {\n    return this.#element.nativeElement.section;\n  }\n}\n",
      "selector": "sbb-navigation-button",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "name": "connectedSection",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "SbbNavigationSectionElement | undefined",
          "decorators": []
        },
        {
          "name": "form",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 42,
          "type": "string",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "SbbNavigationActionSize",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 58,
          "type": "SbbButtonType",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 50,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbNavigationActionSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbNavigationActionSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbNavigationActionSize",
            "line": 21
          }
        },
        "connectedSection": {
          "name": "connectedSection",
          "setSignature": {
            "name": "connectedSection",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbNavigationSectionElement | undefined",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbNavigationSectionElement | undefined",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "connectedSection",
            "type": "",
            "returnType": "SbbNavigationSectionElement | undefined",
            "line": 29
          }
        },
        "form": {
          "name": "form",
          "setSignature": {
            "name": "form",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 34,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 37
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 42,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 45
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 50,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 53
          }
        },
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 58,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "SbbButtonType",
            "line": 61
          }
        },
        "marker": {
          "name": "marker",
          "getSignature": {
            "name": "marker",
            "type": "",
            "returnType": "SbbNavigationMarkerElement | null",
            "line": 65
          }
        },
        "section": {
          "name": "section",
          "getSignature": {
            "name": "section",
            "type": "",
            "returnType": "SbbNavigationSectionElement | null",
            "line": 69
          }
        }
      }
    },
    {
      "name": "SbbNavigationLink",
      "id": "directive-SbbNavigationLink-c8029e1dc36bbf72ee183b8cb91068bcc7ad3d1ccdaa2e714b3379fb999eedc0b989c7298f70f92aefe7d0a7efc4bb8f9a4d57d48412b29b3a6eacabec1a304b",
      "file": "src/angular/navigation/navigation-link/navigation-link.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute, SbbRouterLinkSupportMixin } from '@sbb-esta/lyne-angular/core';\nimport { LinkTargetType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport type { SbbNavigationLinkElement } from '@sbb-esta/lyne-elements/navigation/navigation-link.js';\nimport { SbbNavigationMarkerElement } from '@sbb-esta/lyne-elements/navigation/navigation-marker.js';\nimport { SbbNavigationSectionElement } from '@sbb-esta/lyne-elements/navigation/navigation-section.js';\nimport { SbbNavigationActionSize } from '@sbb-esta/lyne-elements/navigation.js';\nimport '@sbb-esta/lyne-elements/navigation/navigation-link.js';\n\n@Directive({\n  selector: 'sbb-navigation-link',\n})\nexport class SbbNavigationLink extends SbbRouterLinkSupportMixin(class {}) {\n  #element: ElementRef<SbbNavigationLinkElement> = inject(ElementRef<SbbNavigationLinkElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: SbbNavigationActionSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbNavigationActionSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input()\n  public set connectedSection(value: SbbNavigationSectionElement | undefined) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.connectedSection = value));\n  }\n  public get connectedSection(): SbbNavigationSectionElement | undefined {\n    return this.#element.nativeElement.connectedSection;\n  }\n\n  @Input()\n  public set href(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.href = value));\n  }\n  public get href(): string {\n    return this.#element.nativeElement.href;\n  }\n\n  @Input()\n  public set target(value: LinkTargetType | string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.target = value));\n  }\n  public get target(): LinkTargetType | string {\n    return this.#element.nativeElement.target;\n  }\n\n  @Input()\n  public set rel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.rel = value));\n  }\n  public get rel(): string {\n    return this.#element.nativeElement.rel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set download(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.download = value));\n  }\n  public get download(): boolean {\n    return this.#element.nativeElement.download;\n  }\n\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n\n  public get marker(): SbbNavigationMarkerElement | null {\n    return this.#element.nativeElement.marker;\n  }\n\n  public get section(): SbbNavigationSectionElement | null {\n    return this.#element.nativeElement.section;\n  }\n\n  @Input({ alias: 'accessibility-current' })\n  public set accessibilityCurrent(value: string) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.accessibilityCurrent = value),\n    );\n  }\n  public get accessibilityCurrent(): string {\n    return this.#element.nativeElement.accessibilityCurrent;\n  }\n}\n",
      "selector": "sbb-navigation-link",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-current",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 82,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 66,
          "type": "string",
          "decorators": []
        },
        {
          "name": "connectedSection",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "SbbNavigationSectionElement | undefined",
          "decorators": []
        },
        {
          "required": false,
          "name": "download",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 58,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "href",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "string",
          "decorators": []
        },
        {
          "name": "rel",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 50,
          "type": "string",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "SbbNavigationActionSize",
          "decorators": []
        },
        {
          "name": "target",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 42,
          "type": "LinkTargetType | string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": ["SbbRouterLinkSupportMixin(class {})"],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbNavigationActionSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbNavigationActionSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbNavigationActionSize",
            "line": 21
          }
        },
        "connectedSection": {
          "name": "connectedSection",
          "setSignature": {
            "name": "connectedSection",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbNavigationSectionElement | undefined",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbNavigationSectionElement | undefined",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "connectedSection",
            "type": "",
            "returnType": "SbbNavigationSectionElement | undefined",
            "line": 29
          }
        },
        "href": {
          "name": "href",
          "setSignature": {
            "name": "href",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 34,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "href",
            "type": "string",
            "returnType": "string",
            "line": 37
          }
        },
        "target": {
          "name": "target",
          "setSignature": {
            "name": "target",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 42,
            "jsdoctags": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "target",
            "type": "",
            "returnType": "LinkTargetType | string",
            "line": 45
          }
        },
        "rel": {
          "name": "rel",
          "setSignature": {
            "name": "rel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 50,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "rel",
            "type": "string",
            "returnType": "string",
            "line": 53
          }
        },
        "download": {
          "name": "download",
          "setSignature": {
            "name": "download",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 58,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "download",
            "type": "boolean",
            "returnType": "boolean",
            "line": 61
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 66,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 69
          }
        },
        "marker": {
          "name": "marker",
          "getSignature": {
            "name": "marker",
            "type": "",
            "returnType": "SbbNavigationMarkerElement | null",
            "line": 73
          }
        },
        "section": {
          "name": "section",
          "getSignature": {
            "name": "section",
            "type": "",
            "returnType": "SbbNavigationSectionElement | null",
            "line": 77
          }
        },
        "accessibilityCurrent": {
          "name": "accessibilityCurrent",
          "setSignature": {
            "name": "accessibilityCurrent",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 82,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityCurrent",
            "type": "string",
            "returnType": "string",
            "line": 87
          }
        }
      }
    },
    {
      "name": "SbbNavigationList",
      "id": "directive-SbbNavigationList-16ca2f49e470e6a35c20b0d45cceff06d8a4fcb3c6f0e702f32ba849a059d82bec2a99f8c7bc60e8367ec3aed339e18ef7901dd9231684406c6e720579a06407",
      "file": "src/angular/navigation/navigation-list/navigation-list.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport type { SbbNavigationListElement } from '@sbb-esta/lyne-elements/navigation/navigation-list.js';\nimport '@sbb-esta/lyne-elements/navigation/navigation-list.js';\n\n@Directive({\n  selector: 'sbb-navigation-list',\n})\nexport class SbbNavigationList {\n  #element: ElementRef<SbbNavigationListElement> = inject(ElementRef<SbbNavigationListElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set label(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.label = value));\n  }\n  public get label(): string {\n    return this.#element.nativeElement.label;\n  }\n}\n",
      "selector": "sbb-navigation-list",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "name": "label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 13,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "label": {
          "name": "label",
          "setSignature": {
            "name": "label",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 13,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "label",
            "type": "string",
            "returnType": "string",
            "line": 16
          }
        }
      }
    },
    {
      "name": "SbbNavigationMarker",
      "id": "directive-SbbNavigationMarker-900e37f3af431065aa2a257b4598fb335723feefab74f63ba1822615dfb9bf533036bf9c0594f643ef50baa5fa0dfce734ebd7850e5a9656b1f4c36f6876b4fb",
      "file": "src/angular/navigation/navigation-marker/navigation-marker.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { SbbNavigationButtonElement } from '@sbb-esta/lyne-elements/navigation/navigation-button.js';\nimport { SbbNavigationLinkElement } from '@sbb-esta/lyne-elements/navigation/navigation-link.js';\nimport type { SbbNavigationMarkerElement } from '@sbb-esta/lyne-elements/navigation/navigation-marker.js';\nimport '@sbb-esta/lyne-elements/navigation/navigation-marker.js';\n\n@Directive({\n  selector: 'sbb-navigation-marker',\n})\nexport class SbbNavigationMarker {\n  #element: ElementRef<SbbNavigationMarkerElement> = inject(ElementRef<SbbNavigationMarkerElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: 'l' | 's') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): 'l' | 's' {\n    return this.#element.nativeElement.size;\n  }\n\n  public select(action: SbbNavigationButtonElement | SbbNavigationLinkElement): void {\n    return this.#element.nativeElement.select(action);\n  }\n\n  public reset(): void {\n    return this.#element.nativeElement.reset();\n  }\n}\n",
      "selector": "sbb-navigation-marker",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "\"l\" | \"s\"",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "reset",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 26,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        },
        {
          "name": "select",
          "args": [
            {
              "name": "action",
              "type": "SbbNavigationButtonElement | SbbNavigationLinkElement",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 22,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": "action",
              "type": "SbbNavigationButtonElement | SbbNavigationLinkElement",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"l\" | \"s\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 15,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"l\" | \"s\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "\"l\" | \"s\"",
            "line": 18
          }
        }
      }
    },
    {
      "name": "SbbNavigationSection",
      "id": "directive-SbbNavigationSection-d90db8ddd03a68dcbc635752e48e37b0fb7aa0f06483db09d7101b260d2ceb892ec1319f189b3332ca0873d6be605e12108f5dd34ad12d7a6107671193a92ae9",
      "file": "src/angular/navigation/navigation-section/navigation-section.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport type { SbbNavigationSectionElement } from '@sbb-esta/lyne-elements/navigation/navigation-section.js';\nimport '@sbb-esta/lyne-elements/navigation/navigation-section.js';\n\n@Directive({\n  selector: 'sbb-navigation-section',\n})\nexport class SbbNavigationSection {\n  #element: ElementRef<SbbNavigationSectionElement> = inject(\n    ElementRef<SbbNavigationSectionElement>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ alias: 'title-content' })\n  public set titleContent(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleContent = value));\n  }\n  public get titleContent(): string {\n    return this.#element.nativeElement.titleContent;\n  }\n\n  @Input()\n  public set trigger(value: string | HTMLElement | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.trigger = value));\n  }\n  public get trigger(): string | HTMLElement | null {\n    return this.#element.nativeElement.trigger;\n  }\n\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n\n  @Input({ alias: 'accessibility-back-label' })\n  public set accessibilityBackLabel(value: string) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.accessibilityBackLabel = value),\n    );\n  }\n  public get accessibilityBackLabel(): string {\n    return this.#element.nativeElement.accessibilityBackLabel;\n  }\n\n  public open(): void {\n    return this.#element.nativeElement.open();\n  }\n\n  public close(): void {\n    return this.#element.nativeElement.close();\n  }\n}\n",
      "selector": "sbb-navigation-section",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-back-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 39,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 31,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "title-content",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "string",
          "decorators": []
        },
        {
          "name": "trigger",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "string | HTMLElement | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 52,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        },
        {
          "name": "open",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 48,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": [],
      "accessors": {
        "titleContent": {
          "name": "titleContent",
          "setSignature": {
            "name": "titleContent",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 15,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleContent",
            "type": "string",
            "returnType": "string",
            "line": 18
          }
        },
        "trigger": {
          "name": "trigger",
          "setSignature": {
            "name": "trigger",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | HTMLElement | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 23,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | HTMLElement | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "trigger",
            "type": "",
            "returnType": "string | HTMLElement | null",
            "line": 26
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 31,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 34
          }
        },
        "accessibilityBackLabel": {
          "name": "accessibilityBackLabel",
          "setSignature": {
            "name": "accessibilityBackLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 39,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityBackLabel",
            "type": "string",
            "returnType": "string",
            "line": 44
          }
        }
      }
    },
    {
      "name": "SbbNotification",
      "id": "directive-SbbNotification-340731fd21e99d3eb08897b5606403df524bca5405d5f84c8959376d1440b84d954d99ea132a7e06f31a1ff56d48c4096001a96b786891b53d9ffef60ad4c0eb",
      "file": "src/angular/notification/notification.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone, Output } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbNotificationElement } from '@sbb-esta/lyne-elements/notification.js';\nimport { SbbTitleLevel } from '@sbb-esta/lyne-elements/title.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/notification.js';\n\n@Directive({\n  selector: 'sbb-notification',\n})\nexport class SbbNotification {\n  #element: ElementRef<SbbNotificationElement> = inject(ElementRef<SbbNotificationElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set type(value: 'info' | 'success' | 'warn' | 'error') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): 'info' | 'success' | 'warn' | 'error' {\n    return this.#element.nativeElement.type;\n  }\n\n  @Input({ alias: 'title-content' })\n  public set titleContent(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleContent = value));\n  }\n  public get titleContent(): string {\n    return this.#element.nativeElement.titleContent;\n  }\n\n  @Input({ alias: 'title-level' })\n  public set titleLevel(value: SbbTitleLevel) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleLevel = value));\n  }\n  public get titleLevel(): SbbTitleLevel {\n    return this.#element.nativeElement.titleLevel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set readonly(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.readonly = value));\n  }\n  public get readonly(): boolean {\n    return this.#element.nativeElement.readonly;\n  }\n\n  @Input()\n  public set size(value: 'm' | 's') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): 'm' | 's' {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input()\n  public set animation(value: 'open' | 'close' | 'all' | 'none') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.animation = value));\n  }\n  public get animation(): 'open' | 'close' | 'all' | 'none' {\n    return this.#element.nativeElement.animation;\n  }\n\n  @Output() public willOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  );\n\n  @Output() public didOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  );\n\n  @Output() public willClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  );\n\n  @Output() public didClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  );\n\n  public close(): void {\n    return this.#element.nativeElement.close();\n  }\n}\n",
      "selector": "sbb-notification",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "name": "animation",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 56,
          "type": "\"open\" | \"close\" | \"all\" | \"none\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "readonly",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 48,
          "type": "\"m\" | \"s\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "title-content",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "title-level",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "SbbTitleLevel",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "\"info\" | \"success\" | \"warn\" | \"error\"",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "didClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 78,
          "type": "Observable<void>"
        },
        {
          "name": "didOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 68,
          "type": "Observable<void>"
        },
        {
          "name": "willClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 73,
          "type": "Observable<void>"
        },
        {
          "name": "willOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 63,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 83,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": [],
      "accessors": {
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"info\" | \"success\" | \"warn\" | \"error\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"info\" | \"success\" | \"warn\" | \"error\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "\"info\" | \"success\" | \"warn\" | \"error\"",
            "line": 19
          }
        },
        "titleContent": {
          "name": "titleContent",
          "setSignature": {
            "name": "titleContent",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 24,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleContent",
            "type": "string",
            "returnType": "string",
            "line": 27
          }
        },
        "titleLevel": {
          "name": "titleLevel",
          "setSignature": {
            "name": "titleLevel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 32,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleLevel",
            "type": "",
            "returnType": "SbbTitleLevel",
            "line": 35
          }
        },
        "readonly": {
          "name": "readonly",
          "setSignature": {
            "name": "readonly",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 40,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "readonly",
            "type": "boolean",
            "returnType": "boolean",
            "line": 43
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"m\" | \"s\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 48,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"m\" | \"s\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "\"m\" | \"s\"",
            "line": 51
          }
        },
        "animation": {
          "name": "animation",
          "setSignature": {
            "name": "animation",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"open\" | \"close\" | \"all\" | \"none\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 56,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"open\" | \"close\" | \"all\" | \"none\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "animation",
            "type": "",
            "returnType": "\"open\" | \"close\" | \"all\" | \"none\"",
            "line": 59
          }
        }
      }
    },
    {
      "name": "SbbOptGroup",
      "id": "directive-SbbOptGroup-5417bd649ffbc1c069b64a866ebe799153f7ff99f997d75f2e24ed532c693dcfd16317ca544e079a08ed4516c3eeecdd02d79b7b003a8589ee178a2dc1937c0c",
      "file": "src/angular/option/optgroup/optgroup.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbOptGroupElement } from '@sbb-esta/lyne-elements/option/optgroup.js';\nimport '@sbb-esta/lyne-elements/option/optgroup.js';\n\n@Directive({\n  selector: 'sbb-opt-group',\n})\nexport class SbbOptGroup {\n  #element: ElementRef<SbbOptGroupElement> = inject(ElementRef<SbbOptGroupElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set label(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.label = value));\n  }\n  public get label(): string {\n    return this.#element.nativeElement.label;\n  }\n}\n",
      "selector": "sbb-opt-group",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 14,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 17
          }
        },
        "label": {
          "name": "label",
          "setSignature": {
            "name": "label",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 22,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "label",
            "type": "string",
            "returnType": "string",
            "line": 25
          }
        }
      }
    },
    {
      "name": "SbbOption",
      "id": "directive-SbbOption-e3204fef23406afb233a1840d63140f766dc67d5a80db4ad03865fd3ebb2c4233d6a09624cea98e525702802cf5c2287ddb0c5023ef3392e30654fe251145728",
      "file": "src/angular/option/option/option.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone, Output } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbOptionElement } from '@sbb-esta/lyne-elements/option/option.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/option/option.js';\n\n@Directive({\n  selector: 'sbb-option',\n})\nexport class SbbOption {\n  #element: ElementRef<SbbOptionElement> = inject(ElementRef<SbbOptionElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input()\n  public set value(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set selected(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.selected = value));\n  }\n  public get selected(): boolean {\n    return this.#element.nativeElement.selected;\n  }\n\n  @Output() public optionSelectionChange: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'optionSelectionChange',\n  );\n\n  @Output() public optionSelected: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'optionSelected',\n  );\n}\n",
      "selector": "sbb-option",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "selected",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 39,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 31,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "optionSelected",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'optionSelected',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 51,
          "type": "Observable<void>"
        },
        {
          "name": "optionSelectionChange",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'optionSelectionChange',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 46,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 15,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 18
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 23,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 26
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 31,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "string",
            "returnType": "string",
            "line": 34
          }
        },
        "selected": {
          "name": "selected",
          "setSignature": {
            "name": "selected",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 39,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "selected",
            "type": "boolean",
            "returnType": "boolean",
            "line": 42
          }
        }
      }
    },
    {
      "name": "SbbOverlay",
      "id": "directive-SbbOverlay-8c62f1558b0719c5e8e176a9f59746cdf2f387b001273faeb06a97c3b965774db65d069cc398aa65181c13ad50916a495b00abd41380b32f0408860b7ff476c7",
      "file": "src/angular/overlay/overlay.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone, Output } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbOverlayCloseEventDetails } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport type { SbbOverlayElement } from '@sbb-esta/lyne-elements/overlay.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/overlay.js';\n\n@Directive({\n  selector: 'sbb-overlay',\n})\nexport class SbbOverlay {\n  #element: ElementRef<SbbOverlayElement> = inject(ElementRef<SbbOverlayElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set expanded(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.expanded = value));\n  }\n  public get expanded(): boolean {\n    return this.#element.nativeElement.expanded;\n  }\n\n  @Input({ alias: 'back-button', transform: booleanAttribute })\n  public set backButton(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.backButton = value));\n  }\n  public get backButton(): boolean {\n    return this.#element.nativeElement.backButton;\n  }\n\n  @Input({ alias: 'accessibility-close-label' })\n  public set accessibilityCloseLabel(value: string) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.accessibilityCloseLabel = value),\n    );\n  }\n  public get accessibilityCloseLabel(): string {\n    return this.#element.nativeElement.accessibilityCloseLabel;\n  }\n\n  @Input({ alias: 'accessibility-back-label' })\n  public set accessibilityBackLabel(value: string) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.accessibilityBackLabel = value),\n    );\n  }\n  public get accessibilityBackLabel(): string {\n    return this.#element.nativeElement.accessibilityBackLabel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n\n  @Output() public willOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  );\n\n  @Output() public didOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  );\n\n  @Output() public willClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  );\n\n  @Output() public didClose: Observable<SbbOverlayCloseEventDetails> =\n    fromEvent<SbbOverlayCloseEventDetails>(this.#element.nativeElement, 'didClose');\n\n  @Output() public requestBackAction: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'requestBackAction',\n  );\n\n  public get isOpen(): boolean {\n    return this.#element.nativeElement.isOpen;\n  }\n\n  public open(): void {\n    return this.#element.nativeElement.open();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public close(result: any, target: HTMLElement): any {\n    return this.#element.nativeElement.close(result, target);\n  }\n}\n",
      "selector": "sbb-overlay",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-back-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 42,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "accessibility-close-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 60,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "back-button",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "expanded",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 52,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "didClose",
          "defaultValue": "fromEvent<SbbOverlayCloseEventDetails>(this.#element.nativeElement, 'didClose')",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 82,
          "type": "Observable<SbbOverlayCloseEventDetails>"
        },
        {
          "name": "didOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 72,
          "type": "Observable<void>"
        },
        {
          "name": "requestBackAction",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'requestBackAction',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 85,
          "type": "Observable<void>"
        },
        {
          "name": "willClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 77,
          "type": "Observable<void>"
        },
        {
          "name": "willOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 67,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "close",
          "args": [
            {
              "name": "result",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "target",
              "type": "HTMLElement",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 99,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": "result",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "target",
              "type": "HTMLElement",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "open",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 94,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": [],
      "accessors": {
        "expanded": {
          "name": "expanded",
          "setSignature": {
            "name": "expanded",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "expanded",
            "type": "boolean",
            "returnType": "boolean",
            "line": 19
          }
        },
        "backButton": {
          "name": "backButton",
          "setSignature": {
            "name": "backButton",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 24,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "backButton",
            "type": "boolean",
            "returnType": "boolean",
            "line": 27
          }
        },
        "accessibilityCloseLabel": {
          "name": "accessibilityCloseLabel",
          "setSignature": {
            "name": "accessibilityCloseLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 32,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityCloseLabel",
            "type": "string",
            "returnType": "string",
            "line": 37
          }
        },
        "accessibilityBackLabel": {
          "name": "accessibilityBackLabel",
          "setSignature": {
            "name": "accessibilityBackLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 42,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityBackLabel",
            "type": "string",
            "returnType": "string",
            "line": 47
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 52,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 55
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 60,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 63
          }
        },
        "isOpen": {
          "name": "isOpen",
          "getSignature": {
            "name": "isOpen",
            "type": "boolean",
            "returnType": "boolean",
            "line": 90
          }
        }
      }
    },
    {
      "name": "SbbPaginator",
      "id": "directive-SbbPaginator-123d541d02f7f70945ce02086fdc2139297378d4ff067901f9c86364409e02835d7ebd3a979b9171d308944c45b501764ed94b261da91a49c53d8301282ad150",
      "file": "src/angular/paginator/paginator/paginator.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {\n  Directive,\n  ElementRef,\n  inject,\n  Input,\n  NgZone,\n  numberAttribute,\n  Output,\n} from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbPaginatorPageEventDetails } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport type { SbbPaginatorElement } from '@sbb-esta/lyne-elements/paginator/paginator.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/paginator/paginator.js';\n\n@Directive({\n  selector: 'sbb-paginator',\n})\nexport class SbbPaginator {\n  #element: ElementRef<SbbPaginatorElement> = inject(ElementRef<SbbPaginatorElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ alias: 'page-size-options' })\n  public set pageSizeOptions(value: number[]) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.pageSizeOptions = value));\n  }\n  public get pageSizeOptions(): number[] {\n    return this.#element.nativeElement.pageSizeOptions;\n  }\n\n  @Input({ alias: 'pager-position' })\n  public set pagerPosition(value: 'start' | 'end') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.pagerPosition = value));\n  }\n  public get pagerPosition(): 'start' | 'end' {\n    return this.#element.nativeElement.pagerPosition;\n  }\n\n  @Input({ transform: numberAttribute })\n  public set length(value: number) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.length = value));\n  }\n  public get length(): number {\n    return this.#element.nativeElement.length;\n  }\n\n  @Input({ alias: 'page-size', transform: numberAttribute })\n  public set pageSize(value: number) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.pageSize = value));\n  }\n  public get pageSize(): number {\n    return this.#element.nativeElement.pageSize;\n  }\n\n  @Input({ alias: 'page-index', transform: numberAttribute })\n  public set pageIndex(value: number) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.pageIndex = value));\n  }\n  public get pageIndex(): number {\n    return this.#element.nativeElement.pageIndex;\n  }\n\n  @Input()\n  public set size(value: 'm' | 's') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): 'm' | 's' {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Output() public page: Observable<SbbPaginatorPageEventDetails> =\n    fromEvent<SbbPaginatorPageEventDetails>(this.#element.nativeElement, 'page');\n}\n",
      "selector": "sbb-paginator",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 80,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "length",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "number",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 72,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "page-index",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 56,
          "type": "number",
          "decorators": []
        },
        {
          "required": false,
          "name": "page-size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 48,
          "type": "number",
          "decorators": []
        },
        {
          "required": false,
          "name": "page-size-options",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "number[]",
          "decorators": []
        },
        {
          "required": false,
          "name": "pager-position",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "\"start\" | \"end\"",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 64,
          "type": "\"m\" | \"s\"",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "page",
          "defaultValue": "fromEvent<SbbPaginatorPageEventDetails>(this.#element.nativeElement, 'page')",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 87,
          "type": "Observable<SbbPaginatorPageEventDetails>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "pageSizeOptions": {
          "name": "pageSizeOptions",
          "setSignature": {
            "name": "pageSizeOptions",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "number[]",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 24,
            "jsdoctags": [
              {
                "name": "value",
                "type": "number[]",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "pageSizeOptions",
            "type": "[]",
            "returnType": "number[]",
            "line": 27
          }
        },
        "pagerPosition": {
          "name": "pagerPosition",
          "setSignature": {
            "name": "pagerPosition",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"start\" | \"end\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 32,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"start\" | \"end\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "pagerPosition",
            "type": "",
            "returnType": "\"start\" | \"end\"",
            "line": 35
          }
        },
        "length": {
          "name": "length",
          "setSignature": {
            "name": "length",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 40,
            "jsdoctags": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "length",
            "type": "number",
            "returnType": "number",
            "line": 43
          }
        },
        "pageSize": {
          "name": "pageSize",
          "setSignature": {
            "name": "pageSize",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 48,
            "jsdoctags": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "pageSize",
            "type": "number",
            "returnType": "number",
            "line": 51
          }
        },
        "pageIndex": {
          "name": "pageIndex",
          "setSignature": {
            "name": "pageIndex",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 56,
            "jsdoctags": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "pageIndex",
            "type": "number",
            "returnType": "number",
            "line": 59
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"m\" | \"s\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 64,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"m\" | \"s\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "\"m\" | \"s\"",
            "line": 67
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 72,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 75
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 80,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 83
          }
        }
      }
    },
    {
      "name": "SbbPopover",
      "id": "directive-SbbPopover-7538f0e9d9532fd092a8bedd57c57194fb7e9c1c504a4c6456e57ecde204e21d7e48d0df42a79b11f334b13dad501c2421b2f50434f17fbcc0c63f24524db0f2",
      "file": "src/angular/popover/popover/popover.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {\n  Directive,\n  ElementRef,\n  inject,\n  Input,\n  NgZone,\n  numberAttribute,\n  Output,\n} from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbPopoverElement } from '@sbb-esta/lyne-elements/popover/popover.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/popover/popover.js';\n\n@Directive({\n  selector: 'sbb-popover',\n})\nexport class SbbPopover {\n  #element: ElementRef<SbbPopoverElement> = inject(ElementRef<SbbPopoverElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set trigger(value: string | HTMLElement | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.trigger = value));\n  }\n  public get trigger(): string | HTMLElement | null {\n    return this.#element.nativeElement.trigger;\n  }\n\n  @Input({ alias: 'hide-close-button', transform: booleanAttribute })\n  public set hideCloseButton(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.hideCloseButton = value));\n  }\n  public get hideCloseButton(): boolean {\n    return this.#element.nativeElement.hideCloseButton;\n  }\n\n  @Input({ alias: 'hover-trigger', transform: booleanAttribute })\n  public set hoverTrigger(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.hoverTrigger = value));\n  }\n  public get hoverTrigger(): boolean {\n    return this.#element.nativeElement.hoverTrigger;\n  }\n\n  @Input({ alias: 'open-delay', transform: numberAttribute })\n  public set openDelay(value: number) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.openDelay = value));\n  }\n  public get openDelay(): number {\n    return this.#element.nativeElement.openDelay;\n  }\n\n  @Input({ alias: 'close-delay', transform: numberAttribute })\n  public set closeDelay(value: number) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.closeDelay = value));\n  }\n  public get closeDelay(): number {\n    return this.#element.nativeElement.closeDelay;\n  }\n\n  @Input({ alias: 'accessibility-close-label' })\n  public set accessibilityCloseLabel(value: string) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.accessibilityCloseLabel = value),\n    );\n  }\n  public get accessibilityCloseLabel(): string {\n    return this.#element.nativeElement.accessibilityCloseLabel;\n  }\n\n  @Output() public willOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  );\n\n  @Output() public didOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  );\n\n  @Output() public willClose: Observable<{ closeTarget: HTMLElement }> = fromEvent<{\n    closeTarget: HTMLElement;\n  }>(this.#element.nativeElement, 'willClose');\n\n  @Output() public didClose: Observable<{ closeTarget: HTMLElement }> = fromEvent<{\n    closeTarget: HTMLElement;\n  }>(this.#element.nativeElement, 'didClose');\n\n  public get isOpen(): boolean {\n    return this.#element.nativeElement.isOpen;\n  }\n\n  public open(): void {\n    return this.#element.nativeElement.open();\n  }\n\n  public close(target: HTMLElement): void {\n    return this.#element.nativeElement.close(target);\n  }\n}\n",
      "selector": "sbb-popover",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-close-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 63,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "close-delay",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 55,
          "type": "number",
          "decorators": []
        },
        {
          "required": false,
          "name": "hide-close-button",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 31,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "hover-trigger",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 39,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "open-delay",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 47,
          "type": "number",
          "decorators": []
        },
        {
          "name": "trigger",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "string | HTMLElement | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "didClose",
          "defaultValue": "fromEvent<{\n    closeTarget: HTMLElement;\n  }>(this.#element.nativeElement, 'didClose')",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 86,
          "type": "Observable<literal type>"
        },
        {
          "name": "didOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 77,
          "type": "Observable<void>"
        },
        {
          "name": "willClose",
          "defaultValue": "fromEvent<{\n    closeTarget: HTMLElement;\n  }>(this.#element.nativeElement, 'willClose')",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 82,
          "type": "Observable<literal type>"
        },
        {
          "name": "willOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 72,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "close",
          "args": [
            {
              "name": "target",
              "type": "HTMLElement",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 98,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": "target",
              "type": "HTMLElement",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "open",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 94,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": [],
      "accessors": {
        "trigger": {
          "name": "trigger",
          "setSignature": {
            "name": "trigger",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | HTMLElement | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 23,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | HTMLElement | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "trigger",
            "type": "",
            "returnType": "string | HTMLElement | null",
            "line": 26
          }
        },
        "hideCloseButton": {
          "name": "hideCloseButton",
          "setSignature": {
            "name": "hideCloseButton",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 31,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "hideCloseButton",
            "type": "boolean",
            "returnType": "boolean",
            "line": 34
          }
        },
        "hoverTrigger": {
          "name": "hoverTrigger",
          "setSignature": {
            "name": "hoverTrigger",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 39,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "hoverTrigger",
            "type": "boolean",
            "returnType": "boolean",
            "line": 42
          }
        },
        "openDelay": {
          "name": "openDelay",
          "setSignature": {
            "name": "openDelay",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 47,
            "jsdoctags": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "openDelay",
            "type": "number",
            "returnType": "number",
            "line": 50
          }
        },
        "closeDelay": {
          "name": "closeDelay",
          "setSignature": {
            "name": "closeDelay",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 55,
            "jsdoctags": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "closeDelay",
            "type": "number",
            "returnType": "number",
            "line": 58
          }
        },
        "accessibilityCloseLabel": {
          "name": "accessibilityCloseLabel",
          "setSignature": {
            "name": "accessibilityCloseLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 63,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityCloseLabel",
            "type": "string",
            "returnType": "string",
            "line": 68
          }
        },
        "isOpen": {
          "name": "isOpen",
          "getSignature": {
            "name": "isOpen",
            "type": "boolean",
            "returnType": "boolean",
            "line": 90
          }
        }
      }
    },
    {
      "name": "SbbPopoverTrigger",
      "id": "directive-SbbPopoverTrigger-3d94d39d2e5c2543488d3fe2c7acaf6ad9831f08205c1ed1434c05594372dee384ed5fc995df3ca2a81cfc656a385ee9130b405eb705a19ad8ca4ad4ed940950",
      "file": "src/angular/popover/popover-trigger/popover-trigger.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbButtonType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport type { SbbPopoverTriggerElement } from '@sbb-esta/lyne-elements/popover/popover-trigger.js';\nimport '@sbb-esta/lyne-elements/popover/popover-trigger.js';\n\n@Directive({\n  selector: 'sbb-popover-trigger',\n})\nexport class SbbPopoverTrigger {\n  #element: ElementRef<SbbPopoverTriggerElement> = inject(ElementRef<SbbPopoverTriggerElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ alias: 'disabled-interactive', transform: booleanAttribute })\n  public set disabledInteractive(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabledInteractive = value));\n  }\n  public get disabledInteractive(): boolean {\n    return this.#element.nativeElement.disabledInteractive;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input()\n  public set form(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.form = value));\n  }\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set type(value: SbbButtonType) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): SbbButtonType {\n    return this.#element.nativeElement.type;\n  }\n}\n",
      "selector": "sbb-popover-trigger",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled-interactive",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "form",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 47,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 39,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 55,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 31,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 71,
          "type": "SbbButtonType",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 63,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "disabledInteractive": {
          "name": "disabledInteractive",
          "setSignature": {
            "name": "disabledInteractive",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 15,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabledInteractive",
            "type": "boolean",
            "returnType": "boolean",
            "line": 18
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 23,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 26
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 31,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 34
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 39,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 42
          }
        },
        "form": {
          "name": "form",
          "setSignature": {
            "name": "form",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 47,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 50
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 55,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 58
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 63,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 66
          }
        },
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 71,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "SbbButtonType",
            "line": 74
          }
        }
      }
    },
    {
      "name": "SbbRadioButton",
      "id": "directive-SbbRadioButton-75d081e0eef3fa0b5483b82543c3bf304026b816d28193b9b07d0c2093a0c81bd521e294ca32fc119407b386f96b7938c35fbe9f0a3af07be65cb899a8c4fc44",
      "file": "src/angular/radio-button/radio-button/radio-button.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { FocusMonitor } from '@angular/cdk/a11y';\nimport {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  forwardRef,\n  inject,\n  Input,\n  NgZone,\n  Output,\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { booleanAttribute, SbbControlValueAccessorMixin } from '@sbb-esta/lyne-angular/core';\nimport { SbbRadioButtonGroupElement } from '@sbb-esta/lyne-elements/radio-button/radio-button-group.js';\nimport type { SbbRadioButtonElement } from '@sbb-esta/lyne-elements/radio-button/radio-button.js';\nimport { SbbRadioButtonSize } from '@sbb-esta/lyne-elements/radio-button.js';\nimport { fromEvent, type Observable } from 'rxjs';\n\nimport '@sbb-esta/lyne-elements/radio-button/radio-button.js';\n\n@Directive({\n  selector: 'sbb-radio-button',\n  exportAs: 'sbbRadioButton',\n  host: {\n    '(change)': 'this.onChangeFn(this.checked)',\n  },\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SbbRadioButton),\n      multi: true,\n    },\n  ],\n})\nexport class SbbRadioButton\n  extends SbbControlValueAccessorMixin(class {})\n  implements AfterViewInit\n{\n  #element: ElementRef<SbbRadioButtonElement> = inject(ElementRef<SbbRadioButtonElement>);\n  #ngZone: NgZone = inject(NgZone);\n  #focusMonitor: FocusMonitor = inject(FocusMonitor);\n\n  @Input()\n  public set size(value: SbbRadioButtonSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbRadioButtonSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ alias: 'allow-empty-selection', transform: booleanAttribute })\n  public set allowEmptySelection(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.allowEmptySelection = value));\n  }\n  public get allowEmptySelection(): boolean {\n    return this.#element.nativeElement.allowEmptySelection;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set checked(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.checked = value));\n  }\n  public get checked(): boolean {\n    return this.#element.nativeElement.checked;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set required(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.required = value));\n  }\n  public get required(): boolean {\n    return this.#element.nativeElement.required;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public change: Observable<Event> = fromEvent<Event>(\n    this.#element.nativeElement,\n    'change',\n  );\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public input: Observable<InputEvent> = fromEvent<InputEvent>(\n    this.#element.nativeElement,\n    'input',\n  );\n\n  public get group(): SbbRadioButtonGroupElement | null {\n    return this.#element.nativeElement.group;\n  }\n\n  public get type(): string {\n    return this.#element.nativeElement.type;\n  }\n\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  public select(): void {\n    return this.#element.nativeElement.select();\n  }\n\n  ngAfterViewInit() {\n    this.#focusMonitor.monitor(this.#element, true).subscribe((focusOrigin) => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this.onTouchedFn();\n        });\n      }\n    });\n  }\n}\n",
      "selector": "sbb-radio-button",
      "providers": [
        {
          "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SbbRadioButton), multi: true,\n}"
        }
      ],
      "exportAs": "sbbRadioButton",
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "allow-empty-selection",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 52,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "checked",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 60,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 68,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 84,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "required",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 76,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 44,
          "type": "SbbRadioButtonSize",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 92,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "change",
          "defaultValue": "fromEvent<Event>(\n    this.#element.nativeElement,\n    'change',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 100,
          "type": "Observable<Event>"
        },
        {
          "name": "input",
          "defaultValue": "fromEvent<InputEvent>(\n    this.#element.nativeElement,\n    'input',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 106,
          "type": "Observable<InputEvent>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 127,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "select",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 123,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": ["SbbControlValueAccessorMixin(class {})"],
      "implements": ["AfterViewInit"],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbRadioButtonSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 44,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbRadioButtonSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbRadioButtonSize",
            "line": 47
          }
        },
        "allowEmptySelection": {
          "name": "allowEmptySelection",
          "setSignature": {
            "name": "allowEmptySelection",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 52,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "allowEmptySelection",
            "type": "boolean",
            "returnType": "boolean",
            "line": 55
          }
        },
        "checked": {
          "name": "checked",
          "setSignature": {
            "name": "checked",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 60,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "checked",
            "type": "boolean",
            "returnType": "boolean",
            "line": 63
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 68,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 71
          }
        },
        "required": {
          "name": "required",
          "setSignature": {
            "name": "required",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 76,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "required",
            "type": "boolean",
            "returnType": "boolean",
            "line": 79
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 84,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 87
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 92,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 95
          }
        },
        "group": {
          "name": "group",
          "getSignature": {
            "name": "group",
            "type": "",
            "returnType": "SbbRadioButtonGroupElement | null",
            "line": 111
          }
        },
        "type": {
          "name": "type",
          "getSignature": {
            "name": "type",
            "type": "string",
            "returnType": "string",
            "line": 115
          }
        },
        "form": {
          "name": "form",
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 119
          }
        }
      }
    },
    {
      "name": "SbbRadioButtonGroup",
      "id": "directive-SbbRadioButtonGroup-611de28a0dc3721ed0466ee527b19b7f201b5316a446a1b07e177d53706779d4e55034341bce66510465dbbfde9b23914b75a33e2350f4bdecc5275ebc7064be",
      "file": "src/angular/radio-button/radio-button-group/radio-button-group.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone, Output } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbHorizontalFrom, SbbOrientation } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport type { SbbRadioButtonGroupElement } from '@sbb-esta/lyne-elements/radio-button/radio-button-group.js';\nimport { SbbRadioButtonPanelElement } from '@sbb-esta/lyne-elements/radio-button/radio-button-panel.js';\nimport { SbbRadioButtonElement } from '@sbb-esta/lyne-elements/radio-button/radio-button.js';\nimport { SbbRadioButtonSize } from '@sbb-esta/lyne-elements/radio-button.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/radio-button/radio-button-group.js';\n\n@Directive({\n  selector: 'sbb-radio-button-group',\n})\nexport class SbbRadioButtonGroup {\n  #element: ElementRef<SbbRadioButtonGroupElement> = inject(ElementRef<SbbRadioButtonGroupElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ alias: 'allow-empty-selection', transform: booleanAttribute })\n  public set allowEmptySelection(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.allowEmptySelection = value));\n  }\n  public get allowEmptySelection(): boolean {\n    return this.#element.nativeElement.allowEmptySelection;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set required(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.required = value));\n  }\n  public get required(): boolean {\n    return this.#element.nativeElement.required;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set size(value: SbbRadioButtonSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbRadioButtonSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ alias: 'horizontal-from' })\n  public set horizontalFrom(value: SbbHorizontalFrom | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.horizontalFrom = value));\n  }\n  public get horizontalFrom(): SbbHorizontalFrom | null {\n    return this.#element.nativeElement.horizontalFrom;\n  }\n\n  @Input()\n  public set orientation(value: SbbOrientation) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.orientation = value));\n  }\n  public get orientation(): SbbOrientation {\n    return this.#element.nativeElement.orientation;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Output() public didChange: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didChange',\n  );\n\n  public get radioButtons(): (SbbRadioButtonElement | SbbRadioButtonPanelElement)[] {\n    return this.#element.nativeElement.radioButtons;\n  }\n}\n",
      "selector": "sbb-radio-button-group",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "allow-empty-selection",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 75,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "horizontal-from",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 51,
          "type": "SbbHorizontalFrom | null",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 67,
          "type": "string",
          "decorators": []
        },
        {
          "name": "orientation",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 59,
          "type": "SbbOrientation",
          "decorators": []
        },
        {
          "required": false,
          "name": "required",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "SbbRadioButtonSize",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "didChange",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didChange',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 82,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "allowEmptySelection": {
          "name": "allowEmptySelection",
          "setSignature": {
            "name": "allowEmptySelection",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 19,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "allowEmptySelection",
            "type": "boolean",
            "returnType": "boolean",
            "line": 22
          }
        },
        "required": {
          "name": "required",
          "setSignature": {
            "name": "required",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 27,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "required",
            "type": "boolean",
            "returnType": "boolean",
            "line": 30
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 35,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 38
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbRadioButtonSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 43,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbRadioButtonSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbRadioButtonSize",
            "line": 46
          }
        },
        "horizontalFrom": {
          "name": "horizontalFrom",
          "setSignature": {
            "name": "horizontalFrom",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbHorizontalFrom | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 51,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbHorizontalFrom | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "horizontalFrom",
            "type": "",
            "returnType": "SbbHorizontalFrom | null",
            "line": 54
          }
        },
        "orientation": {
          "name": "orientation",
          "setSignature": {
            "name": "orientation",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbOrientation",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 59,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbOrientation",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "orientation",
            "type": "",
            "returnType": "SbbOrientation",
            "line": 62
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 67,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 70
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 75,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 78
          }
        },
        "radioButtons": {
          "name": "radioButtons",
          "getSignature": {
            "name": "radioButtons",
            "type": "[]",
            "returnType": "[]",
            "line": 87
          }
        }
      }
    },
    {
      "name": "SbbRadioButtonPanel",
      "id": "directive-SbbRadioButtonPanel-f2fb7cc6fcfe6569d9653e488e593510ff572ade06d59b2d9b4bcc8ac3188110337dffe4b561f3fc7d9ab17b73aec5ba1ce5e04e92c5f21a3d28ee6ea42616de",
      "file": "src/angular/radio-button/radio-button-panel/radio-button-panel.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { FocusMonitor } from '@angular/cdk/a11y';\nimport {\n  AfterViewInit,\n  Directive,\n  ElementRef,\n  forwardRef,\n  inject,\n  Input,\n  NgZone,\n  Output,\n} from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { booleanAttribute, SbbControlValueAccessorMixin } from '@sbb-esta/lyne-angular/core';\nimport { SbbPanelSize } from '@sbb-esta/lyne-elements/core/mixins.js';\nimport { SbbRadioButtonGroupElement } from '@sbb-esta/lyne-elements/radio-button/radio-button-group.js';\nimport type { SbbRadioButtonPanelElement } from '@sbb-esta/lyne-elements/radio-button/radio-button-panel.js';\nimport { fromEvent, type Observable } from 'rxjs';\n\nimport '@sbb-esta/lyne-elements/radio-button/radio-button-panel.js';\n\n@Directive({\n  selector: 'sbb-radio-button-panel',\n  exportAs: 'sbbRadioButtonPanel',\n  host: {\n    '(change)': 'this.onChangeFn(this.checked)',\n  },\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SbbRadioButtonPanel),\n      multi: true,\n    },\n  ],\n})\nexport class SbbRadioButtonPanel\n  extends SbbControlValueAccessorMixin(class {})\n  implements AfterViewInit\n{\n  #element: ElementRef<SbbRadioButtonPanelElement> = inject(ElementRef<SbbRadioButtonPanelElement>);\n  #ngZone: NgZone = inject(NgZone);\n  #focusMonitor: FocusMonitor = inject(FocusMonitor);\n\n  @Input()\n  public set size(value: SbbPanelSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbPanelSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input()\n  public set color(value: 'white' | 'milk') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.color = value));\n  }\n  public get color(): 'white' | 'milk' {\n    return this.#element.nativeElement.color;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set borderless(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.borderless = value));\n  }\n  public get borderless(): boolean {\n    return this.#element.nativeElement.borderless;\n  }\n\n  @Input({ alias: 'allow-empty-selection', transform: booleanAttribute })\n  public set allowEmptySelection(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.allowEmptySelection = value));\n  }\n  public get allowEmptySelection(): boolean {\n    return this.#element.nativeElement.allowEmptySelection;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set checked(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.checked = value));\n  }\n  public get checked(): boolean {\n    return this.#element.nativeElement.checked;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set required(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.required = value));\n  }\n  public get required(): boolean {\n    return this.#element.nativeElement.required;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public change: Observable<Event> = fromEvent<Event>(\n    this.#element.nativeElement,\n    'change',\n  );\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public input: Observable<InputEvent> = fromEvent<InputEvent>(\n    this.#element.nativeElement,\n    'input',\n  );\n\n  public get group(): SbbRadioButtonGroupElement | null {\n    return this.#element.nativeElement.group;\n  }\n\n  public get type(): string {\n    return this.#element.nativeElement.type;\n  }\n\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  public select(): void {\n    return this.#element.nativeElement.select();\n  }\n\n  ngAfterViewInit() {\n    this.#focusMonitor.monitor(this.#element, true).subscribe((focusOrigin) => {\n      if (!focusOrigin) {\n        // When a focused element becomes disabled, the browser *immediately* fires a blur event.\n        // Angular does not expect events to be raised during change detection, so any state change\n        // (such as a form control's 'ng-touched') will cause a changed-after-checked error.\n        // See https://github.com/angular/angular/issues/17793. To work around this, we defer\n        // telling the form control it has been touched until the next tick.\n        Promise.resolve().then(() => {\n          this.onTouchedFn();\n        });\n      }\n    });\n  }\n}\n",
      "selector": "sbb-radio-button-panel",
      "providers": [
        {
          "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SbbRadioButtonPanel), multi: true,\n}"
        }
      ],
      "exportAs": "sbbRadioButtonPanel",
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "allow-empty-selection",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 68,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "borderless",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 60,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "checked",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 76,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "color",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 52,
          "type": "\"white\" | \"milk\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 84,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 100,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "required",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 92,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 44,
          "type": "SbbPanelSize",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 108,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "change",
          "defaultValue": "fromEvent<Event>(\n    this.#element.nativeElement,\n    'change',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 116,
          "type": "Observable<Event>"
        },
        {
          "name": "input",
          "defaultValue": "fromEvent<InputEvent>(\n    this.#element.nativeElement,\n    'input',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 122,
          "type": "Observable<InputEvent>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "ngAfterViewInit",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 143,
          "deprecated": false,
          "deprecationMessage": ""
        },
        {
          "name": "select",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 139,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": ["SbbControlValueAccessorMixin(class {})"],
      "implements": ["AfterViewInit"],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbPanelSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 44,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbPanelSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbPanelSize",
            "line": 47
          }
        },
        "color": {
          "name": "color",
          "setSignature": {
            "name": "color",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"white\" | \"milk\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 52,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"white\" | \"milk\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "color",
            "type": "",
            "returnType": "\"white\" | \"milk\"",
            "line": 55
          }
        },
        "borderless": {
          "name": "borderless",
          "setSignature": {
            "name": "borderless",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 60,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "borderless",
            "type": "boolean",
            "returnType": "boolean",
            "line": 63
          }
        },
        "allowEmptySelection": {
          "name": "allowEmptySelection",
          "setSignature": {
            "name": "allowEmptySelection",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 68,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "allowEmptySelection",
            "type": "boolean",
            "returnType": "boolean",
            "line": 71
          }
        },
        "checked": {
          "name": "checked",
          "setSignature": {
            "name": "checked",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 76,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "checked",
            "type": "boolean",
            "returnType": "boolean",
            "line": 79
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 84,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 87
          }
        },
        "required": {
          "name": "required",
          "setSignature": {
            "name": "required",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 92,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "required",
            "type": "boolean",
            "returnType": "boolean",
            "line": 95
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 100,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 103
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 108,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 111
          }
        },
        "group": {
          "name": "group",
          "getSignature": {
            "name": "group",
            "type": "",
            "returnType": "SbbRadioButtonGroupElement | null",
            "line": 127
          }
        },
        "type": {
          "name": "type",
          "getSignature": {
            "name": "type",
            "type": "string",
            "returnType": "string",
            "line": 131
          }
        },
        "form": {
          "name": "form",
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 135
          }
        }
      }
    },
    {
      "name": "SbbScreenReaderOnly",
      "id": "directive-SbbScreenReaderOnly-a55c0fddce3a75fb9677ddfa8174db71476e548b8dcf20308558fea3f871543d92bc37f9d93fcf88c19e9dad477543cb7e5d6ba2510e2e7c2a2f7e086235c36f",
      "file": "src/angular/screen-reader-only/screen-reader-only.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive } from '@angular/core';\nimport '@sbb-esta/lyne-elements/screen-reader-only.js';\n\n@Directive({\n  selector: 'sbb-screen-reader-only',\n})\nexport class SbbScreenReaderOnly {}\n",
      "selector": "sbb-screen-reader-only",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": []
    },
    {
      "name": "SbbSecondaryButton",
      "id": "directive-SbbSecondaryButton-aa25e5626c315ba50ebc762e53921e36d9bc4609bf5fb77583e0fdcfe40295c0973f20e085768360337175ad37a217dae2afe7d9349b331e6e746271c7386dbc",
      "file": "src/angular/button/secondary-button/secondary-button.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbSecondaryButtonElement } from '@sbb-esta/lyne-elements/button/secondary-button.js';\nimport { SbbButtonSize } from '@sbb-esta/lyne-elements/button.js';\nimport { SbbButtonType } from '@sbb-esta/lyne-elements/core/base-elements.js';\n\nimport '@sbb-esta/lyne-elements/button/secondary-button.js';\n\n@Directive({\n  selector: 'sbb-secondary-button',\n})\nexport class SbbSecondaryButton {\n  #element: ElementRef<SbbSecondaryButtonElement> = inject(ElementRef<SbbSecondaryButtonElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: SbbButtonSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbButtonSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input({ alias: 'disabled-interactive', transform: booleanAttribute })\n  public set disabledInteractive(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabledInteractive = value));\n  }\n  public get disabledInteractive(): boolean {\n    return this.#element.nativeElement.disabledInteractive;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set form(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.form = value));\n  }\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set type(value: SbbButtonType) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): SbbButtonType {\n    return this.#element.nativeElement.type;\n  }\n}\n",
      "selector": "sbb-secondary-button",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 49,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled-interactive",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 41,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "form",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 57,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 65,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "SbbButtonSize",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 81,
          "type": "SbbButtonType",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 73,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbButtonSize",
            "line": 20
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 28
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 33,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 36
          }
        },
        "disabledInteractive": {
          "name": "disabledInteractive",
          "setSignature": {
            "name": "disabledInteractive",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 41,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabledInteractive",
            "type": "boolean",
            "returnType": "boolean",
            "line": 44
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 49,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 52
          }
        },
        "form": {
          "name": "form",
          "setSignature": {
            "name": "form",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 57,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 60
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 65,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 68
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 73,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 76
          }
        },
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 81,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "SbbButtonType",
            "line": 84
          }
        }
      }
    },
    {
      "name": "SbbSecondaryButtonLink",
      "id": "directive-SbbSecondaryButtonLink-318cd68d8736326f16faa2a68e1057dbfb4d6109fea78f24a5c23aef2d74c8a6bf83e3c4d318a247ceb2fb0ad4b983fd8a5557b85c768fdc1459b58df23c8748",
      "file": "src/angular/button/secondary-button-link/secondary-button-link.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute, SbbRouterLinkSupportMixin } from '@sbb-esta/lyne-angular/core';\nimport type { SbbSecondaryButtonLinkElement } from '@sbb-esta/lyne-elements/button/secondary-button-link.js';\nimport { SbbButtonSize } from '@sbb-esta/lyne-elements/button.js';\nimport { LinkTargetType } from '@sbb-esta/lyne-elements/core/base-elements.js';\n\nimport '@sbb-esta/lyne-elements/button/secondary-button-link.js';\n\n@Directive({\n  selector: 'sbb-secondary-button-link',\n})\nexport class SbbSecondaryButtonLink extends SbbRouterLinkSupportMixin(class {}) {\n  #element: ElementRef<SbbSecondaryButtonLinkElement> = inject(\n    ElementRef<SbbSecondaryButtonLinkElement>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: SbbButtonSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbButtonSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input({ alias: 'disabled-interactive', transform: booleanAttribute })\n  public set disabledInteractive(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabledInteractive = value));\n  }\n  public get disabledInteractive(): boolean {\n    return this.#element.nativeElement.disabledInteractive;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set href(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.href = value));\n  }\n  public get href(): string {\n    return this.#element.nativeElement.href;\n  }\n\n  @Input()\n  public set target(value: LinkTargetType | string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.target = value));\n  }\n  public get target(): LinkTargetType | string {\n    return this.#element.nativeElement.target;\n  }\n\n  @Input()\n  public set rel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.rel = value));\n  }\n  public get rel(): string {\n    return this.#element.nativeElement.rel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set download(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.download = value));\n  }\n  public get download(): boolean {\n    return this.#element.nativeElement.download;\n  }\n\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n\n  @Input({ alias: 'accessibility-current' })\n  public set accessibilityCurrent(value: string) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.accessibilityCurrent = value),\n    );\n  }\n  public get accessibilityCurrent(): string {\n    return this.#element.nativeElement.accessibilityCurrent;\n  }\n}\n",
      "selector": "sbb-secondary-button-link",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-current",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 99,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 91,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 51,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled-interactive",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "download",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 83,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "href",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 59,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "rel",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 75,
          "type": "string",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "SbbButtonSize",
          "decorators": []
        },
        {
          "name": "target",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 67,
          "type": "LinkTargetType | string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": ["SbbRouterLinkSupportMixin(class {})"],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 19,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbButtonSize",
            "line": 22
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 27,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 30
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 35,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 38
          }
        },
        "disabledInteractive": {
          "name": "disabledInteractive",
          "setSignature": {
            "name": "disabledInteractive",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 43,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabledInteractive",
            "type": "boolean",
            "returnType": "boolean",
            "line": 46
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 51,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 54
          }
        },
        "href": {
          "name": "href",
          "setSignature": {
            "name": "href",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 59,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "href",
            "type": "string",
            "returnType": "string",
            "line": 62
          }
        },
        "target": {
          "name": "target",
          "setSignature": {
            "name": "target",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 67,
            "jsdoctags": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "target",
            "type": "",
            "returnType": "LinkTargetType | string",
            "line": 70
          }
        },
        "rel": {
          "name": "rel",
          "setSignature": {
            "name": "rel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 75,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "rel",
            "type": "string",
            "returnType": "string",
            "line": 78
          }
        },
        "download": {
          "name": "download",
          "setSignature": {
            "name": "download",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 83,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "download",
            "type": "boolean",
            "returnType": "boolean",
            "line": 86
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 91,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 94
          }
        },
        "accessibilityCurrent": {
          "name": "accessibilityCurrent",
          "setSignature": {
            "name": "accessibilityCurrent",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 99,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityCurrent",
            "type": "string",
            "returnType": "string",
            "line": 104
          }
        }
      }
    },
    {
      "name": "SbbSecondaryButtonStatic",
      "id": "directive-SbbSecondaryButtonStatic-d87d6908a72d9d3035b3dc802c1e3085390e7223ef1baf4f4dd1280c76a23f86bea5f5a1e648e246c6c3cc4e0b40563e47ad906cc97f689380a820111cf066eb",
      "file": "src/angular/button/secondary-button-static/secondary-button-static.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbSecondaryButtonStaticElement } from '@sbb-esta/lyne-elements/button/secondary-button-static.js';\nimport { SbbButtonSize } from '@sbb-esta/lyne-elements/button.js';\n\nimport '@sbb-esta/lyne-elements/button/secondary-button-static.js';\n\n@Directive({\n  selector: 'sbb-secondary-button-static',\n})\nexport class SbbSecondaryButtonStatic {\n  #element: ElementRef<SbbSecondaryButtonStaticElement> = inject(\n    ElementRef<SbbSecondaryButtonStaticElement>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: SbbButtonSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbButtonSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n}\n",
      "selector": "sbb-secondary-button-static",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 42,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "SbbButtonSize",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbButtonSize",
            "line": 21
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 29
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 34,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 37
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 42,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 45
          }
        }
      }
    },
    {
      "name": "SbbSelect",
      "id": "directive-SbbSelect-6c50232f85ae51562e92eccadbf02d3f3666b1db9a126951aadcf763f3d2cf8dc4a9bdab6a88a2fb407cabc0612dcfc58143376a6427d05b54c64f67b3c98672",
      "file": "src/angular/select/select.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, forwardRef, inject, Input, NgZone, Output } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { booleanAttribute, SbbControlValueAccessorMixin } from '@sbb-esta/lyne-angular/core';\nimport type { SbbSelectElement } from '@sbb-esta/lyne-elements/select.js';\nimport { fromEvent, type Observable } from 'rxjs';\n\nimport '@sbb-esta/lyne-elements/select.js';\n\n@Directive({\n  selector: 'sbb-select',\n  exportAs: 'sbbSelect',\n  host: {\n    '(change)': 'this.onChangeFn(this.checked)',\n    '(blur)': 'this.onTouchedFn()',\n    '(didClose)': 'this.onTouchedFn()',\n  },\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SbbSelect),\n      multi: true,\n    },\n  ],\n})\nexport class SbbSelect extends SbbControlValueAccessorMixin(class {}) {\n  #element: ElementRef<SbbSelectElement> = inject(ElementRef<SbbSelectElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set placeholder(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.placeholder = value));\n  }\n  public get placeholder(): string {\n    return this.#element.nativeElement.placeholder;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set multiple(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.multiple = value));\n  }\n  public get multiple(): boolean {\n    return this.#element.nativeElement.multiple;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set readonly(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.readonly = value));\n  }\n  public get readonly(): boolean {\n    return this.#element.nativeElement.readonly;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set required(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.required = value));\n  }\n  public get required(): boolean {\n    return this.#element.nativeElement.required;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | string[] | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | string[] | null {\n    return this.#element.nativeElement.value;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public change: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'change',\n  );\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public input: Observable<void> = fromEvent<void>(this.#element.nativeElement, 'input');\n\n  @Output() public willOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  );\n\n  @Output() public didOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  );\n\n  @Output() public willClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  );\n\n  @Output() public didClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  );\n\n  public get type(): string {\n    return this.#element.nativeElement.type;\n  }\n\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  public get isOpen(): boolean {\n    return this.#element.nativeElement.isOpen;\n  }\n\n  public open(): void {\n    return this.#element.nativeElement.open();\n  }\n\n  public close(): void {\n    return this.#element.nativeElement.close();\n  }\n\n  public getDisplayValue(): string {\n    return this.#element.nativeElement.getDisplayValue();\n  }\n}\n",
      "selector": "sbb-select",
      "providers": [
        {
          "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SbbSelect), multi: true,\n}"
        }
      ],
      "exportAs": "sbbSelect",
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 54,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "multiple",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 38,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 78,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 62,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "placeholder",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 30,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "readonly",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 46,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "required",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 70,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 86,
          "type": "string | [] | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "change",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'change',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 94,
          "type": "Observable<void>"
        },
        {
          "name": "didClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 117,
          "type": "Observable<void>"
        },
        {
          "name": "didOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 107,
          "type": "Observable<void>"
        },
        {
          "name": "input",
          "defaultValue": "fromEvent<void>(this.#element.nativeElement, 'input')",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 100,
          "type": "Observable<void>"
        },
        {
          "name": "willClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 112,
          "type": "Observable<void>"
        },
        {
          "name": "willOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 102,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 138,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        },
        {
          "name": "getDisplayValue",
          "args": [],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 142,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        },
        {
          "name": "open",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 134,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": ["SbbControlValueAccessorMixin(class {})"],
      "accessors": {
        "placeholder": {
          "name": "placeholder",
          "setSignature": {
            "name": "placeholder",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 30,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "placeholder",
            "type": "string",
            "returnType": "string",
            "line": 33
          }
        },
        "multiple": {
          "name": "multiple",
          "setSignature": {
            "name": "multiple",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 38,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "multiple",
            "type": "boolean",
            "returnType": "boolean",
            "line": 41
          }
        },
        "readonly": {
          "name": "readonly",
          "setSignature": {
            "name": "readonly",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 46,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "readonly",
            "type": "boolean",
            "returnType": "boolean",
            "line": 49
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 54,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 57
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 62,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 65
          }
        },
        "required": {
          "name": "required",
          "setSignature": {
            "name": "required",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 70,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "required",
            "type": "boolean",
            "returnType": "boolean",
            "line": 73
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 78,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 81
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | string[] | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 86,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | string[] | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | [] | null",
            "line": 89
          }
        },
        "type": {
          "name": "type",
          "getSignature": {
            "name": "type",
            "type": "string",
            "returnType": "string",
            "line": 122
          }
        },
        "form": {
          "name": "form",
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 126
          }
        },
        "isOpen": {
          "name": "isOpen",
          "getSignature": {
            "name": "isOpen",
            "type": "boolean",
            "returnType": "boolean",
            "line": 130
          }
        }
      }
    },
    {
      "name": "SbbSelectionExpansionPanel",
      "id": "directive-SbbSelectionExpansionPanel-11c545dd8b5c132d48ffc58509e94a727231427b8c0d3d3c722d4c8eab55e26c10f0a1c7271558c2e403a572c9364de9c0948ccd743f5ec5d9db21ce94f2d34c",
      "file": "src/angular/selection-expansion-panel/selection-expansion-panel.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone, Output } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbSelectionExpansionPanelElement } from '@sbb-esta/lyne-elements/selection-expansion-panel.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/selection-expansion-panel.js';\n\n@Directive({\n  selector: 'sbb-selection-expansion-panel',\n})\nexport class SbbSelectionExpansionPanel {\n  #element: ElementRef<SbbSelectionExpansionPanelElement> = inject(\n    ElementRef<SbbSelectionExpansionPanelElement>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set color(value: 'white' | 'milk') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.color = value));\n  }\n  public get color(): 'white' | 'milk' {\n    return this.#element.nativeElement.color;\n  }\n\n  @Input({ alias: 'force-open', transform: booleanAttribute })\n  public set forceOpen(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.forceOpen = value));\n  }\n  public get forceOpen(): boolean {\n    return this.#element.nativeElement.forceOpen;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set borderless(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.borderless = value));\n  }\n  public get borderless(): boolean {\n    return this.#element.nativeElement.borderless;\n  }\n\n  @Output() public willOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  );\n\n  @Output() public didOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  );\n\n  @Output() public willClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  );\n\n  @Output() public didClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  );\n}\n",
      "selector": "sbb-selection-expansion-panel",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "borderless",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "color",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "\"white\" | \"milk\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "force-open",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "didClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 55,
          "type": "Observable<void>"
        },
        {
          "name": "didOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 45,
          "type": "Observable<void>"
        },
        {
          "name": "willClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 50,
          "type": "Observable<void>"
        },
        {
          "name": "willOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "color": {
          "name": "color",
          "setSignature": {
            "name": "color",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"white\" | \"milk\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"white\" | \"milk\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "color",
            "type": "",
            "returnType": "\"white\" | \"milk\"",
            "line": 20
          }
        },
        "forceOpen": {
          "name": "forceOpen",
          "setSignature": {
            "name": "forceOpen",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "forceOpen",
            "type": "boolean",
            "returnType": "boolean",
            "line": 28
          }
        },
        "borderless": {
          "name": "borderless",
          "setSignature": {
            "name": "borderless",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 33,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "borderless",
            "type": "boolean",
            "returnType": "boolean",
            "line": 36
          }
        }
      }
    },
    {
      "name": "SbbSignet",
      "id": "directive-SbbSignet-e03dbf447df2822584e802e2e7ce70c54e31576ed8ea553a7e6397588efaad72f544f17d9766ee53d8e737eeb45019b8b04ee52e768414e89b22f73de2634bf5",
      "file": "src/angular/signet/signet.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport type { SbbSignetElement, SbbSignetProtectiveRoom } from '@sbb-esta/lyne-elements/signet.js';\nimport '@sbb-esta/lyne-elements/signet.js';\n\n@Directive({\n  selector: 'sbb-signet',\n})\nexport class SbbSignet {\n  #element: ElementRef<SbbSignetElement> = inject(ElementRef<SbbSignetElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ alias: 'protective-room' })\n  public set protectiveRoom(value: SbbSignetProtectiveRoom) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.protectiveRoom = value));\n  }\n  public get protectiveRoom(): SbbSignetProtectiveRoom {\n    return this.#element.nativeElement.protectiveRoom;\n  }\n\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n}\n",
      "selector": "sbb-signet",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 21,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "protective-room",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 13,
          "type": "SbbSignetProtectiveRoom",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "protectiveRoom": {
          "name": "protectiveRoom",
          "setSignature": {
            "name": "protectiveRoom",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbSignetProtectiveRoom",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 13,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbSignetProtectiveRoom",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "protectiveRoom",
            "type": "",
            "returnType": "SbbSignetProtectiveRoom",
            "line": 16
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 21,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 24
          }
        }
      }
    },
    {
      "name": "SbbSkiplinkList",
      "id": "directive-SbbSkiplinkList-c02bcf35883c7f31d8c70bc2ecde0e14341d3d95fe4b5be08351fb2007fafb898de52e87da351a378be2a66c8cb29c963e275e0edbb7ef2286fe57e689d67c38",
      "file": "src/angular/skiplink-list/skiplink-list.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport type { SbbSkiplinkListElement } from '@sbb-esta/lyne-elements/skiplink-list.js';\nimport '@sbb-esta/lyne-elements/skiplink-list.js';\nimport { SbbTitleLevel } from '@sbb-esta/lyne-elements/title.js';\n\n@Directive({\n  selector: 'sbb-skiplink-list',\n})\nexport class SbbSkiplinkList {\n  #element: ElementRef<SbbSkiplinkListElement> = inject(ElementRef<SbbSkiplinkListElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ alias: 'title-content' })\n  public set titleContent(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleContent = value));\n  }\n  public get titleContent(): string {\n    return this.#element.nativeElement.titleContent;\n  }\n\n  @Input({ alias: 'title-level' })\n  public set titleLevel(value: SbbTitleLevel) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleLevel = value));\n  }\n  public get titleLevel(): SbbTitleLevel {\n    return this.#element.nativeElement.titleLevel;\n  }\n}\n",
      "selector": "sbb-skiplink-list",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "title-content",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "title-level",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "SbbTitleLevel",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "titleContent": {
          "name": "titleContent",
          "setSignature": {
            "name": "titleContent",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 14,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleContent",
            "type": "string",
            "returnType": "string",
            "line": 17
          }
        },
        "titleLevel": {
          "name": "titleLevel",
          "setSignature": {
            "name": "titleLevel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 22,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleLevel",
            "type": "",
            "returnType": "SbbTitleLevel",
            "line": 25
          }
        }
      }
    },
    {
      "name": "SbbSlider",
      "id": "directive-SbbSlider-32ee458eb3d2d4cc763c75e3ee5a3dd55cf59fa7d3066467181f187f5a70451cb08a742bdbccfa78930e60323419cda5720139227a08ced7342d89cb76d9159f",
      "file": "src/angular/slider/slider.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, forwardRef, inject, Input, NgZone, Output } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { booleanAttribute, SbbControlValueAccessorMixin } from '@sbb-esta/lyne-angular/core';\nimport type { SbbSliderElement } from '@sbb-esta/lyne-elements/slider.js';\nimport { fromEvent, type Observable } from 'rxjs';\n\nimport '@sbb-esta/lyne-elements/slider.js';\n\n@Directive({\n  selector: 'sbb-slider',\n  exportAs: 'sbbSlider',\n  host: {\n    '(change)': 'this.onChangeFn(this.checked)',\n    '(blur)': 'this.onTouchedFn()',\n  },\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SbbSlider),\n      multi: true,\n    },\n  ],\n})\nexport class SbbSlider extends SbbControlValueAccessorMixin(class {}) {\n  #element: ElementRef<SbbSliderElement> = inject(ElementRef<SbbSliderElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input({ alias: 'value-as-number' })\n  public set valueAsNumber(value: number | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.valueAsNumber = value));\n  }\n  public get valueAsNumber(): number | null {\n    return this.#element.nativeElement.valueAsNumber;\n  }\n\n  @Input()\n  public set min(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.min = value));\n  }\n  public get min(): string {\n    return this.#element.nativeElement.min;\n  }\n\n  @Input()\n  public set max(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.max = value));\n  }\n  public get max(): string {\n    return this.#element.nativeElement.max;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set readonly(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.readonly = value));\n  }\n  public get readonly(): boolean {\n    return this.#element.nativeElement.readonly;\n  }\n\n  @Input({ alias: 'start-icon' })\n  public set startIcon(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.startIcon = value));\n  }\n  public get startIcon(): string {\n    return this.#element.nativeElement.startIcon;\n  }\n\n  @Input({ alias: 'end-icon' })\n  public set endIcon(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.endIcon = value));\n  }\n  public get endIcon(): string {\n    return this.#element.nativeElement.endIcon;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Output() public didChange: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didChange',\n  );\n\n  public get type(): string {\n    return this.#element.nativeElement.type;\n  }\n\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n}\n",
      "selector": "sbb-slider",
      "providers": [
        {
          "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SbbSlider), multi: true,\n}"
        }
      ],
      "exportAs": "sbbSlider",
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 85,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "end-icon",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 77,
          "type": "string",
          "decorators": []
        },
        {
          "name": "max",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 53,
          "type": "string",
          "decorators": []
        },
        {
          "name": "min",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 45,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 93,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "readonly",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 61,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "start-icon",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 69,
          "type": "string",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 29,
          "type": "string | null",
          "decorators": []
        },
        {
          "required": false,
          "name": "value-as-number",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 37,
          "type": "number | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "didChange",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didChange',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 100,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": ["SbbControlValueAccessorMixin(class {})"],
      "accessors": {
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 29,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 32
          }
        },
        "valueAsNumber": {
          "name": "valueAsNumber",
          "setSignature": {
            "name": "valueAsNumber",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "number | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 37,
            "jsdoctags": [
              {
                "name": "value",
                "type": "number | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "valueAsNumber",
            "type": "",
            "returnType": "number | null",
            "line": 40
          }
        },
        "min": {
          "name": "min",
          "setSignature": {
            "name": "min",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 45,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "min",
            "type": "string",
            "returnType": "string",
            "line": 48
          }
        },
        "max": {
          "name": "max",
          "setSignature": {
            "name": "max",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 53,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "max",
            "type": "string",
            "returnType": "string",
            "line": 56
          }
        },
        "readonly": {
          "name": "readonly",
          "setSignature": {
            "name": "readonly",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 61,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "readonly",
            "type": "boolean",
            "returnType": "boolean",
            "line": 64
          }
        },
        "startIcon": {
          "name": "startIcon",
          "setSignature": {
            "name": "startIcon",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 69,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "startIcon",
            "type": "string",
            "returnType": "string",
            "line": 72
          }
        },
        "endIcon": {
          "name": "endIcon",
          "setSignature": {
            "name": "endIcon",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 77,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "endIcon",
            "type": "string",
            "returnType": "string",
            "line": 80
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 85,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 88
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 93,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 96
          }
        },
        "type": {
          "name": "type",
          "getSignature": {
            "name": "type",
            "type": "string",
            "returnType": "string",
            "line": 105
          }
        },
        "form": {
          "name": "form",
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 109
          }
        }
      }
    },
    {
      "name": "SbbStatus",
      "id": "directive-SbbStatus-3f3c9eec5b4d03913f6c6445051a822cda91f03560e0b4951c2066181bf36a9e81afdbdfca371285fa3e1a530bd24b994fad4c7f79c7f8dab4fcd8335d923e08",
      "file": "src/angular/status/status.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport type { SbbStatusElement, SbbStatusType } from '@sbb-esta/lyne-elements/status.js';\nimport '@sbb-esta/lyne-elements/status.js';\nimport { SbbTitleLevel } from '@sbb-esta/lyne-elements/title.js';\n\n@Directive({\n  selector: 'sbb-status',\n})\nexport class SbbStatus {\n  #element: ElementRef<SbbStatusElement> = inject(ElementRef<SbbStatusElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set type(value: SbbStatusType) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): SbbStatusType {\n    return this.#element.nativeElement.type;\n  }\n\n  @Input({ alias: 'title-content' })\n  public set titleContent(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleContent = value));\n  }\n  public get titleContent(): string {\n    return this.#element.nativeElement.titleContent;\n  }\n\n  @Input({ alias: 'title-level' })\n  public set titleLevel(value: SbbTitleLevel) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleLevel = value));\n  }\n  public get titleLevel(): SbbTitleLevel {\n    return this.#element.nativeElement.titleLevel;\n  }\n\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n}\n",
      "selector": "sbb-status",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 38,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "title-content",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "title-level",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 30,
          "type": "SbbTitleLevel",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "SbbStatusType",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbStatusType",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 14,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbStatusType",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "SbbStatusType",
            "line": 17
          }
        },
        "titleContent": {
          "name": "titleContent",
          "setSignature": {
            "name": "titleContent",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 22,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleContent",
            "type": "string",
            "returnType": "string",
            "line": 25
          }
        },
        "titleLevel": {
          "name": "titleLevel",
          "setSignature": {
            "name": "titleLevel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 30,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleLevel",
            "type": "",
            "returnType": "SbbTitleLevel",
            "line": 33
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 38,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 41
          }
        }
      }
    },
    {
      "name": "SbbStep",
      "id": "directive-SbbStep-b4090710460566e36bd51b9fc181fe7ae41df6bc0972242d30706dd04680c3a03ae0e215d7d04ccc864dc2215d19ad6c2a5eca20ccc342282c279a33803b3c39",
      "file": "src/angular/stepper/step/step.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Output } from '@angular/core';\nimport { SbbStepLabelElement } from '@sbb-esta/lyne-elements/stepper/step-label.js';\nimport type {\n  SbbStepElement,\n  SbbStepValidateEventDetails,\n} from '@sbb-esta/lyne-elements/stepper/step.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/stepper/step.js';\n\n@Directive({\n  selector: 'sbb-step',\n})\nexport class SbbStep {\n  #element: ElementRef<SbbStepElement> = inject(ElementRef<SbbStepElement>);\n\n  @Output() public validate: Observable<SbbStepValidateEventDetails> =\n    fromEvent<SbbStepValidateEventDetails>(this.#element.nativeElement, 'validate');\n\n  public get label(): SbbStepLabelElement | null {\n    return this.#element.nativeElement.label;\n  }\n}\n",
      "selector": "sbb-step",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [],
      "outputsClass": [
        {
          "name": "validate",
          "defaultValue": "fromEvent<SbbStepValidateEventDetails>(this.#element.nativeElement, 'validate')",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "Observable<SbbStepValidateEventDetails>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "label": {
          "name": "label",
          "getSignature": {
            "name": "label",
            "type": "",
            "returnType": "SbbStepLabelElement | null",
            "line": 19
          }
        }
      }
    },
    {
      "name": "SbbStepLabel",
      "id": "directive-SbbStepLabel-b86b98bb729e6913dab74ea324130145027aca7b12b90d501568f5f732761f508a18a91946005d1ec870f94128ea89f7e02564d7374b31d89cb0f93414599242",
      "file": "src/angular/stepper/step-label/step-label.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbButtonType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport type { SbbStepLabelElement } from '@sbb-esta/lyne-elements/stepper/step-label.js';\nimport { SbbStepElement } from '@sbb-esta/lyne-elements/stepper/step.js';\nimport '@sbb-esta/lyne-elements/stepper/step-label.js';\n\n@Directive({\n  selector: 'sbb-step-label',\n})\nexport class SbbStepLabel {\n  #element: ElementRef<SbbStepLabelElement> = inject(ElementRef<SbbStepLabelElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set form(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.form = value));\n  }\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set type(value: SbbButtonType) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): SbbButtonType {\n    return this.#element.nativeElement.type;\n  }\n\n  public get step(): SbbStepElement | null {\n    return this.#element.nativeElement.step;\n  }\n}\n",
      "selector": "sbb-step-label",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "form",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "string",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 56,
          "type": "SbbButtonType",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 48,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 19
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 24,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 27
          }
        },
        "form": {
          "name": "form",
          "setSignature": {
            "name": "form",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 32,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 35
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 40,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 43
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 48,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 51
          }
        },
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 56,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "SbbButtonType",
            "line": 59
          }
        },
        "step": {
          "name": "step",
          "getSignature": {
            "name": "step",
            "type": "",
            "returnType": "SbbStepElement | null",
            "line": 63
          }
        }
      }
    },
    {
      "name": "SbbStepper",
      "id": "directive-SbbStepper-56b82a93102de74111e9fbc39e7373400ce356afff7fcee81d745ecfa6017d62fdb822539be6a0953501c70779e936579434b01d4c320a8f0895f6276b3cffcc",
      "file": "src/angular/stepper/stepper/stepper.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbHorizontalFrom, SbbOrientation } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport { SbbStepElement } from '@sbb-esta/lyne-elements/stepper/step.js';\nimport type { SbbStepperElement } from '@sbb-esta/lyne-elements/stepper/stepper.js';\nimport '@sbb-esta/lyne-elements/stepper/stepper.js';\n\n@Directive({\n  selector: 'sbb-stepper',\n})\nexport class SbbStepper {\n  #element: ElementRef<SbbStepperElement> = inject(ElementRef<SbbStepperElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set linear(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.linear = value));\n  }\n  public get linear(): boolean {\n    return this.#element.nativeElement.linear;\n  }\n\n  @Input({ alias: 'horizontal-from' })\n  public set horizontalFrom(value: SbbHorizontalFrom | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.horizontalFrom = value));\n  }\n  public get horizontalFrom(): SbbHorizontalFrom | null {\n    return this.#element.nativeElement.horizontalFrom;\n  }\n\n  @Input()\n  public set orientation(value: SbbOrientation) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.orientation = value));\n  }\n  public get orientation(): SbbOrientation {\n    return this.#element.nativeElement.orientation;\n  }\n\n  @Input()\n  public set size(value: 's' | 'm') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): 's' | 'm' {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input()\n  public set selected(value: SbbStepElement | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.selected = value));\n  }\n  public get selected(): SbbStepElement | null {\n    return this.#element.nativeElement.selected;\n  }\n\n  @Input({ alias: 'selected-index' })\n  public set selectedIndex(value: number | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.selectedIndex = value));\n  }\n  public get selectedIndex(): number | null {\n    return this.#element.nativeElement.selectedIndex;\n  }\n\n  public get steps(): SbbStepElement[] {\n    return this.#element.nativeElement.steps;\n  }\n\n  public next(): void {\n    return this.#element.nativeElement.next();\n  }\n\n  public previous(): void {\n    return this.#element.nativeElement.previous();\n  }\n\n  public reset(): void {\n    return this.#element.nativeElement.reset();\n  }\n}\n",
      "selector": "sbb-stepper",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "horizontal-from",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "SbbHorizontalFrom | null",
          "decorators": []
        },
        {
          "required": false,
          "name": "linear",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "orientation",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "SbbOrientation",
          "decorators": []
        },
        {
          "name": "selected",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 48,
          "type": "SbbStepElement | null",
          "decorators": []
        },
        {
          "required": false,
          "name": "selected-index",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 56,
          "type": "number | null",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "\"s\" | \"m\"",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "next",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 67,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        },
        {
          "name": "previous",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 71,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        },
        {
          "name": "reset",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 75,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": [],
      "accessors": {
        "linear": {
          "name": "linear",
          "setSignature": {
            "name": "linear",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "linear",
            "type": "boolean",
            "returnType": "boolean",
            "line": 19
          }
        },
        "horizontalFrom": {
          "name": "horizontalFrom",
          "setSignature": {
            "name": "horizontalFrom",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbHorizontalFrom | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 24,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbHorizontalFrom | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "horizontalFrom",
            "type": "",
            "returnType": "SbbHorizontalFrom | null",
            "line": 27
          }
        },
        "orientation": {
          "name": "orientation",
          "setSignature": {
            "name": "orientation",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbOrientation",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 32,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbOrientation",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "orientation",
            "type": "",
            "returnType": "SbbOrientation",
            "line": 35
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"s\" | \"m\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 40,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"s\" | \"m\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "\"s\" | \"m\"",
            "line": 43
          }
        },
        "selected": {
          "name": "selected",
          "setSignature": {
            "name": "selected",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbStepElement | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 48,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbStepElement | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "selected",
            "type": "",
            "returnType": "SbbStepElement | null",
            "line": 51
          }
        },
        "selectedIndex": {
          "name": "selectedIndex",
          "setSignature": {
            "name": "selectedIndex",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "number | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 56,
            "jsdoctags": [
              {
                "name": "value",
                "type": "number | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "selectedIndex",
            "type": "",
            "returnType": "number | null",
            "line": 59
          }
        },
        "steps": {
          "name": "steps",
          "getSignature": {
            "name": "steps",
            "type": "[]",
            "returnType": "SbbStepElement[]",
            "line": 63
          }
        }
      }
    },
    {
      "name": "SbbStickyBar",
      "id": "directive-SbbStickyBar-2e35766f0ea1ef9d22b843b61577e7cae41603e38daab7f7edc7a66b5d22634c2160478a4b5a3710ef41c452561b0f86cb35a36c311203cd1a75daced160405f",
      "file": "src/angular/container/sticky-bar/sticky-bar.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone, Output } from '@angular/core';\nimport type { SbbStickyBarElement } from '@sbb-esta/lyne-elements/container/sticky-bar.js';\nimport { fromEvent, type Observable } from 'rxjs';\n\nimport '@sbb-esta/lyne-elements/container/sticky-bar.js';\n\n@Directive({\n  selector: 'sbb-sticky-bar',\n})\nexport class SbbStickyBar {\n  #element: ElementRef<SbbStickyBarElement> = inject(ElementRef<SbbStickyBarElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set color(value: 'white' | 'milk' | 'midnight' | 'charcoal' | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.color = value));\n  }\n  public get color(): 'white' | 'milk' | 'midnight' | 'charcoal' | null {\n    return this.#element.nativeElement.color;\n  }\n\n  @Output() public willStick: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willStick',\n  );\n\n  @Output() public didStick: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didStick',\n  );\n\n  @Output() public willUnstick: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willUnstick',\n  );\n\n  @Output() public didUnstick: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didUnstick',\n  );\n\n  public stick(): void {\n    return this.#element.nativeElement.stick();\n  }\n\n  public unstick(): void {\n    return this.#element.nativeElement.unstick();\n  }\n}\n",
      "selector": "sbb-sticky-bar",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "name": "color",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "\"white\" | \"milk\" | \"midnight\" | \"charcoal\" | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "didStick",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didStick',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "Observable<void>"
        },
        {
          "name": "didUnstick",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didUnstick',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 37,
          "type": "Observable<void>"
        },
        {
          "name": "willStick",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willStick',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "Observable<void>"
        },
        {
          "name": "willUnstick",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willUnstick',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "stick",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 42,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        },
        {
          "name": "unstick",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 46,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": [],
      "accessors": {
        "color": {
          "name": "color",
          "setSignature": {
            "name": "color",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"white\" | \"milk\" | \"midnight\" | \"charcoal\" | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 15,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"white\" | \"milk\" | \"midnight\" | \"charcoal\" | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "color",
            "type": "",
            "returnType": "\"white\" | \"milk\" | \"midnight\" | \"charcoal\" | null",
            "line": 18
          }
        }
      }
    },
    {
      "name": "SbbTab",
      "id": "directive-SbbTab-1f78c6b5b03ae4c73adff2e4a8ce1675b3f1905c8b243cafc24c92f2f1ae812e3078ae31ea02bd08bd0edd4af777505315a09d105650b8b6fd8764d6430611be",
      "file": "src/angular/tabs/tab/tab.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject } from '@angular/core';\nimport { SbbTabLabelElement } from '@sbb-esta/lyne-elements/tabs/tab-label.js';\nimport type { SbbTabElement } from '@sbb-esta/lyne-elements/tabs/tab.js';\nimport '@sbb-esta/lyne-elements/tabs/tab.js';\n\n@Directive({\n  selector: 'sbb-tab',\n})\nexport class SbbTab {\n  #element: ElementRef<SbbTabElement> = inject(ElementRef<SbbTabElement>);\n\n  public get label(): SbbTabLabelElement | null {\n    return this.#element.nativeElement.label;\n  }\n}\n",
      "selector": "sbb-tab",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "label": {
          "name": "label",
          "getSignature": {
            "name": "label",
            "type": "",
            "returnType": "SbbTabLabelElement | null",
            "line": 12
          }
        }
      }
    },
    {
      "name": "SbbTabGroup",
      "id": "directive-SbbTabGroup-48a2889b92008d28dbd3740d5cec85b9c0e8c699336501cd5a97160e1d18e6d3551cfc317255a1ff70471c5e33e4b2cf77c05ffea75549d4336ccf476829a81e",
      "file": "src/angular/tabs/tab-group/tab-group.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {\n  Directive,\n  ElementRef,\n  inject,\n  Input,\n  NgZone,\n  numberAttribute,\n  Output,\n} from '@angular/core';\nimport type {\n  InterfaceSbbTabGroupTab,\n  SbbTabChangedEventDetails,\n  SbbTabGroupElement,\n} from '@sbb-esta/lyne-elements/tabs/tab-group.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/tabs/tab-group.js';\n\n@Directive({\n  selector: 'sbb-tab-group',\n})\nexport class SbbTabGroup {\n  #element: ElementRef<SbbTabGroupElement> = inject(ElementRef<SbbTabGroupElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: InterfaceSbbTabGroupTab['size']) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): InterfaceSbbTabGroupTab['size'] {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ alias: 'initial-selected-index', transform: numberAttribute })\n  public set initialSelectedIndex(value: number) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.initialSelectedIndex = value),\n    );\n  }\n  public get initialSelectedIndex(): number {\n    return this.#element.nativeElement.initialSelectedIndex;\n  }\n\n  @Output() public didChange: Observable<SbbTabChangedEventDetails> =\n    fromEvent<SbbTabChangedEventDetails>(this.#element.nativeElement, 'didChange');\n\n  public disableTab(tabIndex: number): void {\n    return this.#element.nativeElement.disableTab(tabIndex);\n  }\n\n  public enableTab(tabIndex: number): void {\n    return this.#element.nativeElement.enableTab(tabIndex);\n  }\n\n  public activateTab(tabIndex: number): void {\n    return this.#element.nativeElement.activateTab(tabIndex);\n  }\n}\n",
      "selector": "sbb-tab-group",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "initial-selected-index",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "number",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "didChange",
          "defaultValue": "fromEvent<SbbTabChangedEventDetails>(this.#element.nativeElement, 'didChange')",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "Observable<SbbTabChangedEventDetails>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "activateTab",
          "args": [
            {
              "name": "tabIndex",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 54,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": "tabIndex",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "disableTab",
          "args": [
            {
              "name": "tabIndex",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 46,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": "tabIndex",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "enableTab",
          "args": [
            {
              "name": "tabIndex",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 50,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": "tabIndex",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "InterfaceSbbTabGroupTab",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "InterfaceSbbTabGroupTab",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "",
            "line": 29
          }
        },
        "initialSelectedIndex": {
          "name": "initialSelectedIndex",
          "setSignature": {
            "name": "initialSelectedIndex",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 34,
            "jsdoctags": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "initialSelectedIndex",
            "type": "number",
            "returnType": "number",
            "line": 39
          }
        }
      }
    },
    {
      "name": "SbbTabLabel",
      "id": "directive-SbbTabLabel-d9512b258d70619c5657a5d27fe8d850a029bbf16918071091c65bed6b80cb9558da46c52b2a7849aa9d9683679325a4cef2a18d7f9c5bc12823270084257028",
      "file": "src/angular/tabs/tab-label/tab-label.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbTabLabelElement } from '@sbb-esta/lyne-elements/tabs/tab-label.js';\nimport '@sbb-esta/lyne-elements/tabs/tab-label.js';\nimport { SbbTitleLevel } from '@sbb-esta/lyne-elements/title.js';\n\n@Directive({\n  selector: 'sbb-tab-label',\n})\nexport class SbbTabLabel {\n  #element: ElementRef<SbbTabLabelElement> = inject(ElementRef<SbbTabLabelElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set level(value: SbbTitleLevel) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.level = value));\n  }\n  public get level(): SbbTitleLevel {\n    return this.#element.nativeElement.level;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set active(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.active = value));\n  }\n  public get active(): boolean {\n    return this.#element.nativeElement.active;\n  }\n\n  @Input()\n  public set amount(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.amount = value));\n  }\n  public get amount(): string {\n    return this.#element.nativeElement.amount;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n}\n",
      "selector": "sbb-tab-label",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "active",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "amount",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 31,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 39,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 47,
          "type": "string",
          "decorators": []
        },
        {
          "name": "level",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "SbbTitleLevel",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "level": {
          "name": "level",
          "setSignature": {
            "name": "level",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 15,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "level",
            "type": "",
            "returnType": "SbbTitleLevel",
            "line": 18
          }
        },
        "active": {
          "name": "active",
          "setSignature": {
            "name": "active",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 23,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "active",
            "type": "boolean",
            "returnType": "boolean",
            "line": 26
          }
        },
        "amount": {
          "name": "amount",
          "setSignature": {
            "name": "amount",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 31,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "amount",
            "type": "string",
            "returnType": "string",
            "line": 34
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 39,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 42
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 47,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 50
          }
        }
      }
    },
    {
      "name": "SbbTableWrapper",
      "id": "directive-SbbTableWrapper-dca030d2672af6577eacf9a8f510131910203c3f18100d54a261495068f3a1c44ba0819ade20ea8d4a71e1f2e1f698731d72cd2244b356a26dcd8b4b5f25e178",
      "file": "src/angular/table/table-wrapper/table-wrapper.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbTableWrapperElement } from '@sbb-esta/lyne-elements/table/table-wrapper.js';\nimport '@sbb-esta/lyne-elements/table/table-wrapper.js';\n\n@Directive({\n  selector: 'sbb-table-wrapper',\n})\nexport class SbbTableWrapper {\n  #element: ElementRef<SbbTableWrapperElement> = inject(ElementRef<SbbTableWrapperElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n}\n",
      "selector": "sbb-table-wrapper",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 14,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 17
          }
        }
      }
    },
    {
      "name": "SbbTag",
      "id": "directive-SbbTag-38969adc5ab93c3e949f5bfe49b87c54be7ced1f4cb6990139ab5b82dc2b8afe1c7f0ac89477f796cc59bf03c83d8c4fd47da3d11ceb581354d977b3b3a2d266",
      "file": "src/angular/tag/tag/tag.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone, Output } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbButtonType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport type { SbbTagElement, SbbTagSize } from '@sbb-esta/lyne-elements/tag/tag.js';\nimport { fromEvent, type Observable } from 'rxjs';\n\nimport '@sbb-esta/lyne-elements/tag/tag.js';\n\n@Directive({\n  selector: 'sbb-tag',\n})\nexport class SbbTag {\n  #element: ElementRef<SbbTagElement> = inject(ElementRef<SbbTagElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set amount(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.amount = value));\n  }\n  public get amount(): string {\n    return this.#element.nativeElement.amount;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set checked(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.checked = value));\n  }\n  public get checked(): boolean {\n    return this.#element.nativeElement.checked;\n  }\n\n  @Input()\n  public set size(value: SbbTagSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbTagSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input({ alias: 'disabled-interactive', transform: booleanAttribute })\n  public set disabledInteractive(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabledInteractive = value));\n  }\n  public get disabledInteractive(): boolean {\n    return this.#element.nativeElement.disabledInteractive;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set form(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.form = value));\n  }\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set type(value: SbbButtonType) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): SbbButtonType {\n    return this.#element.nativeElement.type;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public input: Observable<void> = fromEvent<void>(this.#element.nativeElement, 'input');\n\n  @Output() public didChange: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didChange',\n  );\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public change: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'change',\n  );\n}\n",
      "selector": "sbb-tag",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "name": "amount",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "checked",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 57,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled-interactive",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 49,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "form",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 65,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 41,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 73,
          "type": "string",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "SbbTagSize",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 89,
          "type": "SbbButtonType",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 81,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "change",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'change',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 105,
          "type": "Observable<void>"
        },
        {
          "name": "didChange",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didChange',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 99,
          "type": "Observable<void>"
        },
        {
          "name": "input",
          "defaultValue": "fromEvent<void>(this.#element.nativeElement, 'input')",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 97,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "amount": {
          "name": "amount",
          "setSignature": {
            "name": "amount",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "amount",
            "type": "string",
            "returnType": "string",
            "line": 20
          }
        },
        "checked": {
          "name": "checked",
          "setSignature": {
            "name": "checked",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "checked",
            "type": "boolean",
            "returnType": "boolean",
            "line": 28
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTagSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 33,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTagSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbTagSize",
            "line": 36
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 41,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 44
          }
        },
        "disabledInteractive": {
          "name": "disabledInteractive",
          "setSignature": {
            "name": "disabledInteractive",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 49,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabledInteractive",
            "type": "boolean",
            "returnType": "boolean",
            "line": 52
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 57,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 60
          }
        },
        "form": {
          "name": "form",
          "setSignature": {
            "name": "form",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 65,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 68
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 73,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 76
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 81,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 84
          }
        },
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 89,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "SbbButtonType",
            "line": 92
          }
        }
      }
    },
    {
      "name": "SbbTagGroup",
      "id": "directive-SbbTagGroup-e6a2c5f90d0336560c9c4997ccb95a92ce0fa0896fc111c235c23fa9c4ed3ee7987ea6351e0ec534a9e61b599ac0c1deeb9ca2491ff5d3d935fafb6e7a6a2bff",
      "file": "src/angular/tag/tag-group/tag-group.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbTagGroupElement } from '@sbb-esta/lyne-elements/tag/tag-group.js';\nimport '@sbb-esta/lyne-elements/tag/tag-group.js';\nimport { SbbTagElement, SbbTagSize } from '@sbb-esta/lyne-elements/tag/tag.js';\n\n@Directive({\n  selector: 'sbb-tag-group',\n})\nexport class SbbTagGroup {\n  #element: ElementRef<SbbTagGroupElement> = inject(ElementRef<SbbTagGroupElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ alias: 'list-accessibility-label' })\n  public set listAccessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.listAccessibilityLabel = value),\n    );\n  }\n  public get listAccessibilityLabel(): string {\n    return this.#element.nativeElement.listAccessibilityLabel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set multiple(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.multiple = value));\n  }\n  public get multiple(): boolean {\n    return this.#element.nativeElement.multiple;\n  }\n\n  @Input()\n  public set size(value: SbbTagSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbTagSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input()\n  public set value(value: string | (string | null)[] | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | (string | null)[] | null {\n    return this.#element.nativeElement.value;\n  }\n\n  public get tags(): SbbTagElement[] {\n    return this.#element.nativeElement.tags;\n  }\n}\n",
      "selector": "sbb-tag-group",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "list-accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "multiple",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "SbbTagSize",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 41,
          "type": "string | [] | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "listAccessibilityLabel": {
          "name": "listAccessibilityLabel",
          "setSignature": {
            "name": "listAccessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 15,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "listAccessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 20
          }
        },
        "multiple": {
          "name": "multiple",
          "setSignature": {
            "name": "multiple",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "multiple",
            "type": "boolean",
            "returnType": "boolean",
            "line": 28
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTagSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 33,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTagSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbTagSize",
            "line": 36
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | (string | null)[] | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 41,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | (string | null)[] | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | [] | null",
            "line": 44
          }
        },
        "tags": {
          "name": "tags",
          "getSignature": {
            "name": "tags",
            "type": "[]",
            "returnType": "SbbTagElement[]",
            "line": 48
          }
        }
      }
    },
    {
      "name": "SbbTeaser",
      "id": "directive-SbbTeaser-e912a239d48fef1e1be39e397c41f587bad36d6437a5b337c5b2378c2effa86ba02b3750f7b307ae4d37b9d92c19f1d320529dbaaa73cd8e17865bd6a5c8c7c4",
      "file": "src/angular/teaser/teaser.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute, SbbRouterLinkSupportMixin } from '@sbb-esta/lyne-angular/core';\nimport { LinkTargetType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport type { SbbTeaserElement } from '@sbb-esta/lyne-elements/teaser.js';\nimport { SbbTitleLevel } from '@sbb-esta/lyne-elements/title.js';\nimport '@sbb-esta/lyne-elements/teaser.js';\n\n@Directive({\n  selector: 'sbb-teaser',\n})\nexport class SbbTeaser extends SbbRouterLinkSupportMixin(class {}) {\n  #element: ElementRef<SbbTeaserElement> = inject(ElementRef<SbbTeaserElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set alignment(value: 'after-centered' | 'after' | 'below') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.alignment = value));\n  }\n  public get alignment(): 'after-centered' | 'after' | 'below' {\n    return this.#element.nativeElement.alignment;\n  }\n\n  @Input({ alias: 'title-level' })\n  public set titleLevel(value: SbbTitleLevel) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleLevel = value));\n  }\n  public get titleLevel(): SbbTitleLevel {\n    return this.#element.nativeElement.titleLevel;\n  }\n\n  @Input({ alias: 'title-content' })\n  public set titleContent(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleContent = value));\n  }\n  public get titleContent(): string {\n    return this.#element.nativeElement.titleContent;\n  }\n\n  @Input({ alias: 'chip-content' })\n  public set chipContent(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.chipContent = value));\n  }\n  public get chipContent(): string {\n    return this.#element.nativeElement.chipContent;\n  }\n\n  @Input()\n  public set href(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.href = value));\n  }\n  public get href(): string {\n    return this.#element.nativeElement.href;\n  }\n\n  @Input()\n  public set target(value: LinkTargetType | string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.target = value));\n  }\n  public get target(): LinkTargetType | string {\n    return this.#element.nativeElement.target;\n  }\n\n  @Input()\n  public set rel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.rel = value));\n  }\n  public get rel(): string {\n    return this.#element.nativeElement.rel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set download(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.download = value));\n  }\n  public get download(): boolean {\n    return this.#element.nativeElement.download;\n  }\n\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n\n  @Input({ alias: 'accessibility-current' })\n  public set accessibilityCurrent(value: string) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.accessibilityCurrent = value),\n    );\n  }\n  public get accessibilityCurrent(): string {\n    return this.#element.nativeElement.accessibilityCurrent;\n  }\n}\n",
      "selector": "sbb-teaser",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-current",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 88,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 80,
          "type": "string",
          "decorators": []
        },
        {
          "name": "alignment",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "\"after-centered\" | \"after\" | \"below\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "chip-content",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "download",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 72,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "href",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 48,
          "type": "string",
          "decorators": []
        },
        {
          "name": "rel",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 64,
          "type": "string",
          "decorators": []
        },
        {
          "name": "target",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 56,
          "type": "LinkTargetType | string",
          "decorators": []
        },
        {
          "required": false,
          "name": "title-content",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "title-level",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "SbbTitleLevel",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": ["SbbRouterLinkSupportMixin(class {})"],
      "accessors": {
        "alignment": {
          "name": "alignment",
          "setSignature": {
            "name": "alignment",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"after-centered\" | \"after\" | \"below\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"after-centered\" | \"after\" | \"below\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "alignment",
            "type": "",
            "returnType": "\"after-centered\" | \"after\" | \"below\"",
            "line": 19
          }
        },
        "titleLevel": {
          "name": "titleLevel",
          "setSignature": {
            "name": "titleLevel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 24,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleLevel",
            "type": "",
            "returnType": "SbbTitleLevel",
            "line": 27
          }
        },
        "titleContent": {
          "name": "titleContent",
          "setSignature": {
            "name": "titleContent",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 32,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleContent",
            "type": "string",
            "returnType": "string",
            "line": 35
          }
        },
        "chipContent": {
          "name": "chipContent",
          "setSignature": {
            "name": "chipContent",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 40,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "chipContent",
            "type": "string",
            "returnType": "string",
            "line": 43
          }
        },
        "href": {
          "name": "href",
          "setSignature": {
            "name": "href",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 48,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "href",
            "type": "string",
            "returnType": "string",
            "line": 51
          }
        },
        "target": {
          "name": "target",
          "setSignature": {
            "name": "target",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 56,
            "jsdoctags": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "target",
            "type": "",
            "returnType": "LinkTargetType | string",
            "line": 59
          }
        },
        "rel": {
          "name": "rel",
          "setSignature": {
            "name": "rel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 64,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "rel",
            "type": "string",
            "returnType": "string",
            "line": 67
          }
        },
        "download": {
          "name": "download",
          "setSignature": {
            "name": "download",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 72,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "download",
            "type": "boolean",
            "returnType": "boolean",
            "line": 75
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 80,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 83
          }
        },
        "accessibilityCurrent": {
          "name": "accessibilityCurrent",
          "setSignature": {
            "name": "accessibilityCurrent",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 88,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityCurrent",
            "type": "string",
            "returnType": "string",
            "line": 93
          }
        }
      }
    },
    {
      "name": "SbbTeaserHero",
      "id": "directive-SbbTeaserHero-022c98caf118c41dcdcc3aa0ef3035beac25f37e5a5f0f1e98ed71e38a332fd1c8fb2848af1fbfa769296d816693808d28e3986285f4706c6ef734a89a05467c",
      "file": "src/angular/teaser-hero/teaser-hero.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute, SbbRouterLinkSupportMixin } from '@sbb-esta/lyne-angular/core';\nimport { LinkTargetType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport type { SbbTeaserHeroElement } from '@sbb-esta/lyne-elements/teaser-hero.js';\nimport '@sbb-esta/lyne-elements/teaser-hero.js';\n\n@Directive({\n  selector: 'sbb-teaser-hero',\n})\nexport class SbbTeaserHero extends SbbRouterLinkSupportMixin(class {}) {\n  #element: ElementRef<SbbTeaserHeroElement> = inject(ElementRef<SbbTeaserHeroElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ alias: 'link-content' })\n  public set linkContent(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.linkContent = value));\n  }\n  public get linkContent(): string {\n    return this.#element.nativeElement.linkContent;\n  }\n\n  @Input()\n  public set href(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.href = value));\n  }\n  public get href(): string {\n    return this.#element.nativeElement.href;\n  }\n\n  @Input()\n  public set target(value: LinkTargetType | string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.target = value));\n  }\n  public get target(): LinkTargetType | string {\n    return this.#element.nativeElement.target;\n  }\n\n  @Input()\n  public set rel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.rel = value));\n  }\n  public get rel(): string {\n    return this.#element.nativeElement.rel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set download(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.download = value));\n  }\n  public get download(): boolean {\n    return this.#element.nativeElement.download;\n  }\n\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n\n  @Input({ alias: 'accessibility-current' })\n  public set accessibilityCurrent(value: string) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.accessibilityCurrent = value),\n    );\n  }\n  public get accessibilityCurrent(): string {\n    return this.#element.nativeElement.accessibilityCurrent;\n  }\n}\n",
      "selector": "sbb-teaser-hero",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-current",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 63,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 55,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "download",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 47,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "href",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "link-content",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "string",
          "decorators": []
        },
        {
          "name": "rel",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 39,
          "type": "string",
          "decorators": []
        },
        {
          "name": "target",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 31,
          "type": "LinkTargetType | string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": ["SbbRouterLinkSupportMixin(class {})"],
      "accessors": {
        "linkContent": {
          "name": "linkContent",
          "setSignature": {
            "name": "linkContent",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 15,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "linkContent",
            "type": "string",
            "returnType": "string",
            "line": 18
          }
        },
        "href": {
          "name": "href",
          "setSignature": {
            "name": "href",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 23,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "href",
            "type": "string",
            "returnType": "string",
            "line": 26
          }
        },
        "target": {
          "name": "target",
          "setSignature": {
            "name": "target",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 31,
            "jsdoctags": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "target",
            "type": "",
            "returnType": "LinkTargetType | string",
            "line": 34
          }
        },
        "rel": {
          "name": "rel",
          "setSignature": {
            "name": "rel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 39,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "rel",
            "type": "string",
            "returnType": "string",
            "line": 42
          }
        },
        "download": {
          "name": "download",
          "setSignature": {
            "name": "download",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 47,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "download",
            "type": "boolean",
            "returnType": "boolean",
            "line": 50
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 55,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 58
          }
        },
        "accessibilityCurrent": {
          "name": "accessibilityCurrent",
          "setSignature": {
            "name": "accessibilityCurrent",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 63,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityCurrent",
            "type": "string",
            "returnType": "string",
            "line": 68
          }
        }
      }
    },
    {
      "name": "SbbTeaserProduct",
      "id": "directive-SbbTeaserProduct-891db9b36f66d030b51669fb1d60e7a2f5a7265d2671b607589c146644440d6a0bb7f130da0df133b481b3f813a8616998091bdac320516cfe4c95233941c9e6",
      "file": "src/angular/teaser-product/teaser-product/teaser-product.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute, SbbRouterLinkSupportMixin } from '@sbb-esta/lyne-angular/core';\nimport { LinkTargetType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport type { SbbTeaserProductElement } from '@sbb-esta/lyne-elements/teaser-product/teaser-product.js';\nimport '@sbb-esta/lyne-elements/teaser-product/teaser-product.js';\n\n@Directive({\n  selector: 'sbb-teaser-product',\n})\nexport class SbbTeaserProduct extends SbbRouterLinkSupportMixin(class {}) {\n  #element: ElementRef<SbbTeaserProductElement> = inject(ElementRef<SbbTeaserProductElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ alias: 'image-alignment' })\n  public set imageAlignment(value: 'after' | 'before') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.imageAlignment = value));\n  }\n  public get imageAlignment(): 'after' | 'before' {\n    return this.#element.nativeElement.imageAlignment;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input()\n  public set href(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.href = value));\n  }\n  public get href(): string {\n    return this.#element.nativeElement.href;\n  }\n\n  @Input()\n  public set target(value: LinkTargetType | string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.target = value));\n  }\n  public get target(): LinkTargetType | string {\n    return this.#element.nativeElement.target;\n  }\n\n  @Input()\n  public set rel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.rel = value));\n  }\n  public get rel(): string {\n    return this.#element.nativeElement.rel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set download(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.download = value));\n  }\n  public get download(): boolean {\n    return this.#element.nativeElement.download;\n  }\n\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n\n  @Input({ alias: 'accessibility-current' })\n  public set accessibilityCurrent(value: string) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.accessibilityCurrent = value),\n    );\n  }\n  public get accessibilityCurrent(): string {\n    return this.#element.nativeElement.accessibilityCurrent;\n  }\n}\n",
      "selector": "sbb-teaser-product",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-current",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 71,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 63,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "download",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 55,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "href",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 31,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "image-alignment",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "\"after\" | \"before\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "rel",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 47,
          "type": "string",
          "decorators": []
        },
        {
          "name": "target",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 39,
          "type": "LinkTargetType | string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": ["SbbRouterLinkSupportMixin(class {})"],
      "accessors": {
        "imageAlignment": {
          "name": "imageAlignment",
          "setSignature": {
            "name": "imageAlignment",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"after\" | \"before\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 15,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"after\" | \"before\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "imageAlignment",
            "type": "",
            "returnType": "\"after\" | \"before\"",
            "line": 18
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 23,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 26
          }
        },
        "href": {
          "name": "href",
          "setSignature": {
            "name": "href",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 31,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "href",
            "type": "string",
            "returnType": "string",
            "line": 34
          }
        },
        "target": {
          "name": "target",
          "setSignature": {
            "name": "target",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 39,
            "jsdoctags": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "target",
            "type": "",
            "returnType": "LinkTargetType | string",
            "line": 42
          }
        },
        "rel": {
          "name": "rel",
          "setSignature": {
            "name": "rel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 47,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "rel",
            "type": "string",
            "returnType": "string",
            "line": 50
          }
        },
        "download": {
          "name": "download",
          "setSignature": {
            "name": "download",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 55,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "download",
            "type": "boolean",
            "returnType": "boolean",
            "line": 58
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 63,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 66
          }
        },
        "accessibilityCurrent": {
          "name": "accessibilityCurrent",
          "setSignature": {
            "name": "accessibilityCurrent",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 71,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityCurrent",
            "type": "string",
            "returnType": "string",
            "line": 76
          }
        }
      }
    },
    {
      "name": "SbbTeaserProductStatic",
      "id": "directive-SbbTeaserProductStatic-a78e7bfc44e6b0a09c05de097a6fbf2a35c40db531fca6771e401e2bab9c594abba12257906023296ea89e3c75816a225ca730ab554718b4c8f97d98509bab0a",
      "file": "src/angular/teaser-product/teaser-product-static/teaser-product-static.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbTeaserProductStaticElement } from '@sbb-esta/lyne-elements/teaser-product/teaser-product-static.js';\nimport '@sbb-esta/lyne-elements/teaser-product/teaser-product-static.js';\n\n@Directive({\n  selector: 'sbb-teaser-product-static',\n})\nexport class SbbTeaserProductStatic {\n  #element: ElementRef<SbbTeaserProductStaticElement> = inject(\n    ElementRef<SbbTeaserProductStaticElement>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ alias: 'image-alignment' })\n  public set imageAlignment(value: 'after' | 'before') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.imageAlignment = value));\n  }\n  public get imageAlignment(): 'after' | 'before' {\n    return this.#element.nativeElement.imageAlignment;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n}\n",
      "selector": "sbb-teaser-product-static",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "image-alignment",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "\"after\" | \"before\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "imageAlignment": {
          "name": "imageAlignment",
          "setSignature": {
            "name": "imageAlignment",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"after\" | \"before\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"after\" | \"before\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "imageAlignment",
            "type": "",
            "returnType": "\"after\" | \"before\"",
            "line": 19
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 24,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 27
          }
        }
      }
    },
    {
      "name": "SbbTimeInput",
      "id": "directive-SbbTimeInput-fd004ca8c8153ea3d481a894f7cb894fed0633a9d848268da8eb2ef0fe40fc61771e628c07fb77a9e53c92755b0c8c4022cac56ddc6ace259382258cc87696e0",
      "file": "src/angular/time-input/time-input.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone, Output } from '@angular/core';\nimport { SbbValidationChangeEvent } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport type { SbbTimeInputElement } from '@sbb-esta/lyne-elements/time-input.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/time-input.js';\n\n@Directive({\n  selector: 'sbb-time-input',\n})\nexport class SbbTimeInput {\n  #element: ElementRef<SbbTimeInputElement> = inject(ElementRef<SbbTimeInputElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set input(value: string | HTMLElement | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.input = value));\n  }\n  public get input(): string | HTMLElement | null {\n    return this.#element.nativeElement.input;\n  }\n\n  @Input()\n  public set valueAsDate(value: Date | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.valueAsDate = value));\n  }\n  public get valueAsDate(): Date | null {\n    return this.#element.nativeElement.valueAsDate;\n  }\n\n  @Output() public didChange: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didChange',\n  );\n\n  @Output() public validationChange: Observable<SbbValidationChangeEvent> =\n    fromEvent<SbbValidationChangeEvent>(this.#element.nativeElement, 'validationChange');\n}\n",
      "selector": "sbb-time-input",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "name": "input",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "string | HTMLElement | null",
          "decorators": []
        },
        {
          "name": "valueAsDate",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "Date | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "didChange",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didChange',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 30,
          "type": "Observable<void>"
        },
        {
          "name": "validationChange",
          "defaultValue": "fromEvent<SbbValidationChangeEvent>(this.#element.nativeElement, 'validationChange')",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "Observable<SbbValidationChangeEvent>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "input": {
          "name": "input",
          "setSignature": {
            "name": "input",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | HTMLElement | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 15,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | HTMLElement | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "input",
            "type": "",
            "returnType": "string | HTMLElement | null",
            "line": 18
          }
        },
        "valueAsDate": {
          "name": "valueAsDate",
          "setSignature": {
            "name": "valueAsDate",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "Date | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 23,
            "jsdoctags": [
              {
                "name": "value",
                "type": "Date | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "valueAsDate",
            "type": "",
            "returnType": "Date | null",
            "line": 26
          }
        }
      }
    },
    {
      "name": "SbbTimetableOccupancy",
      "id": "directive-SbbTimetableOccupancy-1e8ba6805b88774443c3dee126f5d5c5bc48e6402f3938547b1f57fa3ba82aa31dac5bb9860b1a49432dc7aee734929525410196cf08f3b834997a887eec9b72",
      "file": "src/angular/timetable-occupancy/timetable-occupancy.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbOccupancy } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport type { SbbTimetableOccupancyElement } from '@sbb-esta/lyne-elements/timetable-occupancy.js';\nimport '@sbb-esta/lyne-elements/timetable-occupancy.js';\n\n@Directive({\n  selector: 'sbb-timetable-occupancy',\n})\nexport class SbbTimetableOccupancy {\n  #element: ElementRef<SbbTimetableOccupancyElement> = inject(\n    ElementRef<SbbTimetableOccupancyElement>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ alias: 'first-class-occupancy' })\n  public set firstClassOccupancy(value: SbbOccupancy | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.firstClassOccupancy = value));\n  }\n  public get firstClassOccupancy(): SbbOccupancy | null {\n    return this.#element.nativeElement.firstClassOccupancy;\n  }\n\n  @Input({ alias: 'second-class-occupancy' })\n  public set secondClassOccupancy(value: SbbOccupancy | null) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.secondClassOccupancy = value),\n    );\n  }\n  public get secondClassOccupancy(): SbbOccupancy | null {\n    return this.#element.nativeElement.secondClassOccupancy;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n}\n",
      "selector": "sbb-timetable-occupancy",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "first-class-occupancy",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "SbbOccupancy | null",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "second-class-occupancy",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "SbbOccupancy | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "firstClassOccupancy": {
          "name": "firstClassOccupancy",
          "setSignature": {
            "name": "firstClassOccupancy",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbOccupancy | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbOccupancy | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "firstClassOccupancy",
            "type": "",
            "returnType": "SbbOccupancy | null",
            "line": 20
          }
        },
        "secondClassOccupancy": {
          "name": "secondClassOccupancy",
          "setSignature": {
            "name": "secondClassOccupancy",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbOccupancy | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbOccupancy | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "secondClassOccupancy",
            "type": "",
            "returnType": "SbbOccupancy | null",
            "line": 30
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 35,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 38
          }
        }
      }
    },
    {
      "name": "SbbTimetableOccupancyIcon",
      "id": "directive-SbbTimetableOccupancyIcon-ee5c3d723388fabc18f291b1360b5f04b24c51dd325f7dc9c397138b95129d8ec6ad7b8269f149f3e97e3bae4161fbd382308fa673b666c6174f6f93b3b55aa8",
      "file": "src/angular/timetable-occupancy-icon/timetable-occupancy-icon.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbOccupancy } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport type { SbbTimetableOccupancyIconElement } from '@sbb-esta/lyne-elements/timetable-occupancy-icon.js';\nimport '@sbb-esta/lyne-elements/timetable-occupancy-icon.js';\n\n@Directive({\n  selector: 'sbb-timetable-occupancy-icon',\n})\nexport class SbbTimetableOccupancyIcon {\n  #element: ElementRef<SbbTimetableOccupancyIconElement> = inject(\n    ElementRef<SbbTimetableOccupancyIconElement>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set occupancy(value: SbbOccupancy) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.occupancy = value));\n  }\n  public get occupancy(): SbbOccupancy {\n    return this.#element.nativeElement.occupancy;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input({ alias: 'no-sanitize', transform: booleanAttribute })\n  public set noSanitize(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.noSanitize = value));\n  }\n  public get noSanitize(): boolean {\n    return this.#element.nativeElement.noSanitize;\n  }\n}\n",
      "selector": "sbb-timetable-occupancy-icon",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "no-sanitize",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "occupancy",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "SbbOccupancy",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "occupancy": {
          "name": "occupancy",
          "setSignature": {
            "name": "occupancy",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbOccupancy",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbOccupancy",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "occupancy",
            "type": "",
            "returnType": "SbbOccupancy",
            "line": 20
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 28
          }
        },
        "noSanitize": {
          "name": "noSanitize",
          "setSignature": {
            "name": "noSanitize",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 33,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "noSanitize",
            "type": "boolean",
            "returnType": "boolean",
            "line": 36
          }
        }
      }
    },
    {
      "name": "SbbTitle",
      "id": "directive-SbbTitle-62bb569a7576bf270510d37d905bc3848037f54c450aacf9ce5f023e811ef296705bcdaeeaf34c8fd9dab35c7a4be8c11e29432db2fc2b89da6c7f2360de3de8",
      "file": "src/angular/title/title.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbTitleElement, SbbTitleLevel } from '@sbb-esta/lyne-elements/title.js';\nimport '@sbb-esta/lyne-elements/title.js';\n\n@Directive({\n  selector: 'sbb-title',\n})\nexport class SbbTitle {\n  #element: ElementRef<SbbTitleElement> = inject(ElementRef<SbbTitleElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input()\n  public set level(value: SbbTitleLevel) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.level = value));\n  }\n  public get level(): SbbTitleLevel {\n    return this.#element.nativeElement.level;\n  }\n\n  @Input({ alias: 'visual-level' })\n  public set visualLevel(value: SbbTitleLevel | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.visualLevel = value));\n  }\n  public get visualLevel(): SbbTitleLevel | null {\n    return this.#element.nativeElement.visualLevel;\n  }\n\n  @Input({ alias: 'visually-hidden', transform: booleanAttribute })\n  public set visuallyHidden(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.visuallyHidden = value));\n  }\n  public get visuallyHidden(): boolean {\n    return this.#element.nativeElement.visuallyHidden;\n  }\n}\n",
      "selector": "sbb-title",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "name": "level",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "SbbTitleLevel",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "visual-level",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 30,
          "type": "SbbTitleLevel | null",
          "decorators": []
        },
        {
          "required": false,
          "name": "visually-hidden",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 38,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 14,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 17
          }
        },
        "level": {
          "name": "level",
          "setSignature": {
            "name": "level",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 22,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "level",
            "type": "",
            "returnType": "SbbTitleLevel",
            "line": 25
          }
        },
        "visualLevel": {
          "name": "visualLevel",
          "setSignature": {
            "name": "visualLevel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTitleLevel | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 30,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTitleLevel | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "visualLevel",
            "type": "",
            "returnType": "SbbTitleLevel | null",
            "line": 33
          }
        },
        "visuallyHidden": {
          "name": "visuallyHidden",
          "setSignature": {
            "name": "visuallyHidden",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 38,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "visuallyHidden",
            "type": "boolean",
            "returnType": "boolean",
            "line": 41
          }
        }
      }
    },
    {
      "name": "SbbToast",
      "id": "directive-SbbToast-152a961b26f352f63ae267293c5ea524ecc48b8aac3b19f35c8f862a45ba518109c0c787a51faea9140b57589b2a9955724c0a33657caa22eb2fa9cfd1902fb6",
      "file": "src/angular/toast/toast.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {\n  Directive,\n  ElementRef,\n  inject,\n  Input,\n  NgZone,\n  numberAttribute,\n  Output,\n} from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbToastElement, SbbToastPosition } from '@sbb-esta/lyne-elements/toast.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/toast.js';\n\n@Directive({\n  selector: 'sbb-toast',\n})\nexport class SbbToast {\n  #element: ElementRef<SbbToastElement> = inject(ElementRef<SbbToastElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: numberAttribute })\n  public set timeout(value: number) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.timeout = value));\n  }\n  public get timeout(): number {\n    return this.#element.nativeElement.timeout;\n  }\n\n  @Input()\n  public set position(value: SbbToastPosition) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.position = value));\n  }\n  public get position(): SbbToastPosition {\n    return this.#element.nativeElement.position;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set dismissible(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.dismissible = value));\n  }\n  public get dismissible(): boolean {\n    return this.#element.nativeElement.dismissible;\n  }\n\n  @Input()\n  public set politeness(value: 'polite' | 'assertive' | 'off') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.politeness = value));\n  }\n  public get politeness(): 'polite' | 'assertive' | 'off' {\n    return this.#element.nativeElement.politeness;\n  }\n\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Output() public willOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  );\n\n  @Output() public didOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  );\n\n  @Output() public willClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  );\n\n  @Output() public didClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  );\n\n  public get isOpen(): boolean {\n    return this.#element.nativeElement.isOpen;\n  }\n\n  public open(): void {\n    return this.#element.nativeElement.open();\n  }\n\n  public close(): void {\n    return this.#element.nativeElement.close();\n  }\n}\n",
      "selector": "sbb-toast",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "dismissible",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 39,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 55,
          "type": "string",
          "decorators": []
        },
        {
          "name": "politeness",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 47,
          "type": "\"polite\" | \"assertive\" | \"off\"",
          "decorators": []
        },
        {
          "name": "position",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 31,
          "type": "SbbToastPosition",
          "decorators": []
        },
        {
          "required": false,
          "name": "timeout",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "number",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "didClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 77,
          "type": "Observable<void>"
        },
        {
          "name": "didOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 67,
          "type": "Observable<void>"
        },
        {
          "name": "willClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 72,
          "type": "Observable<void>"
        },
        {
          "name": "willOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 62,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 90,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        },
        {
          "name": "open",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 86,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": [],
      "accessors": {
        "timeout": {
          "name": "timeout",
          "setSignature": {
            "name": "timeout",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 23,
            "jsdoctags": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "timeout",
            "type": "number",
            "returnType": "number",
            "line": 26
          }
        },
        "position": {
          "name": "position",
          "setSignature": {
            "name": "position",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbToastPosition",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 31,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbToastPosition",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "position",
            "type": "",
            "returnType": "SbbToastPosition",
            "line": 34
          }
        },
        "dismissible": {
          "name": "dismissible",
          "setSignature": {
            "name": "dismissible",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 39,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "dismissible",
            "type": "boolean",
            "returnType": "boolean",
            "line": 42
          }
        },
        "politeness": {
          "name": "politeness",
          "setSignature": {
            "name": "politeness",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"polite\" | \"assertive\" | \"off\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 47,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"polite\" | \"assertive\" | \"off\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "politeness",
            "type": "",
            "returnType": "\"polite\" | \"assertive\" | \"off\"",
            "line": 50
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 55,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 58
          }
        },
        "isOpen": {
          "name": "isOpen",
          "getSignature": {
            "name": "isOpen",
            "type": "boolean",
            "returnType": "boolean",
            "line": 82
          }
        }
      }
    },
    {
      "name": "SbbToggle",
      "id": "directive-SbbToggle-cb219c229f68b0b36051c65c0de3885d045e9e0c6c9013df273d61c1ffe28f8986f62d16025f5216f51705499ed977e5a81667de5752056cdd209ef6771ca638",
      "file": "src/angular/toggle/toggle/toggle.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone, Output } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbToggleOptionElement } from '@sbb-esta/lyne-elements/toggle/toggle-option.js';\nimport type { SbbToggleElement } from '@sbb-esta/lyne-elements/toggle/toggle.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/toggle/toggle.js';\n\n@Directive({\n  selector: 'sbb-toggle',\n})\nexport class SbbToggle {\n  #element: ElementRef<SbbToggleElement> = inject(ElementRef<SbbToggleElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set even(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.even = value));\n  }\n  public get even(): boolean {\n    return this.#element.nativeElement.even;\n  }\n\n  @Input()\n  public set size(value: 's' | 'm') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): 's' | 'm' {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input()\n  public set value(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string {\n    return this.#element.nativeElement.value;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public change: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'change',\n  );\n\n  public get options(): SbbToggleOptionElement[] {\n    return this.#element.nativeElement.options;\n  }\n}\n",
      "selector": "sbb-toggle",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "even",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "\"s\" | \"m\"",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "change",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'change',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 48,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 19
          }
        },
        "even": {
          "name": "even",
          "setSignature": {
            "name": "even",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 24,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "even",
            "type": "boolean",
            "returnType": "boolean",
            "line": 27
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"s\" | \"m\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 32,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"s\" | \"m\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "\"s\" | \"m\"",
            "line": 35
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 40,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "string",
            "returnType": "string",
            "line": 43
          }
        },
        "options": {
          "name": "options",
          "getSignature": {
            "name": "options",
            "type": "[]",
            "returnType": "SbbToggleOptionElement[]",
            "line": 53
          }
        }
      }
    },
    {
      "name": "SbbToggleCheck",
      "id": "directive-SbbToggleCheck-3ddf389245cb9b7be2d57f1c3909d69b420d8ee86e853475c5c8fa325b25e0ceaa0ea21d8f74285f52017bcfad54e2b6101b1a265f61e00da9dc2de5725e0df9",
      "file": "src/angular/toggle-check/toggle-check.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, forwardRef, inject, Input, NgZone, Output } from '@angular/core';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { booleanAttribute, SbbControlValueAccessorMixin } from '@sbb-esta/lyne-angular/core';\nimport type { SbbToggleCheckElement } from '@sbb-esta/lyne-elements/toggle-check.js';\nimport { fromEvent, type Observable } from 'rxjs';\n\nimport '@sbb-esta/lyne-elements/toggle-check.js';\n\n@Directive({\n  selector: 'sbb-toggle-check',\n  exportAs: 'sbbToggleCheck',\n  host: {\n    '(change)': 'this.onChangeFn(this.checked)',\n    '(blur)': 'this.onTouchedFn()',\n  },\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SbbToggleCheck),\n      multi: true,\n    },\n  ],\n})\nexport class SbbToggleCheck extends SbbControlValueAccessorMixin(class {}) {\n  #element: ElementRef<SbbToggleCheckElement> = inject(ElementRef<SbbToggleCheckElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: 'xs' | 's' | 'm') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): 'xs' | 's' | 'm' {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input({ alias: 'label-position' })\n  public set labelPosition(value: 'before' | 'after') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.labelPosition = value));\n  }\n  public get labelPosition(): 'before' | 'after' {\n    return this.#element.nativeElement.labelPosition;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set checked(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.checked = value));\n  }\n  public get checked(): boolean {\n    return this.#element.nativeElement.checked;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set required(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.required = value));\n  }\n  public get required(): boolean {\n    return this.#element.nativeElement.required;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public change: Observable<Event> = fromEvent<Event>(\n    this.#element.nativeElement,\n    'change',\n  );\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public input: Observable<InputEvent> = fromEvent<InputEvent>(\n    this.#element.nativeElement,\n    'input',\n  );\n\n  public get type(): string {\n    return this.#element.nativeElement.type;\n  }\n\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n}\n",
      "selector": "sbb-toggle-check",
      "providers": [
        {
          "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SbbToggleCheck), multi: true,\n}"
        }
      ],
      "exportAs": "sbbToggleCheck",
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "checked",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 53,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 61,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 37,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "label-position",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 45,
          "type": "\"before\" | \"after\"",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 77,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "required",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 69,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 29,
          "type": "\"xs\" | \"s\" | \"m\"",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 85,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "change",
          "defaultValue": "fromEvent<Event>(\n    this.#element.nativeElement,\n    'change',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 93,
          "type": "Observable<Event>"
        },
        {
          "name": "input",
          "defaultValue": "fromEvent<InputEvent>(\n    this.#element.nativeElement,\n    'input',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 99,
          "type": "Observable<InputEvent>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": ["SbbControlValueAccessorMixin(class {})"],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"xs\" | \"s\" | \"m\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 29,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"xs\" | \"s\" | \"m\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "\"xs\" | \"s\" | \"m\"",
            "line": 32
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 37,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 40
          }
        },
        "labelPosition": {
          "name": "labelPosition",
          "setSignature": {
            "name": "labelPosition",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"before\" | \"after\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 45,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"before\" | \"after\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "labelPosition",
            "type": "",
            "returnType": "\"before\" | \"after\"",
            "line": 48
          }
        },
        "checked": {
          "name": "checked",
          "setSignature": {
            "name": "checked",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 53,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "checked",
            "type": "boolean",
            "returnType": "boolean",
            "line": 56
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 61,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 64
          }
        },
        "required": {
          "name": "required",
          "setSignature": {
            "name": "required",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 69,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "required",
            "type": "boolean",
            "returnType": "boolean",
            "line": 72
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 77,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 80
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 85,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 88
          }
        },
        "type": {
          "name": "type",
          "getSignature": {
            "name": "type",
            "type": "string",
            "returnType": "string",
            "line": 104
          }
        },
        "form": {
          "name": "form",
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 108
          }
        }
      }
    },
    {
      "name": "SbbToggleOption",
      "id": "directive-SbbToggleOption-b41740d0217039b704daed1ece783d0c15332c8a6ec9cefb95fe22c7ede075709c9937e4ad21c6a888b776ae7c4be30233914d25f696b7e354ec5b6d9b70a5a5",
      "file": "src/angular/toggle/toggle-option/toggle-option.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbToggleOptionElement } from '@sbb-esta/lyne-elements/toggle/toggle-option.js';\nimport '@sbb-esta/lyne-elements/toggle/toggle-option.js';\n\n@Directive({\n  selector: 'sbb-toggle-option',\n})\nexport class SbbToggleOption {\n  #element: ElementRef<SbbToggleOptionElement> = inject(ElementRef<SbbToggleOptionElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set checked(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.checked = value));\n  }\n  public get checked(): boolean {\n    return this.#element.nativeElement.checked;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set value(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n}\n",
      "selector": "sbb-toggle-option",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "checked",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 38,
          "type": "string",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 30,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "checked": {
          "name": "checked",
          "setSignature": {
            "name": "checked",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 14,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "checked",
            "type": "boolean",
            "returnType": "boolean",
            "line": 17
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 22,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 25
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 30,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "string",
            "returnType": "string",
            "line": 33
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 38,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 41
          }
        }
      }
    },
    {
      "name": "SbbTrain",
      "id": "directive-SbbTrain-75900508499fd6fbd1cca569ad1bd4bf0c7256b7c45be5cedd5f8b860689fa445f5f4310fe634863fd1364f212e71065f7843183b69aa889f5ef633401d72bbd",
      "file": "src/angular/train/train/train.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { SbbTitleLevel } from '@sbb-esta/lyne-elements/title.js';\nimport type { SbbTrainElement } from '@sbb-esta/lyne-elements/train/train.js';\nimport '@sbb-esta/lyne-elements/train/train.js';\n\n@Directive({\n  selector: 'sbb-train',\n})\nexport class SbbTrain {\n  #element: ElementRef<SbbTrainElement> = inject(ElementRef<SbbTrainElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ alias: 'direction-label' })\n  public set directionLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.directionLabel = value));\n  }\n  public get directionLabel(): string {\n    return this.#element.nativeElement.directionLabel;\n  }\n\n  @Input({ alias: 'direction-label-level' })\n  public set directionLabelLevel(value: SbbTitleLevel) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.directionLabelLevel = value));\n  }\n  public get directionLabelLevel(): SbbTitleLevel {\n    return this.#element.nativeElement.directionLabelLevel;\n  }\n\n  @Input()\n  public set station(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.station = value));\n  }\n  public get station(): string {\n    return this.#element.nativeElement.station;\n  }\n\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n\n  @Input()\n  public set direction(value: 'left' | 'right') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.direction = value));\n  }\n  public get direction(): 'left' | 'right' {\n    return this.#element.nativeElement.direction;\n  }\n}\n",
      "selector": "sbb-train",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 38,
          "type": "string",
          "decorators": []
        },
        {
          "name": "direction",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 46,
          "type": "\"left\" | \"right\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "direction-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "direction-label-level",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "SbbTitleLevel",
          "decorators": []
        },
        {
          "name": "station",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 30,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "directionLabel": {
          "name": "directionLabel",
          "setSignature": {
            "name": "directionLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 14,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "directionLabel",
            "type": "string",
            "returnType": "string",
            "line": 17
          }
        },
        "directionLabelLevel": {
          "name": "directionLabelLevel",
          "setSignature": {
            "name": "directionLabelLevel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 22,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "directionLabelLevel",
            "type": "",
            "returnType": "SbbTitleLevel",
            "line": 25
          }
        },
        "station": {
          "name": "station",
          "setSignature": {
            "name": "station",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 30,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "station",
            "type": "string",
            "returnType": "string",
            "line": 33
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 38,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 41
          }
        },
        "direction": {
          "name": "direction",
          "setSignature": {
            "name": "direction",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"left\" | \"right\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 46,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"left\" | \"right\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "direction",
            "type": "",
            "returnType": "\"left\" | \"right\"",
            "line": 49
          }
        }
      }
    },
    {
      "name": "SbbTrainBlockedPassage",
      "id": "directive-SbbTrainBlockedPassage-5c117fe975e49ecf4de98a7c8d71df837ceab20e60dfa2c4ab3326c181855454aa24bcee2cec2b61b80704d696309d9f51a35b78dcfed9c2715b566ce71ece9a",
      "file": "src/angular/train/train-blocked-passage/train-blocked-passage.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive } from '@angular/core';\nimport '@sbb-esta/lyne-elements/train/train-blocked-passage.js';\n\n@Directive({\n  selector: 'sbb-train-blocked-passage',\n})\nexport class SbbTrainBlockedPassage {}\n",
      "selector": "sbb-train-blocked-passage",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": []
    },
    {
      "name": "SbbTrainFormation",
      "id": "directive-SbbTrainFormation-2e56a9741b0cbfa83b3c18bc2b5e1dc971252ca46e8383e04b53f0ec34aeea4402cfab1be22665c24b8b90e757ff82cff1d4ea8c8ce72773a16318940886b8bb",
      "file": "src/angular/train/train-formation/train-formation.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport type { SbbTrainFormationElement } from '@sbb-esta/lyne-elements/train/train-formation.js';\nimport '@sbb-esta/lyne-elements/train/train-formation.js';\n\n@Directive({\n  selector: 'sbb-train-formation',\n})\nexport class SbbTrainFormation {\n  #element: ElementRef<SbbTrainFormationElement> = inject(ElementRef<SbbTrainFormationElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set view(value: 'side' | 'top') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.view = value));\n  }\n  public get view(): 'side' | 'top' {\n    return this.#element.nativeElement.view;\n  }\n}\n",
      "selector": "sbb-train-formation",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "name": "view",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 13,
          "type": "\"side\" | \"top\"",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "view": {
          "name": "view",
          "setSignature": {
            "name": "view",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"side\" | \"top\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 13,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"side\" | \"top\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "view",
            "type": "",
            "returnType": "\"side\" | \"top\"",
            "line": 16
          }
        }
      }
    },
    {
      "name": "SbbTrainWagon",
      "id": "directive-SbbTrainWagon-7aaecdbcca58ec5d1fa052b4cab4ecfaed1b35a9386b0ff4e8c89db27d4b3234784229fa020df2b87f66516075e70e537ca8e1f703882340138916682d64dc7f",
      "file": "src/angular/train/train-wagon/train-wagon.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { SbbOccupancy } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport type { SbbTrainWagonElement } from '@sbb-esta/lyne-elements/train/train-wagon.js';\nimport '@sbb-esta/lyne-elements/train/train-wagon.js';\n\n@Directive({\n  selector: 'sbb-train-wagon',\n})\nexport class SbbTrainWagon {\n  #element: ElementRef<SbbTrainWagonElement> = inject(ElementRef<SbbTrainWagonElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set type(\n    value:\n      | 'wagon'\n      | 'wagon-end-left'\n      | 'wagon-end-right'\n      | 'couchette'\n      | 'sleeping'\n      | 'restaurant'\n      | 'locomotive'\n      | 'closed',\n  ) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type():\n    | 'wagon'\n    | 'wagon-end-left'\n    | 'wagon-end-right'\n    | 'couchette'\n    | 'sleeping'\n    | 'restaurant'\n    | 'locomotive'\n    | 'closed' {\n    return this.#element.nativeElement.type;\n  }\n\n  @Input()\n  public set occupancy(value: SbbOccupancy | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.occupancy = value));\n  }\n  public get occupancy(): SbbOccupancy | null {\n    return this.#element.nativeElement.occupancy;\n  }\n\n  @Input()\n  public set sector(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.sector = value));\n  }\n  public get sector(): string {\n    return this.#element.nativeElement.sector;\n  }\n\n  @Input({ alias: 'blocked-passage' })\n  public set blockedPassage(value: 'previous' | 'next' | 'both' | 'none') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.blockedPassage = value));\n  }\n  public get blockedPassage(): 'previous' | 'next' | 'both' | 'none' {\n    return this.#element.nativeElement.blockedPassage;\n  }\n\n  @Input({ alias: 'wagon-class' })\n  public set wagonClass(value: '1' | '2' | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.wagonClass = value));\n  }\n  public get wagonClass(): '1' | '2' | null {\n    return this.#element.nativeElement.wagonClass;\n  }\n\n  @Input()\n  public set label(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.label = value));\n  }\n  public get label(): string {\n    return this.#element.nativeElement.label;\n  }\n\n  @Input({ alias: 'additional-accessibility-text' })\n  public set additionalAccessibilityText(value: string) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.additionalAccessibilityText = value),\n    );\n  }\n  public get additionalAccessibilityText(): string {\n    return this.#element.nativeElement.additionalAccessibilityText;\n  }\n}\n",
      "selector": "sbb-train-wagon",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "additional-accessibility-text",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 80,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "blocked-passage",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 56,
          "type": "\"previous\" | \"next\" | \"both\" | \"none\"",
          "decorators": []
        },
        {
          "name": "label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 72,
          "type": "string",
          "decorators": []
        },
        {
          "name": "occupancy",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "SbbOccupancy | null",
          "decorators": []
        },
        {
          "name": "sector",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 48,
          "type": "string",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 14,
          "type": "\"wagon\" | \"wagon-end-left\" | \"wagon-end-right\" | \"couchette\" | \"sleeping\" | \"restaurant\" | \"locomotive\" | \"closed\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "wagon-class",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 64,
          "type": "\"1\" | \"2\" | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"wagon\" | \"wagon-end-left\" | \"wagon-end-right\" | \"couchette\" | \"sleeping\" | \"restaurant\" | \"locomotive\" | \"closed\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 14,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"wagon\" | \"wagon-end-left\" | \"wagon-end-right\" | \"couchette\" | \"sleeping\" | \"restaurant\" | \"locomotive\" | \"closed\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "\"wagon\" | \"wagon-end-left\" | \"wagon-end-right\" | \"couchette\" | \"sleeping\" | \"restaurant\" | \"locomotive\" | \"closed\"",
            "line": 27
          }
        },
        "occupancy": {
          "name": "occupancy",
          "setSignature": {
            "name": "occupancy",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbOccupancy | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 40,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbOccupancy | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "occupancy",
            "type": "",
            "returnType": "SbbOccupancy | null",
            "line": 43
          }
        },
        "sector": {
          "name": "sector",
          "setSignature": {
            "name": "sector",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 48,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "sector",
            "type": "string",
            "returnType": "string",
            "line": 51
          }
        },
        "blockedPassage": {
          "name": "blockedPassage",
          "setSignature": {
            "name": "blockedPassage",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"previous\" | \"next\" | \"both\" | \"none\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 56,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"previous\" | \"next\" | \"both\" | \"none\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "blockedPassage",
            "type": "",
            "returnType": "\"previous\" | \"next\" | \"both\" | \"none\"",
            "line": 59
          }
        },
        "wagonClass": {
          "name": "wagonClass",
          "setSignature": {
            "name": "wagonClass",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"1\" | \"2\" | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 64,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"1\" | \"2\" | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "wagonClass",
            "type": "",
            "returnType": "\"1\" | \"2\" | null",
            "line": 67
          }
        },
        "label": {
          "name": "label",
          "setSignature": {
            "name": "label",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 72,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "label",
            "type": "string",
            "returnType": "string",
            "line": 75
          }
        },
        "additionalAccessibilityText": {
          "name": "additionalAccessibilityText",
          "setSignature": {
            "name": "additionalAccessibilityText",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 80,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "additionalAccessibilityText",
            "type": "string",
            "returnType": "string",
            "line": 85
          }
        }
      }
    },
    {
      "name": "SbbTransparentButton",
      "id": "directive-SbbTransparentButton-67ce0913107e13453532f8dd15ce3e914ee50a2975486f5b4ffa24a30001070e29cc97daf6a890cf9a9f100e0a921ca7ab586683fd2039dbdfee7c9b3c879b80",
      "file": "src/angular/button/transparent-button/transparent-button.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbTransparentButtonElement } from '@sbb-esta/lyne-elements/button/transparent-button.js';\nimport { SbbButtonSize } from '@sbb-esta/lyne-elements/button.js';\nimport { SbbButtonType } from '@sbb-esta/lyne-elements/core/base-elements.js';\n\nimport '@sbb-esta/lyne-elements/button/transparent-button.js';\n\n@Directive({\n  selector: 'sbb-transparent-button',\n})\nexport class SbbTransparentButton {\n  #element: ElementRef<SbbTransparentButtonElement> = inject(\n    ElementRef<SbbTransparentButtonElement>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: SbbButtonSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbButtonSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input({ alias: 'disabled-interactive', transform: booleanAttribute })\n  public set disabledInteractive(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabledInteractive = value));\n  }\n  public get disabledInteractive(): boolean {\n    return this.#element.nativeElement.disabledInteractive;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set form(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.form = value));\n  }\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set type(value: SbbButtonType) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): SbbButtonType {\n    return this.#element.nativeElement.type;\n  }\n}\n",
      "selector": "sbb-transparent-button",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 51,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled-interactive",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "form",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 59,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 67,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "SbbButtonSize",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 83,
          "type": "SbbButtonType",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 75,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 19,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbButtonSize",
            "line": 22
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 27,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 30
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 35,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 38
          }
        },
        "disabledInteractive": {
          "name": "disabledInteractive",
          "setSignature": {
            "name": "disabledInteractive",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 43,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabledInteractive",
            "type": "boolean",
            "returnType": "boolean",
            "line": 46
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 51,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 54
          }
        },
        "form": {
          "name": "form",
          "setSignature": {
            "name": "form",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 59,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 62
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 67,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 70
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 75,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 78
          }
        },
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 83,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "SbbButtonType",
            "line": 86
          }
        }
      }
    },
    {
      "name": "SbbTransparentButtonLink",
      "id": "directive-SbbTransparentButtonLink-27bedd744781a38917ea668e23b9ed58f2c0142655d1d7384fb2dffecef69652d49a5b42c1d1841c9783a81861a942df3bec54140ef9b6f2e40233af088179ed",
      "file": "src/angular/button/transparent-button-link/transparent-button-link.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute, SbbRouterLinkSupportMixin } from '@sbb-esta/lyne-angular/core';\nimport type { SbbTransparentButtonLinkElement } from '@sbb-esta/lyne-elements/button/transparent-button-link.js';\nimport { SbbButtonSize } from '@sbb-esta/lyne-elements/button.js';\nimport { LinkTargetType } from '@sbb-esta/lyne-elements/core/base-elements.js';\n\nimport '@sbb-esta/lyne-elements/button/transparent-button-link.js';\n\n@Directive({\n  selector: 'sbb-transparent-button-link',\n})\nexport class SbbTransparentButtonLink extends SbbRouterLinkSupportMixin(class {}) {\n  #element: ElementRef<SbbTransparentButtonLinkElement> = inject(\n    ElementRef<SbbTransparentButtonLinkElement>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: SbbButtonSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbButtonSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input({ alias: 'disabled-interactive', transform: booleanAttribute })\n  public set disabledInteractive(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabledInteractive = value));\n  }\n  public get disabledInteractive(): boolean {\n    return this.#element.nativeElement.disabledInteractive;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set href(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.href = value));\n  }\n  public get href(): string {\n    return this.#element.nativeElement.href;\n  }\n\n  @Input()\n  public set target(value: LinkTargetType | string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.target = value));\n  }\n  public get target(): LinkTargetType | string {\n    return this.#element.nativeElement.target;\n  }\n\n  @Input()\n  public set rel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.rel = value));\n  }\n  public get rel(): string {\n    return this.#element.nativeElement.rel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set download(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.download = value));\n  }\n  public get download(): boolean {\n    return this.#element.nativeElement.download;\n  }\n\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n\n  @Input({ alias: 'accessibility-current' })\n  public set accessibilityCurrent(value: string) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.accessibilityCurrent = value),\n    );\n  }\n  public get accessibilityCurrent(): string {\n    return this.#element.nativeElement.accessibilityCurrent;\n  }\n}\n",
      "selector": "sbb-transparent-button-link",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-current",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 99,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 91,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 51,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled-interactive",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "download",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 83,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "href",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 59,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "rel",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 75,
          "type": "string",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "SbbButtonSize",
          "decorators": []
        },
        {
          "name": "target",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 67,
          "type": "LinkTargetType | string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": ["SbbRouterLinkSupportMixin(class {})"],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 19,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbButtonSize",
            "line": 22
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 27,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 30
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 35,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 38
          }
        },
        "disabledInteractive": {
          "name": "disabledInteractive",
          "setSignature": {
            "name": "disabledInteractive",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 43,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabledInteractive",
            "type": "boolean",
            "returnType": "boolean",
            "line": 46
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 51,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 54
          }
        },
        "href": {
          "name": "href",
          "setSignature": {
            "name": "href",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 59,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "href",
            "type": "string",
            "returnType": "string",
            "line": 62
          }
        },
        "target": {
          "name": "target",
          "setSignature": {
            "name": "target",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 67,
            "jsdoctags": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "target",
            "type": "",
            "returnType": "LinkTargetType | string",
            "line": 70
          }
        },
        "rel": {
          "name": "rel",
          "setSignature": {
            "name": "rel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 75,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "rel",
            "type": "string",
            "returnType": "string",
            "line": 78
          }
        },
        "download": {
          "name": "download",
          "setSignature": {
            "name": "download",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 83,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "download",
            "type": "boolean",
            "returnType": "boolean",
            "line": 86
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 91,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 94
          }
        },
        "accessibilityCurrent": {
          "name": "accessibilityCurrent",
          "setSignature": {
            "name": "accessibilityCurrent",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 99,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityCurrent",
            "type": "string",
            "returnType": "string",
            "line": 104
          }
        }
      }
    },
    {
      "name": "SbbTransparentButtonStatic",
      "id": "directive-SbbTransparentButtonStatic-cd12bd3f81f7ad095357b60f3ffbf44801c6fb726834a04f5f6525904d26e9431fa645e924e8063005aa778f43a6a5226626be6d56ad1ca3c676dc1963a88dcb",
      "file": "src/angular/button/transparent-button-static/transparent-button-static.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbTransparentButtonStaticElement } from '@sbb-esta/lyne-elements/button/transparent-button-static.js';\nimport { SbbButtonSize } from '@sbb-esta/lyne-elements/button.js';\n\nimport '@sbb-esta/lyne-elements/button/transparent-button-static.js';\n\n@Directive({\n  selector: 'sbb-transparent-button-static',\n})\nexport class SbbTransparentButtonStatic {\n  #element: ElementRef<SbbTransparentButtonStaticElement> = inject(\n    ElementRef<SbbTransparentButtonStaticElement>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: SbbButtonSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbButtonSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n}\n",
      "selector": "sbb-transparent-button-static",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 42,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "SbbButtonSize",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbButtonSize",
            "line": 21
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 29
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 34,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 37
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 42,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 45
          }
        }
      }
    },
    {
      "name": "SbbVisualCheckbox",
      "id": "directive-SbbVisualCheckbox-bb27af3d795812327d5bd03cfce8f9d77219f070c9834a9368613fad38c82e3da3443135271d541d6fb087ead7d6fbf8570f1429ddc8635774362da1671cc82d",
      "file": "src/angular/visual-checkbox/visual-checkbox.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject, Input, NgZone } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbCheckboxSize } from '@sbb-esta/lyne-elements/checkbox.js';\nimport type { SbbVisualCheckboxElement } from '@sbb-esta/lyne-elements/visual-checkbox.js';\nimport '@sbb-esta/lyne-elements/visual-checkbox.js';\n\n@Directive({\n  selector: 'sbb-visual-checkbox',\n})\nexport class SbbVisualCheckbox {\n  #element: ElementRef<SbbVisualCheckboxElement> = inject(ElementRef<SbbVisualCheckboxElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set checked(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.checked = value));\n  }\n  public get checked(): boolean {\n    return this.#element.nativeElement.checked;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set indeterminate(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.indeterminate = value));\n  }\n  public get indeterminate(): boolean {\n    return this.#element.nativeElement.indeterminate;\n  }\n\n  @Input()\n  public set size(value: SbbCheckboxSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbCheckboxSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n}\n",
      "selector": "sbb-visual-checkbox",
      "providers": [],
      "hostDirectives": [],
      "standalone": false,
      "inputsClass": [
        {
          "required": false,
          "name": "checked",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 39,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "indeterminate",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 47,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 31,
          "type": "SbbCheckboxSize",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "checked": {
          "name": "checked",
          "setSignature": {
            "name": "checked",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 15,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "checked",
            "type": "boolean",
            "returnType": "boolean",
            "line": 18
          }
        },
        "indeterminate": {
          "name": "indeterminate",
          "setSignature": {
            "name": "indeterminate",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 23,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "indeterminate",
            "type": "boolean",
            "returnType": "boolean",
            "line": 26
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbCheckboxSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 31,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbCheckboxSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbCheckboxSize",
            "line": 34
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 39,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 42
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 47,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 50
          }
        }
      }
    }
  ],
  "components": [],
  "modules": [],
  "miscellaneous": {
    "variables": [
      {
        "name": "breakpointNames",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/showcase/.storybook/preview.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Record<string, number>",
        "defaultValue": "breakpoints.reduce(\n  (current, next) => Object.assign(current, { [next.key]: next.value }),\n  {} as Record<string, number>,\n)"
      },
      {
        "name": "breakpoints",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/showcase/.storybook/preview.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Object.entries(tokens)\n  .filter(([key]) => key.startsWith('SbbBreakpoint') && key.endsWith('Min'))\n  .map(([key, value]) => ({ key: getViewportName(key), value: value as number }))\n  .sort((a, b) => a.value - b.value)"
      },
      {
        "name": "Default",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/showcase/stories/button/button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{}"
      },
      {
        "name": "Disabled",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/showcase/stories/button/button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n  args: {\n    disabled: true,\n  },\n}"
      },
      {
        "name": "getViewportName",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/showcase/.storybook/preview.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "(key: string): string =>\n  key.replace(/(^SbbBreakpoint|Min$)/g, '').toLowerCase()"
      },
      {
        "name": "Icon",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/showcase/stories/button/button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n  args: {\n    'icon-name': 'pie-small',\n    text: undefined,\n  },\n}"
      },
      {
        "name": "meta",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/showcase/stories/button/button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Meta",
        "defaultValue": "{\n  decorators: [\n    withActions,\n    moduleMetadata({\n      imports: [SbbExpansionPanel, SbbExpansionPanelHeader, SbbExpansionPanelContent],\n      declarations: [SbbExpansionPanel, SbbExpansionPanelHeader, SbbExpansionPanelContent],\n    })\n  ],\n  title: 'elements/sbb-button',\n  component: SbbAccordion,\n  parameters: {\n    actions: { handles: ['click'] },\n    // docs: { description: { component: readme } },\n  },\n  // // Controls are automatically set by compodoc; extra controls must be manually added.\n  // argTypes: {\n  //   text: { control: 'text' },\n  // },\n  // args: {\n  //   text: 'Button',\n  // },\n  // render via template is needed due to the directive implementation\n  render: ({ text, ...args }) => ({\n    prop: { text, ...args },\n    template: `\n      <sbb-accordion>\n        <sbb-expansion-panel>\n          <sbb-expansion-panel-header>Test</sbb-expansion-panel-header>\n          <sbb-expansion-panel-content><p>Content</p></sbb-expansion-panel-content>\n        </sbb-expansion-panel>\n      </sbb-accordion>\n    `,\n  }),\n}"
      },
      {
        "name": "Negative",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/showcase/stories/button/button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n  args: {\n    negative: true,\n  },\n}"
      },
      {
        "name": "preview",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/showcase/.storybook/preview.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Preview",
        "defaultValue": "{\n  tags: ['autodocs'],\n  parameters: {\n    breakpoints: {\n      breakpointNames,\n      debounceTimeout: 10,\n    },\n    docs: {\n      toc: {\n        ignoreSelector: '.docs-story h2',\n        headingSelector: 'h2',\n      },\n      source: { format: 'html' },\n    },\n    viewport: { viewports: storybookViewports },\n    backgrounds: { disable: true },\n  },\n}"
      },
      {
        "name": "SbbControlValueAccessorMixin",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/angular/core/control-value-accessor-mixin.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "<T extends AbstractConstructor>(\n  superclass: T,\n): AbstractConstructor<SbbControlValueAccessorMixinType> & T => {\n  abstract class SbbControlValueAccessor\n    extends superclass\n    implements Partial<SbbControlValueAccessorMixinType>\n  {\n    abstract value: unknown;\n    abstract disabled: boolean;\n\n    protected onChangeFn: (value: any) => void = () => {};\n    protected onTouchedFn: () => void = () => {};\n\n    /**\n     * @internal\n     */\n    registerOnChange(fn: any): void {\n      this.onChangeFn = fn;\n    }\n\n    /**\n     * @internal\n     */\n    registerOnTouched(fn: any): void {\n      this.onTouchedFn = fn;\n    }\n\n    writeValue(value: any): void {\n      this.value = value;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n      this.disabled = isDisabled;\n    }\n  }\n  return SbbControlValueAccessor as unknown as AbstractConstructor<SbbControlValueAccessorMixinType> &\n    T;\n}"
      },
      {
        "name": "SbbRouterLinkSupportMixin",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/angular/core/router-link-support-mixin.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "<T extends AbstractConstructor>(\n  superclass: T,\n): AbstractConstructor & T => {\n  abstract class SbbRouterLink extends superclass {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(...args: any[]) {\n      super(...args);\n\n      const routerLink = inject(RouterLink, { optional: true }) as unknown as {\n        isAnchorElement: boolean;\n        updateHref: () => void;\n        setTabIndexIfNotOnNativeEl: (newTabIndex: string | null) => void;\n      };\n\n      if (!routerLink) {\n        return;\n      }\n\n      routerLink.setTabIndexIfNotOnNativeEl(null);\n      routerLink.isAnchorElement = true;\n\n      inject(Router)\n        .events.pipe(takeUntilDestroyed())\n        .subscribe((s) => {\n          if (s instanceof NavigationEnd) {\n            routerLink.updateHref();\n          }\n        });\n    }\n  }\n  return SbbRouterLink as unknown as AbstractConstructor & T;\n}",
        "rawdescription": "Patches the behavior of the Angular RouterLink.\nWith this patch the RouterLink recognizes the web component links\nas native links and processes them correctly.\nTODO: Check whether there is support of Angular for that case:\n - https://github.com/angular/angular/pull/59567\n - https://github.com/angular/angular/issues/28345",
        "description": "<p>Patches the behavior of the Angular RouterLink.\nWith this patch the RouterLink recognizes the web component links\nas native links and processes them correctly.\nTODO: Check whether there is support of Angular for that case:</p>\n<ul>\n<li><a href=\"https://github.com/angular/angular/pull/59567\">https://github.com/angular/angular/pull/59567</a></li>\n<li><a href=\"https://github.com/angular/angular/issues/28345\">https://github.com/angular/angular/issues/28345</a></li>\n</ul>\n"
      },
      {
        "name": "SizeM",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/showcase/stories/button/button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n  args: {\n    size: 'm',\n  },\n}"
      },
      {
        "name": "storybookViewports",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/showcase/.storybook/preview.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "breakpoints.reduce(\n  (current, next) =>\n    Object.assign(current, {\n      [next.key]: {\n        name: `Breakpoint ${next.key}`,\n        styles: {\n          width: `${next.value || 320}px`,\n          height: '',\n        },\n      },\n    }),\n  {} as Record<string, number>,\n)"
      }
    ],
    "functions": [
      {
        "name": "booleanAttribute",
        "file": "src/angular/core/attribute-transform.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "<p>Transform an attribute value to a boolean value.\nWe do not use the Angular implementation because it treats &#39;false&#39; as a false value,\nwhich does not align with the Lit and native interpretation.</p>\n",
        "args": [
          {
            "name": "value",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "returnType": "boolean",
        "jsdoctags": [
          {
            "name": "value",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    ],
    "typealiases": [],
    "enumerations": [],
    "groupedVariables": {
      "src/showcase/.storybook/preview.ts": [
        {
          "name": "breakpointNames",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/showcase/.storybook/preview.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Record<string, number>",
          "defaultValue": "breakpoints.reduce(\n  (current, next) => Object.assign(current, { [next.key]: next.value }),\n  {} as Record<string, number>,\n)"
        },
        {
          "name": "breakpoints",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/showcase/.storybook/preview.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Object.entries(tokens)\n  .filter(([key]) => key.startsWith('SbbBreakpoint') && key.endsWith('Min'))\n  .map(([key, value]) => ({ key: getViewportName(key), value: value as number }))\n  .sort((a, b) => a.value - b.value)"
        },
        {
          "name": "getViewportName",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/showcase/.storybook/preview.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "(key: string): string =>\n  key.replace(/(^SbbBreakpoint|Min$)/g, '').toLowerCase()"
        },
        {
          "name": "preview",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/showcase/.storybook/preview.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Preview",
          "defaultValue": "{\n  tags: ['autodocs'],\n  parameters: {\n    breakpoints: {\n      breakpointNames,\n      debounceTimeout: 10,\n    },\n    docs: {\n      toc: {\n        ignoreSelector: '.docs-story h2',\n        headingSelector: 'h2',\n      },\n      source: { format: 'html' },\n    },\n    viewport: { viewports: storybookViewports },\n    backgrounds: { disable: true },\n  },\n}"
        },
        {
          "name": "storybookViewports",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/showcase/.storybook/preview.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "breakpoints.reduce(\n  (current, next) =>\n    Object.assign(current, {\n      [next.key]: {\n        name: `Breakpoint ${next.key}`,\n        styles: {\n          width: `${next.value || 320}px`,\n          height: '',\n        },\n      },\n    }),\n  {} as Record<string, number>,\n)"
        }
      ],
      "src/showcase/stories/button/button.stories.ts": [
        {
          "name": "Default",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/showcase/stories/button/button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{}"
        },
        {
          "name": "Disabled",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/showcase/stories/button/button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n  args: {\n    disabled: true,\n  },\n}"
        },
        {
          "name": "Icon",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/showcase/stories/button/button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n  args: {\n    'icon-name': 'pie-small',\n    text: undefined,\n  },\n}"
        },
        {
          "name": "meta",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/showcase/stories/button/button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Meta",
          "defaultValue": "{\n  decorators: [\n    withActions,\n    moduleMetadata({\n      imports: [SbbExpansionPanel, SbbExpansionPanelHeader, SbbExpansionPanelContent],\n      declarations: [SbbExpansionPanel, SbbExpansionPanelHeader, SbbExpansionPanelContent],\n    })\n  ],\n  title: 'elements/sbb-button',\n  component: SbbAccordion,\n  parameters: {\n    actions: { handles: ['click'] },\n    // docs: { description: { component: readme } },\n  },\n  // // Controls are automatically set by compodoc; extra controls must be manually added.\n  // argTypes: {\n  //   text: { control: 'text' },\n  // },\n  // args: {\n  //   text: 'Button',\n  // },\n  // render via template is needed due to the directive implementation\n  render: ({ text, ...args }) => ({\n    prop: { text, ...args },\n    template: `\n      <sbb-accordion>\n        <sbb-expansion-panel>\n          <sbb-expansion-panel-header>Test</sbb-expansion-panel-header>\n          <sbb-expansion-panel-content><p>Content</p></sbb-expansion-panel-content>\n        </sbb-expansion-panel>\n      </sbb-accordion>\n    `,\n  }),\n}"
        },
        {
          "name": "Negative",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/showcase/stories/button/button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n  args: {\n    negative: true,\n  },\n}"
        },
        {
          "name": "SizeM",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/showcase/stories/button/button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n  args: {\n    size: 'm',\n  },\n}"
        }
      ],
      "src/angular/core/control-value-accessor-mixin.ts": [
        {
          "name": "SbbControlValueAccessorMixin",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/angular/core/control-value-accessor-mixin.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "<T extends AbstractConstructor>(\n  superclass: T,\n): AbstractConstructor<SbbControlValueAccessorMixinType> & T => {\n  abstract class SbbControlValueAccessor\n    extends superclass\n    implements Partial<SbbControlValueAccessorMixinType>\n  {\n    abstract value: unknown;\n    abstract disabled: boolean;\n\n    protected onChangeFn: (value: any) => void = () => {};\n    protected onTouchedFn: () => void = () => {};\n\n    /**\n     * @internal\n     */\n    registerOnChange(fn: any): void {\n      this.onChangeFn = fn;\n    }\n\n    /**\n     * @internal\n     */\n    registerOnTouched(fn: any): void {\n      this.onTouchedFn = fn;\n    }\n\n    writeValue(value: any): void {\n      this.value = value;\n    }\n\n    setDisabledState(isDisabled: boolean): void {\n      this.disabled = isDisabled;\n    }\n  }\n  return SbbControlValueAccessor as unknown as AbstractConstructor<SbbControlValueAccessorMixinType> &\n    T;\n}"
        }
      ],
      "src/angular/core/router-link-support-mixin.ts": [
        {
          "name": "SbbRouterLinkSupportMixin",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/angular/core/router-link-support-mixin.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "<T extends AbstractConstructor>(\n  superclass: T,\n): AbstractConstructor & T => {\n  abstract class SbbRouterLink extends superclass {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    constructor(...args: any[]) {\n      super(...args);\n\n      const routerLink = inject(RouterLink, { optional: true }) as unknown as {\n        isAnchorElement: boolean;\n        updateHref: () => void;\n        setTabIndexIfNotOnNativeEl: (newTabIndex: string | null) => void;\n      };\n\n      if (!routerLink) {\n        return;\n      }\n\n      routerLink.setTabIndexIfNotOnNativeEl(null);\n      routerLink.isAnchorElement = true;\n\n      inject(Router)\n        .events.pipe(takeUntilDestroyed())\n        .subscribe((s) => {\n          if (s instanceof NavigationEnd) {\n            routerLink.updateHref();\n          }\n        });\n    }\n  }\n  return SbbRouterLink as unknown as AbstractConstructor & T;\n}",
          "rawdescription": "Patches the behavior of the Angular RouterLink.\nWith this patch the RouterLink recognizes the web component links\nas native links and processes them correctly.\nTODO: Check whether there is support of Angular for that case:\n - https://github.com/angular/angular/pull/59567\n - https://github.com/angular/angular/issues/28345",
          "description": "<p>Patches the behavior of the Angular RouterLink.\nWith this patch the RouterLink recognizes the web component links\nas native links and processes them correctly.\nTODO: Check whether there is support of Angular for that case:</p>\n<ul>\n<li><a href=\"https://github.com/angular/angular/pull/59567\">https://github.com/angular/angular/pull/59567</a></li>\n<li><a href=\"https://github.com/angular/angular/issues/28345\">https://github.com/angular/angular/issues/28345</a></li>\n</ul>\n"
        }
      ]
    },
    "groupedFunctions": {
      "src/angular/core/attribute-transform.ts": [
        {
          "name": "booleanAttribute",
          "file": "src/angular/core/attribute-transform.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "<p>Transform an attribute value to a boolean value.\nWe do not use the Angular implementation because it treats &#39;false&#39; as a false value,\nwhich does not align with the Lit and native interpretation.</p>\n",
          "args": [
            {
              "name": "value",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "returnType": "boolean",
          "jsdoctags": [
            {
              "name": "value",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ]
    },
    "groupedEnumerations": {},
    "groupedTypeAliases": {}
  },
  "routes": [],
  "coverage": {
    "count": 1,
    "status": "low",
    "files": [
      {
        "filePath": "src/angular/accordion/accordion.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbAccordion",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/angular/action-group/action-group.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbActionGroup",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/angular/alert/alert-group/alert-group.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbAlertGroup",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/angular/alert/alert/alert.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbAlert",
        "coveragePercent": 0,
        "coverageCount": "0/13",
        "status": "low"
      },
      {
        "filePath": "src/angular/autocomplete-grid/autocomplete-grid-button/autocomplete-grid-button.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbAutocompleteGridButton",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/angular/autocomplete-grid/autocomplete-grid-cell/autocomplete-grid-cell.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbAutocompleteGridCell",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/angular/autocomplete-grid/autocomplete-grid-optgroup/autocomplete-grid-optgroup.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbAutocompleteGridOptgroup",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/angular/autocomplete-grid/autocomplete-grid-option/autocomplete-grid-option.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbAutocompleteGridOption",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/angular/autocomplete-grid/autocomplete-grid-row/autocomplete-grid-row.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbAutocompleteGridRow",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/angular/autocomplete-grid/autocomplete-grid/autocomplete-grid.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbAutocompleteGrid",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/angular/autocomplete/autocomplete.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbAutocomplete",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/angular/breadcrumb/breadcrumb-group/breadcrumb-group.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbBreadcrumbGroup",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/angular/breadcrumb/breadcrumb/breadcrumb.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbBreadcrumb",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/angular/button/accent-button-link/accent-button-link.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbAccentButtonLink",
        "coveragePercent": 0,
        "coverageCount": "0/12",
        "status": "low"
      },
      {
        "filePath": "src/angular/button/accent-button-static/accent-button-static.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbAccentButtonStatic",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/angular/button/accent-button/accent-button.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbAccentButton",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/angular/button/button-link/button-link.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbButtonLink",
        "coveragePercent": 0,
        "coverageCount": "0/12",
        "status": "low"
      },
      {
        "filePath": "src/angular/button/button-static/button-static.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbButtonStatic",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/angular/button/button/button.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbButton",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/angular/button/mini-button-group/mini-button-group.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbMiniButtonGroup",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/angular/button/mini-button/mini-button.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbMiniButton",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/angular/button/secondary-button-link/secondary-button-link.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbSecondaryButtonLink",
        "coveragePercent": 0,
        "coverageCount": "0/12",
        "status": "low"
      },
      {
        "filePath": "src/angular/button/secondary-button-static/secondary-button-static.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbSecondaryButtonStatic",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/angular/button/secondary-button/secondary-button.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbSecondaryButton",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/angular/button/transparent-button-link/transparent-button-link.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTransparentButtonLink",
        "coveragePercent": 0,
        "coverageCount": "0/12",
        "status": "low"
      },
      {
        "filePath": "src/angular/button/transparent-button-static/transparent-button-static.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTransparentButtonStatic",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/angular/button/transparent-button/transparent-button.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTransparentButton",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/angular/calendar/calendar.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbCalendar",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/angular/card/card-badge/card-badge.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbCardBadge",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/angular/card/card-button/card-button.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbCardButton",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/angular/card/card-link/card-link.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbCardLink",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/angular/card/card/card.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbCard",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/angular/checkbox/checkbox-group/checkbox-group.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbCheckboxGroup",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/angular/checkbox/checkbox-panel/checkbox-panel.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbCheckboxPanel",
        "coveragePercent": 0,
        "coverageCount": "0/14",
        "status": "low"
      },
      {
        "filePath": "src/angular/checkbox/checkbox/checkbox.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbCheckbox",
        "coveragePercent": 0,
        "coverageCount": "0/14",
        "status": "low"
      },
      {
        "filePath": "src/angular/chip-label/chip-label.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbChipLabel",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/angular/clock/clock.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbClock",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/angular/container/container/container.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbContainer",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/angular/container/sticky-bar/sticky-bar.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbStickyBar",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/angular/core/attribute-transform.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "booleanAttribute",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "src/angular/core/control-value-accessor-mixin.ts",
        "type": "class",
        "linktype": "classe",
        "name": "SbbControlValueAccessorMixinType",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/angular/core/control-value-accessor-mixin.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "SbbControlValueAccessorMixin",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/angular/core/router-link-support-mixin.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "SbbRouterLinkSupportMixin",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "src/angular/datepicker/datepicker-next-day/datepicker-next-day.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbDatepickerNextDay",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/angular/datepicker/datepicker-previous-day/datepicker-previous-day.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbDatepickerPreviousDay",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/angular/datepicker/datepicker-toggle/datepicker-toggle.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbDatepickerToggle",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/angular/datepicker/datepicker/datepicker.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbDatepicker",
        "coveragePercent": 0,
        "coverageCount": "0/13",
        "status": "low"
      },
      {
        "filePath": "src/angular/dialog/dialog-actions/dialog-actions.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbDialogActions",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/angular/dialog/dialog-content/dialog-content.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbDialogContent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/angular/dialog/dialog-title/dialog-title.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbDialogTitle",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/angular/dialog/dialog/dialog.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbDialog",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/angular/divider/divider.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbDivider",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/angular/expansion-panel/expansion-panel-content/expansion-panel-content.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbExpansionPanelContent",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/angular/expansion-panel/expansion-panel-header/expansion-panel-header.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbExpansionPanelHeader",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/angular/expansion-panel/expansion-panel/expansion-panel.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbExpansionPanel",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/angular/file-selector/file-selector-dropzone/file-selector-dropzone.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbFileSelectorDropzone",
        "coveragePercent": 0,
        "coverageCount": "0/15",
        "status": "low"
      },
      {
        "filePath": "src/angular/file-selector/file-selector/file-selector.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbFileSelector",
        "coveragePercent": 0,
        "coverageCount": "0/14",
        "status": "low"
      },
      {
        "filePath": "src/angular/flip-card/flip-card-details/flip-card-details.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbFlipCardDetails",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/angular/flip-card/flip-card-summary/flip-card-summary.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbFlipCardSummary",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/angular/flip-card/flip-card/flip-card.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbFlipCard",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/angular/footer/footer.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbFooter",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/angular/form-error/form-error.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbFormError",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/angular/form-field/form-field-clear/form-field-clear.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbFormFieldClear",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/angular/form-field/form-field/form-field.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbFormField",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/angular/header/header-button/header-button.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbHeaderButton",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/angular/header/header-link/header-link.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbHeaderLink",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/angular/header/header/header.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbHeader",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/angular/icon/icon.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbIcon",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/angular/image/image.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbImage",
        "coveragePercent": 0,
        "coverageCount": "0/15",
        "status": "low"
      },
      {
        "filePath": "src/angular/journey-header/journey-header.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbJourneyHeader",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/angular/lead-container/lead-container.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbLeadContainer",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/angular/link-list/link-list-anchor/link-list-anchor.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbLinkListAnchor",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/angular/link-list/link-list/link-list.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbLinkList",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/angular/link/block-link-button/block-link-button.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbBlockLinkButton",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/angular/link/block-link-static/block-link-static.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbBlockLinkStatic",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/angular/link/block-link/block-link.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbBlockLink",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/angular/link/link-button/link-button.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbLinkButton",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/angular/link/link-static/link-static.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbLinkStatic",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/angular/link/link/link.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbLink",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/angular/loading-indicator-circle/loading-indicator-circle.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbLoadingIndicatorCircle",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/angular/loading-indicator/loading-indicator.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbLoadingIndicator",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/angular/logo/logo.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbLogo",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/angular/map-container/map-container.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbMapContainer",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/angular/menu/menu-button/menu-button.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbMenuButton",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/angular/menu/menu-link/menu-link.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbMenuLink",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/angular/menu/menu/menu.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbMenu",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/angular/message/message.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbMessage",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/angular/navigation/navigation-button/navigation-button.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbNavigationButton",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/angular/navigation/navigation-link/navigation-link.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbNavigationLink",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/angular/navigation/navigation-list/navigation-list.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbNavigationList",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/angular/navigation/navigation-marker/navigation-marker.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbNavigationMarker",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/angular/navigation/navigation-section/navigation-section.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbNavigationSection",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/angular/navigation/navigation/navigation.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbNavigation",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/angular/notification/notification.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbNotification",
        "coveragePercent": 0,
        "coverageCount": "0/12",
        "status": "low"
      },
      {
        "filePath": "src/angular/option/optgroup/optgroup.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbOptGroup",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/angular/option/option/option.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbOption",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/angular/overlay/overlay.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbOverlay",
        "coveragePercent": 0,
        "coverageCount": "0/14",
        "status": "low"
      },
      {
        "filePath": "src/angular/paginator/compact-paginator/compact-paginator.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbCompactPaginator",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/angular/paginator/paginator/paginator.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbPaginator",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/angular/popover/popover-trigger/popover-trigger.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbPopoverTrigger",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/angular/popover/popover/popover.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbPopover",
        "coveragePercent": 0,
        "coverageCount": "0/13",
        "status": "low"
      },
      {
        "filePath": "src/angular/radio-button/radio-button-group/radio-button-group.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbRadioButtonGroup",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/angular/radio-button/radio-button-panel/radio-button-panel.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbRadioButtonPanel",
        "coveragePercent": 0,
        "coverageCount": "0/14",
        "status": "low"
      },
      {
        "filePath": "src/angular/radio-button/radio-button/radio-button.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbRadioButton",
        "coveragePercent": 0,
        "coverageCount": "0/12",
        "status": "low"
      },
      {
        "filePath": "src/angular/screen-reader-only/screen-reader-only.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbScreenReaderOnly",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/angular/select/select.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbSelect",
        "coveragePercent": 0,
        "coverageCount": "0/18",
        "status": "low"
      },
      {
        "filePath": "src/angular/selection-expansion-panel/selection-expansion-panel.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbSelectionExpansionPanel",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/angular/signet/signet.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbSignet",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/angular/skiplink-list/skiplink-list.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbSkiplinkList",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/angular/slider/slider.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbSlider",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/angular/status/status.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbStatus",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/angular/stepper/step-label/step-label.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbStepLabel",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/angular/stepper/step/step.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbStep",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/angular/stepper/stepper/stepper.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbStepper",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/angular/table/table-wrapper/table-wrapper.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTableWrapper",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/angular/tabs/tab-group/tab-group.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTabGroup",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/angular/tabs/tab-label/tab-label.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTabLabel",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/angular/tabs/tab/tab.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTab",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/angular/tag/tag-group/tag-group.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTagGroup",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/angular/tag/tag/tag.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTag",
        "coveragePercent": 0,
        "coverageCount": "0/14",
        "status": "low"
      },
      {
        "filePath": "src/angular/teaser-hero/teaser-hero.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTeaserHero",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/angular/teaser-product/teaser-product-static/teaser-product-static.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTeaserProductStatic",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/angular/teaser-product/teaser-product/teaser-product.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTeaserProduct",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/angular/teaser/teaser.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTeaser",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/angular/time-input/time-input.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTimeInput",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/angular/timetable-occupancy-icon/timetable-occupancy-icon.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTimetableOccupancyIcon",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/angular/timetable-occupancy/timetable-occupancy.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTimetableOccupancy",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/angular/title/title.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTitle",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/angular/toast/toast.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbToast",
        "coveragePercent": 0,
        "coverageCount": "0/12",
        "status": "low"
      },
      {
        "filePath": "src/angular/toggle-check/toggle-check.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbToggleCheck",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/angular/toggle/toggle-option/toggle-option.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbToggleOption",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/angular/toggle/toggle/toggle.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbToggle",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/angular/train/train-blocked-passage/train-blocked-passage.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTrainBlockedPassage",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/angular/train/train-formation/train-formation.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTrainFormation",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/angular/train/train-wagon/train-wagon.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTrainWagon",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/angular/train/train/train.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTrain",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/angular/visual-checkbox/visual-checkbox.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbVisualCheckbox",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/showcase/.storybook/preview.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "breakpointNames",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/showcase/.storybook/preview.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "breakpoints",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/showcase/.storybook/preview.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "getViewportName",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/showcase/.storybook/preview.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "preview",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/showcase/.storybook/preview.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "storybookViewports",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/showcase/stories/button/button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Default",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/showcase/stories/button/button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Disabled",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/showcase/stories/button/button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Icon",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/showcase/stories/button/button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "meta",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/showcase/stories/button/button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Negative",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/showcase/stories/button/button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "SizeM",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      }
    ]
  }
}

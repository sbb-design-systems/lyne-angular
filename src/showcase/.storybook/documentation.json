{
  "pipes": [],
  "interfaces": [],
  "injectables": [],
  "guards": [],
  "interceptors": [],
  "classes": [],
  "directives": [
    {
      "name": "SbbAccentButtonDirective",
      "id": "directive-SbbAccentButtonDirective-c67e73ccdefd22eee096c88cae110d3b19fb8045cf2d3a5ea7446036710941fbcec6cdf8ca7e1900b355bf8651686d6c6e4965b60062626dc2d53ef0a069c2de",
      "file": "src/angular/button/accent-button/accent-button.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbAccentButtonElement } from '@sbb-esta/lyne-elements/button/accent-button.js';\nimport '@sbb-esta/lyne-elements/button/accent-button.js';\nimport { SbbButtonSize } from '@sbb-esta/lyne-elements/button.js';\nimport { SbbButtonType } from '@sbb-esta/lyne-elements/core/base-elements.js';\n\n@Directive({\n  selector: 'sbb-accent-button',\n  standalone: true,\n})\nexport class SbbAccentButtonDirective {\n  #element: ElementRef<SbbAccentButtonElement> = inject(ElementRef<SbbAccentButtonElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: SbbButtonSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbButtonSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'disabled-interactive', transform: booleanAttribute })\n  public set disabledInteractive(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabledInteractive = value));\n  }\n  public get disabledInteractive(): boolean {\n    return this.#element.nativeElement.disabledInteractive;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set form(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.form = value));\n  }\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set type(value: SbbButtonType) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): SbbButtonType {\n    return this.#element.nativeElement.type;\n  }\n}\n",
      "selector": "sbb-accent-button",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 52,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled-interactive",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 44,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "form",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 60,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 68,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "SbbButtonSize",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 84,
          "type": "SbbButtonType",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 76,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbButtonSize",
            "line": 21
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 29
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 35,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 38
          }
        },
        "disabledInteractive": {
          "name": "disabledInteractive",
          "setSignature": {
            "name": "disabledInteractive",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 44,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabledInteractive",
            "type": "boolean",
            "returnType": "boolean",
            "line": 47
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 52,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 55
          }
        },
        "form": {
          "name": "form",
          "setSignature": {
            "name": "form",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 60,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 63
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 68,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 71
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 76,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 79
          }
        },
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 84,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "SbbButtonType",
            "line": 87
          }
        }
      }
    },
    {
      "name": "SbbAccentButtonLinkDirective",
      "id": "directive-SbbAccentButtonLinkDirective-34efe467ac20d9bebeacf9f00c03ff4a6dc7768aa3fbe9d4104e97e106022d48d72a10af2e0a03a37355f937b6ff7edebfc57be7dbac99fe632d4daf6e0b1664",
      "file": "src/angular/button/accent-button-link/accent-button-link.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbAccentButtonLinkElement } from '@sbb-esta/lyne-elements/button/accent-button-link.js';\nimport '@sbb-esta/lyne-elements/button/accent-button-link.js';\nimport { SbbButtonSize } from '@sbb-esta/lyne-elements/button.js';\nimport { LinkTargetType } from '@sbb-esta/lyne-elements/core/base-elements.js';\n\n@Directive({\n  selector: 'sbb-accent-button-link',\n  standalone: true,\n})\nexport class SbbAccentButtonLinkDirective {\n  #element: ElementRef<SbbAccentButtonLinkElement> = inject(ElementRef<SbbAccentButtonLinkElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: SbbButtonSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbButtonSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'disabled-interactive', transform: booleanAttribute })\n  public set disabledInteractive(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabledInteractive = value));\n  }\n  public get disabledInteractive(): boolean {\n    return this.#element.nativeElement.disabledInteractive;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set href(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.href = value));\n  }\n  public get href(): string {\n    return this.#element.nativeElement.href;\n  }\n\n  @Input()\n  public set target(value: LinkTargetType | string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.target = value));\n  }\n  public get target(): LinkTargetType | string {\n    return this.#element.nativeElement.target;\n  }\n\n  @Input()\n  public set rel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.rel = value));\n  }\n  public get rel(): string {\n    return this.#element.nativeElement.rel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set download(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.download = value));\n  }\n  public get download(): boolean {\n    return this.#element.nativeElement.download;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n}\n",
      "selector": "sbb-accent-button-link",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 93,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 52,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled-interactive",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 44,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "download",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 84,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "href",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 60,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "rel",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 76,
          "type": "string",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "SbbButtonSize",
          "decorators": []
        },
        {
          "name": "target",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 68,
          "type": "LinkTargetType | string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbButtonSize",
            "line": 21
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 29
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 35,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 38
          }
        },
        "disabledInteractive": {
          "name": "disabledInteractive",
          "setSignature": {
            "name": "disabledInteractive",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 44,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabledInteractive",
            "type": "boolean",
            "returnType": "boolean",
            "line": 47
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 52,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 55
          }
        },
        "href": {
          "name": "href",
          "setSignature": {
            "name": "href",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 60,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "href",
            "type": "string",
            "returnType": "string",
            "line": 63
          }
        },
        "target": {
          "name": "target",
          "setSignature": {
            "name": "target",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 68,
            "jsdoctags": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "target",
            "type": "",
            "returnType": "LinkTargetType | string",
            "line": 71
          }
        },
        "rel": {
          "name": "rel",
          "setSignature": {
            "name": "rel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 76,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "rel",
            "type": "string",
            "returnType": "string",
            "line": 79
          }
        },
        "download": {
          "name": "download",
          "setSignature": {
            "name": "download",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 84,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "download",
            "type": "boolean",
            "returnType": "boolean",
            "line": 87
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 93,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 96
          }
        }
      }
    },
    {
      "name": "SbbAccentButtonStaticDirective",
      "id": "directive-SbbAccentButtonStaticDirective-590c365446f26228b1dda7b0aa84b9771107d2c3334126a710e7899ab34111a6e46812199d0f174a331dbbcc3b748305465fbdd467862b01ecadd2efe9a33203",
      "file": "src/angular/button/accent-button-static/accent-button-static.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbAccentButtonStaticElement } from '@sbb-esta/lyne-elements/button/accent-button-static.js';\nimport '@sbb-esta/lyne-elements/button/accent-button-static.js';\nimport { SbbButtonSize } from '@sbb-esta/lyne-elements/button.js';\n\n@Directive({\n  selector: 'sbb-accent-button-static',\n  standalone: true,\n})\nexport class SbbAccentButtonStaticDirective {\n  #element: ElementRef<SbbAccentButtonStaticElement> = inject(\n    ElementRef<SbbAccentButtonStaticElement>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: SbbButtonSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbButtonSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n}\n",
      "selector": "sbb-accent-button-static",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 44,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "SbbButtonSize",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 19,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbButtonSize",
            "line": 22
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 27,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 30
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 36,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 39
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 44,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 47
          }
        }
      }
    },
    {
      "name": "SbbAccordionDirective",
      "id": "directive-SbbAccordionDirective-a2ba64f44a050d756e789e7261a2c6790c05833d506b93f80d684499148d4734d50c8575bd83849a294d7252d7df4f8dbf981f48f9465cafa81d2b12a8bcdaea",
      "file": "src/angular/accordion/accordion.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbAccordionElement } from '@sbb-esta/lyne-elements/accordion.js';\nimport '@sbb-esta/lyne-elements/accordion.js';\nimport { SbbTitleLevel } from '@sbb-esta/lyne-elements/title.js';\n\n@Directive({\n  selector: 'sbb-accordion',\n  standalone: true,\n})\nexport class SbbAccordionDirective {\n  #element: ElementRef<SbbAccordionElement> = inject(ElementRef<SbbAccordionElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: 's' | 'l') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): 's' | 'l' {\n    return this.#element.nativeElement.size;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'title-level' })\n  public set titleLevel(value: SbbTitleLevel | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleLevel = value));\n  }\n  public get titleLevel(): SbbTitleLevel | null {\n    return this.#element.nativeElement.titleLevel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set multi(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.multi = value));\n  }\n  public get multi(): boolean {\n    return this.#element.nativeElement.multi;\n  }\n}\n",
      "selector": "sbb-accordion",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "multi",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "\"s\" | \"l\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "title-level",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "SbbTitleLevel | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"s\" | \"l\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"s\" | \"l\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "\"s\" | \"l\"",
            "line": 20
          }
        },
        "titleLevel": {
          "name": "titleLevel",
          "setSignature": {
            "name": "titleLevel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTitleLevel | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTitleLevel | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleLevel",
            "type": "",
            "returnType": "SbbTitleLevel | null",
            "line": 29
          }
        },
        "multi": {
          "name": "multi",
          "setSignature": {
            "name": "multi",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 34,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "multi",
            "type": "boolean",
            "returnType": "boolean",
            "line": 37
          }
        }
      }
    },
    {
      "name": "SbbActionGroupDirective",
      "id": "directive-SbbActionGroupDirective-18bd17079029aadd8847d81b41d4d579a161f6f7bdce69704f893665eb1d4269f0a740daf2e2d429a1623340f5e423216f59a48e8ff3869f6b935e56acc459a9",
      "file": "src/angular/action-group/action-group.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport type { SbbActionGroupElement } from '@sbb-esta/lyne-elements/action-group.js';\nimport '@sbb-esta/lyne-elements/action-group.js';\nimport { SbbButtonSize } from '@sbb-esta/lyne-elements/button.js';\nimport { SbbHorizontalFrom, SbbOrientation } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport { SbbLinkSize } from '@sbb-esta/lyne-elements/link.js';\n\n@Directive({\n  selector: 'sbb-action-group',\n  standalone: true,\n})\nexport class SbbActionGroupDirective {\n  #element: ElementRef<SbbActionGroupElement> = inject(ElementRef<SbbActionGroupElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'align-group' })\n  public set alignGroup(value: 'start' | 'center' | 'stretch' | 'end') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.alignGroup = value));\n  }\n  public get alignGroup(): 'start' | 'center' | 'stretch' | 'end' {\n    return this.#element.nativeElement.alignGroup;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'horizontal-from' })\n  public set horizontalFrom(value: SbbHorizontalFrom) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.horizontalFrom = value));\n  }\n  public get horizontalFrom(): SbbHorizontalFrom {\n    return this.#element.nativeElement.horizontalFrom;\n  }\n\n  @Input()\n  public set orientation(value: SbbOrientation) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.orientation = value));\n  }\n  public get orientation(): SbbOrientation {\n    return this.#element.nativeElement.orientation;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'button-size' })\n  public set buttonSize(value: SbbButtonSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.buttonSize = value));\n  }\n  public get buttonSize(): SbbButtonSize {\n    return this.#element.nativeElement.buttonSize;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'link-size' })\n  public set linkSize(value: SbbLinkSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.linkSize = value));\n  }\n  public get linkSize(): SbbLinkSize {\n    return this.#element.nativeElement.linkSize;\n  }\n}\n",
      "selector": "sbb-action-group",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "align-group",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "\"start\" | \"center\" | \"stretch\" | \"end\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "button-size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 45,
          "type": "SbbButtonSize",
          "decorators": []
        },
        {
          "required": false,
          "name": "horizontal-from",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "SbbHorizontalFrom",
          "decorators": []
        },
        {
          "required": false,
          "name": "link-size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 54,
          "type": "SbbLinkSize",
          "decorators": []
        },
        {
          "name": "orientation",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "SbbOrientation",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "alignGroup": {
          "name": "alignGroup",
          "setSignature": {
            "name": "alignGroup",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"start\" | \"center\" | \"stretch\" | \"end\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 19,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"start\" | \"center\" | \"stretch\" | \"end\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "alignGroup",
            "type": "",
            "returnType": "\"start\" | \"center\" | \"stretch\" | \"end\"",
            "line": 22
          }
        },
        "horizontalFrom": {
          "name": "horizontalFrom",
          "setSignature": {
            "name": "horizontalFrom",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbHorizontalFrom",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 28,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbHorizontalFrom",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "horizontalFrom",
            "type": "",
            "returnType": "SbbHorizontalFrom",
            "line": 31
          }
        },
        "orientation": {
          "name": "orientation",
          "setSignature": {
            "name": "orientation",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbOrientation",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 36,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbOrientation",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "orientation",
            "type": "",
            "returnType": "SbbOrientation",
            "line": 39
          }
        },
        "buttonSize": {
          "name": "buttonSize",
          "setSignature": {
            "name": "buttonSize",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 45,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "buttonSize",
            "type": "",
            "returnType": "SbbButtonSize",
            "line": 48
          }
        },
        "linkSize": {
          "name": "linkSize",
          "setSignature": {
            "name": "linkSize",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 54,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "linkSize",
            "type": "",
            "returnType": "SbbLinkSize",
            "line": 57
          }
        }
      }
    },
    {
      "name": "SbbAlertDirective",
      "id": "directive-SbbAlertDirective-e66690b14a9d83867cb5dff7a6cac9c3b6430a7b3c33040dff028023fa10f21ed698e75e234bb530020b9bce952c1712a3c53daaff8840afc7d63a662ed18737",
      "file": "src/angular/alert/alert/alert.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, Output, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbAlertElement } from '@sbb-esta/lyne-elements/alert/alert.js';\nimport { SbbTitleLevel } from '@sbb-esta/lyne-elements/title.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/alert/alert.js';\n\n@Directive({\n  selector: 'sbb-alert',\n  standalone: true,\n})\nexport class SbbAlertDirective {\n  #element: ElementRef<SbbAlertElement> = inject(ElementRef<SbbAlertElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set readonly(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.readonly = value));\n  }\n  public get readonly(): boolean {\n    return this.#element.nativeElement.readonly;\n  }\n\n  @Input()\n  public set size(value: 's' | 'm' | 'l') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): 's' | 'm' | 'l' {\n    return this.#element.nativeElement.size;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'title-content' })\n  public set titleContent(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleContent = value));\n  }\n  public get titleContent(): string {\n    return this.#element.nativeElement.titleContent;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'title-level' })\n  public set titleLevel(value: SbbTitleLevel) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleLevel = value));\n  }\n  public get titleLevel(): SbbTitleLevel {\n    return this.#element.nativeElement.titleLevel;\n  }\n\n  @Input()\n  public set animation(value: 'open' | 'close' | 'all' | 'none') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.animation = value));\n  }\n  public get animation(): 'open' | 'close' | 'all' | 'none' {\n    return this.#element.nativeElement.animation;\n  }\n\n  @Output() public willOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  );\n\n  @Output() public didOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  );\n\n  @Output() public willClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  );\n\n  @Output() public didClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  );\n\n  public get isOpen(): boolean {\n    return this.#element.nativeElement.isOpen;\n  }\n\n  public open(): void {\n    return this.#element.nativeElement.open();\n  }\n\n  public close(): void {\n    return this.#element.nativeElement.close();\n  }\n}\n",
      "selector": "sbb-alert",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "name": "animation",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 61,
          "type": "\"open\" | \"close\" | \"all\" | \"none\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "readonly",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "\"s\" | \"m\" | \"l\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "title-content",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 44,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "title-level",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 53,
          "type": "SbbTitleLevel",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "didClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 83,
          "type": "Observable<void>"
        },
        {
          "name": "didOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 73,
          "type": "Observable<void>"
        },
        {
          "name": "willClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 78,
          "type": "Observable<void>"
        },
        {
          "name": "willOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 68,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 96,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        },
        {
          "name": "open",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 92,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": [],
      "accessors": {
        "readonly": {
          "name": "readonly",
          "setSignature": {
            "name": "readonly",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "readonly",
            "type": "boolean",
            "returnType": "boolean",
            "line": 21
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"s\" | \"m\" | \"l\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"s\" | \"m\" | \"l\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "\"s\" | \"m\" | \"l\"",
            "line": 29
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 35,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 38
          }
        },
        "titleContent": {
          "name": "titleContent",
          "setSignature": {
            "name": "titleContent",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 44,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleContent",
            "type": "string",
            "returnType": "string",
            "line": 47
          }
        },
        "titleLevel": {
          "name": "titleLevel",
          "setSignature": {
            "name": "titleLevel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 53,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleLevel",
            "type": "",
            "returnType": "SbbTitleLevel",
            "line": 56
          }
        },
        "animation": {
          "name": "animation",
          "setSignature": {
            "name": "animation",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"open\" | \"close\" | \"all\" | \"none\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 61,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"open\" | \"close\" | \"all\" | \"none\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "animation",
            "type": "",
            "returnType": "\"open\" | \"close\" | \"all\" | \"none\"",
            "line": 64
          }
        },
        "isOpen": {
          "name": "isOpen",
          "getSignature": {
            "name": "isOpen",
            "type": "boolean",
            "returnType": "boolean",
            "line": 88
          }
        }
      }
    },
    {
      "name": "SbbAlertGroupDirective",
      "id": "directive-SbbAlertGroupDirective-fce3057be5c14502e11d522a0a3f46d860e75418268727ac8790ba359a8afe43bd7bf98043f735481ee8286c891d72c5aa8883062c08ba87a7dfed064389aa84",
      "file": "src/angular/alert/alert-group/alert-group.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, Output, inject } from '@angular/core';\nimport type { SbbAlertGroupElement } from '@sbb-esta/lyne-elements/alert/alert-group.js';\nimport { SbbTitleLevel } from '@sbb-esta/lyne-elements/title.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/alert/alert-group.js';\n\n@Directive({\n  selector: 'sbb-alert-group',\n  standalone: true,\n})\nexport class SbbAlertGroupDirective {\n  #element: ElementRef<SbbAlertGroupElement> = inject(ElementRef<SbbAlertGroupElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set role(value: 'alert' | 'status' | string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.role = value));\n  }\n  public get role(): 'alert' | 'status' | string {\n    return this.#element.nativeElement.role;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'accessibility-title' })\n  public set accessibilityTitle(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityTitle = value));\n  }\n  public get accessibilityTitle(): string {\n    return this.#element.nativeElement.accessibilityTitle;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'accessibility-title-level' })\n  public set accessibilityTitleLevel(value: SbbTitleLevel) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.accessibilityTitleLevel = value),\n    );\n  }\n  public get accessibilityTitleLevel(): SbbTitleLevel {\n    return this.#element.nativeElement.accessibilityTitleLevel;\n  }\n\n  @Output() public empty: Observable<void> = fromEvent<void>(this.#element.nativeElement, 'empty');\n}\n",
      "selector": "sbb-alert-group",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-title",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "accessibility-title-level",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "SbbTitleLevel",
          "decorators": []
        },
        {
          "name": "role",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "\"alert\" | \"status\" | string",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "empty",
          "defaultValue": "fromEvent<void>(this.#element.nativeElement, 'empty')",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 44,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "role": {
          "name": "role",
          "setSignature": {
            "name": "role",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"alert\" | \"status\" | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"alert\" | \"status\" | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "role",
            "type": "",
            "returnType": "\"alert\" | \"status\" | string",
            "line": 20
          }
        },
        "accessibilityTitle": {
          "name": "accessibilityTitle",
          "setSignature": {
            "name": "accessibilityTitle",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityTitle",
            "type": "string",
            "returnType": "string",
            "line": 29
          }
        },
        "accessibilityTitleLevel": {
          "name": "accessibilityTitleLevel",
          "setSignature": {
            "name": "accessibilityTitleLevel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 35,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityTitleLevel",
            "type": "",
            "returnType": "SbbTitleLevel",
            "line": 40
          }
        }
      }
    },
    {
      "name": "SbbAutocompleteDirective",
      "id": "directive-SbbAutocompleteDirective-6e45108763ae10e58c0e07335168547a4426df12256094a898e1333cb84fd61d4b5f09b11a2ccd03d9af6b330edc52b867c5d6d7fcc05f2465e68ea5e5a3f84a",
      "file": "src/angular/autocomplete/autocomplete.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, Output, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbAutocompleteElement } from '@sbb-esta/lyne-elements/autocomplete.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/autocomplete.js';\n\n@Directive({\n  selector: 'sbb-autocomplete',\n  standalone: true,\n})\nexport class SbbAutocompleteDirective {\n  #element: ElementRef<SbbAutocompleteElement> = inject(ElementRef<SbbAutocompleteElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input()\n  public set origin(value: string | HTMLElement | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.origin = value));\n  }\n  public get origin(): string | HTMLElement | null {\n    return this.#element.nativeElement.origin;\n  }\n\n  @Input()\n  public set trigger(value: string | HTMLInputElement | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.trigger = value));\n  }\n  public get trigger(): string | HTMLInputElement | null {\n    return this.#element.nativeElement.trigger;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'preserve-icon-space', transform: booleanAttribute })\n  public set preserveIconSpace(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.preserveIconSpace = value));\n  }\n  public get preserveIconSpace(): boolean {\n    return this.#element.nativeElement.preserveIconSpace;\n  }\n\n  @Output() public willOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  );\n\n  @Output() public didOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  );\n\n  @Output() public willClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  );\n\n  @Output() public didClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  );\n\n  public get originElement(): HTMLElement {\n    return this.#element.nativeElement.originElement;\n  }\n\n  public get triggerElement(): HTMLInputElement | undefined {\n    return this.#element.nativeElement.triggerElement;\n  }\n\n  public get isOpen(): boolean {\n    return this.#element.nativeElement.isOpen;\n  }\n\n  public open(): void {\n    return this.#element.nativeElement.open();\n  }\n\n  public close(): void {\n    return this.#element.nativeElement.close();\n  }\n}\n",
      "selector": "sbb-autocomplete",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "origin",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "string | HTMLElement | null",
          "decorators": []
        },
        {
          "required": false,
          "name": "preserve-icon-space",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 42,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "trigger",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "string | HTMLInputElement | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "didClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 64,
          "type": "Observable<void>"
        },
        {
          "name": "didOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 54,
          "type": "Observable<void>"
        },
        {
          "name": "willClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 59,
          "type": "Observable<void>"
        },
        {
          "name": "willOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 49,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 85,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        },
        {
          "name": "open",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 81,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": [],
      "accessors": {
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 20
          }
        },
        "origin": {
          "name": "origin",
          "setSignature": {
            "name": "origin",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | HTMLElement | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | HTMLElement | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "origin",
            "type": "",
            "returnType": "string | HTMLElement | null",
            "line": 28
          }
        },
        "trigger": {
          "name": "trigger",
          "setSignature": {
            "name": "trigger",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | HTMLInputElement | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 33,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | HTMLInputElement | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "trigger",
            "type": "",
            "returnType": "string | HTMLInputElement | null",
            "line": 36
          }
        },
        "preserveIconSpace": {
          "name": "preserveIconSpace",
          "setSignature": {
            "name": "preserveIconSpace",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 42,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "preserveIconSpace",
            "type": "boolean",
            "returnType": "boolean",
            "line": 45
          }
        },
        "originElement": {
          "name": "originElement",
          "getSignature": {
            "name": "originElement",
            "type": "",
            "returnType": "HTMLElement",
            "line": 69
          }
        },
        "triggerElement": {
          "name": "triggerElement",
          "getSignature": {
            "name": "triggerElement",
            "type": "",
            "returnType": "HTMLInputElement | undefined",
            "line": 73
          }
        },
        "isOpen": {
          "name": "isOpen",
          "getSignature": {
            "name": "isOpen",
            "type": "boolean",
            "returnType": "boolean",
            "line": 77
          }
        }
      }
    },
    {
      "name": "SbbAutocompleteGridButtonDirective",
      "id": "directive-SbbAutocompleteGridButtonDirective-ec9ff967325e07a5fcdbea08a4458656e814e3bf6a8024584eed4ee5cd468f373e65b2a0ea687b7244f6f3d0ae5db627a6067ba60f4ad516dc422ea0b0f71b8d",
      "file": "src/angular/autocomplete-grid/autocomplete-grid-button/autocomplete-grid-button.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbAutocompleteGridButtonElement } from '@sbb-esta/lyne-elements/autocomplete-grid/autocomplete-grid-button.js';\nimport '@sbb-esta/lyne-elements/autocomplete-grid/autocomplete-grid-button.js';\nimport { SbbAutocompleteGridOptionElement } from '@sbb-esta/lyne-elements/autocomplete-grid/autocomplete-grid-option.js';\n\n@Directive({\n  selector: 'sbb-autocomplete-grid-button',\n  standalone: true,\n})\nexport class SbbAutocompleteGridButtonDirective {\n  #element: ElementRef<SbbAutocompleteGridButtonElement> = inject(\n    ElementRef<SbbAutocompleteGridButtonElement>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  public get option(): SbbAutocompleteGridOptionElement | null {\n    return this.#element.nativeElement.option;\n  }\n}\n",
      "selector": "sbb-autocomplete-grid-button",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 19,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 22
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 27,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 30
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 36,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 39
          }
        },
        "option": {
          "name": "option",
          "getSignature": {
            "name": "option",
            "type": "",
            "returnType": "SbbAutocompleteGridOptionElement | null",
            "line": 43
          }
        }
      }
    },
    {
      "name": "SbbAutocompleteGridCellDirective",
      "id": "directive-SbbAutocompleteGridCellDirective-d2a9c61eb6ec5512d227c74c686a1d9f1efdaa6d396e2b6d79c2d0986522752573d46de94ad060907d9ac12c7af98936a58599f8e18480ee3cc606503f96310d",
      "file": "src/angular/autocomplete-grid/autocomplete-grid-cell/autocomplete-grid-cell.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive } from '@angular/core';\nimport '@sbb-esta/lyne-elements/autocomplete-grid/autocomplete-grid-cell.js';\n\n@Directive({\n  selector: 'sbb-autocomplete-grid-cell',\n  standalone: true,\n})\nexport class SbbAutocompleteGridCellDirective {}\n",
      "selector": "sbb-autocomplete-grid-cell",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": []
    },
    {
      "name": "SbbAutocompleteGridDirective",
      "id": "directive-SbbAutocompleteGridDirective-c0ca9951fc8fe53d83d137b27a5b0012adccdca9d9c598a9a0597da2526e3d1d0d25b3a49772823fac68e7d15205c639a7978c8747cad701e6210190b6ee0836",
      "file": "src/angular/autocomplete-grid/autocomplete-grid/autocomplete-grid.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, Output, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbAutocompleteGridElement } from '@sbb-esta/lyne-elements/autocomplete-grid/autocomplete-grid.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/autocomplete-grid/autocomplete-grid.js';\n\n@Directive({\n  selector: 'sbb-autocomplete-grid',\n  standalone: true,\n})\nexport class SbbAutocompleteGridDirective {\n  #element: ElementRef<SbbAutocompleteGridElement> = inject(ElementRef<SbbAutocompleteGridElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input()\n  public set origin(value: string | HTMLElement | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.origin = value));\n  }\n  public get origin(): string | HTMLElement | null {\n    return this.#element.nativeElement.origin;\n  }\n\n  @Input()\n  public set trigger(value: string | HTMLInputElement | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.trigger = value));\n  }\n  public get trigger(): string | HTMLInputElement | null {\n    return this.#element.nativeElement.trigger;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'preserve-icon-space', transform: booleanAttribute })\n  public set preserveIconSpace(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.preserveIconSpace = value));\n  }\n  public get preserveIconSpace(): boolean {\n    return this.#element.nativeElement.preserveIconSpace;\n  }\n\n  @Output() public willOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  );\n\n  @Output() public didOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  );\n\n  @Output() public willClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  );\n\n  @Output() public didClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  );\n\n  public get originElement(): HTMLElement {\n    return this.#element.nativeElement.originElement;\n  }\n\n  public get triggerElement(): HTMLInputElement | undefined {\n    return this.#element.nativeElement.triggerElement;\n  }\n\n  public get isOpen(): boolean {\n    return this.#element.nativeElement.isOpen;\n  }\n\n  public open(): void {\n    return this.#element.nativeElement.open();\n  }\n\n  public close(): void {\n    return this.#element.nativeElement.close();\n  }\n}\n",
      "selector": "sbb-autocomplete-grid",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "origin",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "string | HTMLElement | null",
          "decorators": []
        },
        {
          "required": false,
          "name": "preserve-icon-space",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 42,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "trigger",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "string | HTMLInputElement | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "didClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 64,
          "type": "Observable<void>"
        },
        {
          "name": "didOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 54,
          "type": "Observable<void>"
        },
        {
          "name": "willClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 59,
          "type": "Observable<void>"
        },
        {
          "name": "willOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 49,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 85,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        },
        {
          "name": "open",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 81,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": [],
      "accessors": {
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 20
          }
        },
        "origin": {
          "name": "origin",
          "setSignature": {
            "name": "origin",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | HTMLElement | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | HTMLElement | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "origin",
            "type": "",
            "returnType": "string | HTMLElement | null",
            "line": 28
          }
        },
        "trigger": {
          "name": "trigger",
          "setSignature": {
            "name": "trigger",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | HTMLInputElement | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 33,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | HTMLInputElement | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "trigger",
            "type": "",
            "returnType": "string | HTMLInputElement | null",
            "line": 36
          }
        },
        "preserveIconSpace": {
          "name": "preserveIconSpace",
          "setSignature": {
            "name": "preserveIconSpace",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 42,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "preserveIconSpace",
            "type": "boolean",
            "returnType": "boolean",
            "line": 45
          }
        },
        "originElement": {
          "name": "originElement",
          "getSignature": {
            "name": "originElement",
            "type": "",
            "returnType": "HTMLElement",
            "line": 69
          }
        },
        "triggerElement": {
          "name": "triggerElement",
          "getSignature": {
            "name": "triggerElement",
            "type": "",
            "returnType": "HTMLInputElement | undefined",
            "line": 73
          }
        },
        "isOpen": {
          "name": "isOpen",
          "getSignature": {
            "name": "isOpen",
            "type": "boolean",
            "returnType": "boolean",
            "line": 77
          }
        }
      }
    },
    {
      "name": "SbbAutocompleteGridOptgroupDirective",
      "id": "directive-SbbAutocompleteGridOptgroupDirective-09dfd8cc43779756871fc882a2ecdfd07e44576d63916c65ecb9e251ce27b0abcadbee2ede2f1d348b9860668605d103ec6ee718f0003a23cc3b552e43887b27",
      "file": "src/angular/autocomplete-grid/autocomplete-grid-optgroup/autocomplete-grid-optgroup.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbAutocompleteGridOptgroupElement } from '@sbb-esta/lyne-elements/autocomplete-grid/autocomplete-grid-optgroup.js';\nimport '@sbb-esta/lyne-elements/autocomplete-grid/autocomplete-grid-optgroup.js';\n\n@Directive({\n  selector: 'sbb-autocomplete-grid-optgroup',\n  standalone: true,\n})\nexport class SbbAutocompleteGridOptgroupDirective {\n  #element: ElementRef<SbbAutocompleteGridOptgroupElement> = inject(\n    ElementRef<SbbAutocompleteGridOptgroupElement>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set label(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.label = value));\n  }\n  public get label(): string {\n    return this.#element.nativeElement.label;\n  }\n}\n",
      "selector": "sbb-autocomplete-grid-optgroup",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 21
          }
        },
        "label": {
          "name": "label",
          "setSignature": {
            "name": "label",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "label",
            "type": "string",
            "returnType": "string",
            "line": 29
          }
        }
      }
    },
    {
      "name": "SbbAutocompleteGridOptionDirective",
      "id": "directive-SbbAutocompleteGridOptionDirective-362654b1f9154c6ef232ede01cdb7644078e2ea6d2e1ca58d63d06305d1beccc9ed78cabfbc604170156c0ea9f9da61be3d6e6ec6ae749baa9dede8d2098ef26",
      "file": "src/angular/autocomplete-grid/autocomplete-grid-option/autocomplete-grid-option.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, Output, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbAutocompleteGridOptionElement } from '@sbb-esta/lyne-elements/autocomplete-grid/autocomplete-grid-option.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/autocomplete-grid/autocomplete-grid-option.js';\n\n@Directive({\n  selector: 'sbb-autocomplete-grid-option',\n  standalone: true,\n})\nexport class SbbAutocompleteGridOptionDirective {\n  #element: ElementRef<SbbAutocompleteGridOptionElement> = inject(\n    ElementRef<SbbAutocompleteGridOptionElement>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input()\n  public set value(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set selected(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.selected = value));\n  }\n  public get selected(): boolean {\n    return this.#element.nativeElement.selected;\n  }\n\n  @Output() public autocompleteOptionSelectionChange: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'autocompleteOptionSelectionChange',\n  );\n\n  @Output() public autocompleteOptionSelected: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'autocompleteOptionSelected',\n  );\n}\n",
      "selector": "sbb-autocomplete-grid-option",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "selected",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 44,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "autocompleteOptionSelected",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'autocompleteOptionSelected',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 56,
          "type": "Observable<void>"
        },
        {
          "name": "autocompleteOptionSelectionChange",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'autocompleteOptionSelectionChange',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 51,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 19,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 22
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 28,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 31
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 36,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "string",
            "returnType": "string",
            "line": 39
          }
        },
        "selected": {
          "name": "selected",
          "setSignature": {
            "name": "selected",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 44,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "selected",
            "type": "boolean",
            "returnType": "boolean",
            "line": 47
          }
        }
      }
    },
    {
      "name": "SbbAutocompleteGridRowDirective",
      "id": "directive-SbbAutocompleteGridRowDirective-649a8f1b369aa74a9e49f7deb19fc354aad8c4fb91599bb2e0ffe2bd94294ff795d9837c6ee9535e4baef4a5a32eafbaedfbc89ee281ebc51019bec0263df53a",
      "file": "src/angular/autocomplete-grid/autocomplete-grid-row/autocomplete-grid-row.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive } from '@angular/core';\nimport '@sbb-esta/lyne-elements/autocomplete-grid/autocomplete-grid-row.js';\n\n@Directive({\n  selector: 'sbb-autocomplete-grid-row',\n  standalone: true,\n})\nexport class SbbAutocompleteGridRowDirective {}\n",
      "selector": "sbb-autocomplete-grid-row",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": []
    },
    {
      "name": "SbbBlockLinkButtonDirective",
      "id": "directive-SbbBlockLinkButtonDirective-9c65f326e4e0ad502093527c22b432cb8993e2a8b5ee726dc59a134c8913a1b3b44fc27347449247788a2d75e6bff333278923ea919627d1aa1c6412fbae591f",
      "file": "src/angular/link/block-link-button/block-link-button.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbButtonType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport { SbbIconPlacement } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport type { SbbBlockLinkButtonElement } from '@sbb-esta/lyne-elements/link/block-link-button.js';\nimport '@sbb-esta/lyne-elements/link/block-link-button.js';\nimport { SbbLinkSize } from '@sbb-esta/lyne-elements/link.js';\n\n@Directive({\n  selector: 'sbb-block-link-button',\n  standalone: true,\n})\nexport class SbbBlockLinkButtonDirective {\n  #element: ElementRef<SbbBlockLinkButtonElement> = inject(ElementRef<SbbBlockLinkButtonElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'icon-placement' })\n  public set iconPlacement(value: SbbIconPlacement) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconPlacement = value));\n  }\n  public get iconPlacement(): SbbIconPlacement {\n    return this.#element.nativeElement.iconPlacement;\n  }\n\n  @Input()\n  public set size(value: SbbLinkSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbLinkSize {\n    return this.#element.nativeElement.size;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'disabled-interactive', transform: booleanAttribute })\n  public set disabledInteractive(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabledInteractive = value));\n  }\n  public get disabledInteractive(): boolean {\n    return this.#element.nativeElement.disabledInteractive;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set form(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.form = value));\n  }\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set type(value: SbbButtonType) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): SbbButtonType {\n    return this.#element.nativeElement.type;\n  }\n}\n",
      "selector": "sbb-block-link-button",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 54,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled-interactive",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 46,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "form",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 62,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 37,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-placement",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "SbbIconPlacement",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 70,
          "type": "string",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "SbbLinkSize",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 86,
          "type": "SbbButtonType",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 78,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "iconPlacement": {
          "name": "iconPlacement",
          "setSignature": {
            "name": "iconPlacement",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbIconPlacement",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 20,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbIconPlacement",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconPlacement",
            "type": "",
            "returnType": "SbbIconPlacement",
            "line": 23
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 28,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbLinkSize",
            "line": 31
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 37,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 40
          }
        },
        "disabledInteractive": {
          "name": "disabledInteractive",
          "setSignature": {
            "name": "disabledInteractive",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 46,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabledInteractive",
            "type": "boolean",
            "returnType": "boolean",
            "line": 49
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 54,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 57
          }
        },
        "form": {
          "name": "form",
          "setSignature": {
            "name": "form",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 62,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 65
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 70,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 73
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 78,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 81
          }
        },
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 86,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "SbbButtonType",
            "line": 89
          }
        }
      }
    },
    {
      "name": "SbbBlockLinkDirective",
      "id": "directive-SbbBlockLinkDirective-15cd590100d31b38fa553f2b347e42f2d052f9324daf3ee99bd7c905072c94a2209d89cbd5cc9e045f76564be6c2ed89d30a63fca6fce8d8ceef6404617efda2",
      "file": "src/angular/link/block-link/block-link.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { LinkTargetType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport { SbbIconPlacement } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport type { SbbBlockLinkElement } from '@sbb-esta/lyne-elements/link/block-link.js';\nimport { SbbLinkSize } from '@sbb-esta/lyne-elements/link.js';\nimport '@sbb-esta/lyne-elements/link/block-link.js';\n\n@Directive({\n  selector: 'sbb-block-link',\n  standalone: true,\n})\nexport class SbbBlockLinkDirective {\n  #element: ElementRef<SbbBlockLinkElement> = inject(ElementRef<SbbBlockLinkElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'icon-placement' })\n  public set iconPlacement(value: SbbIconPlacement) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconPlacement = value));\n  }\n  public get iconPlacement(): SbbIconPlacement {\n    return this.#element.nativeElement.iconPlacement;\n  }\n\n  @Input()\n  public set size(value: SbbLinkSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbLinkSize {\n    return this.#element.nativeElement.size;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set href(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.href = value));\n  }\n  public get href(): string {\n    return this.#element.nativeElement.href;\n  }\n\n  @Input()\n  public set target(value: LinkTargetType | string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.target = value));\n  }\n  public get target(): LinkTargetType | string {\n    return this.#element.nativeElement.target;\n  }\n\n  @Input()\n  public set rel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.rel = value));\n  }\n  public get rel(): string {\n    return this.#element.nativeElement.rel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set download(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.download = value));\n  }\n  public get download(): boolean {\n    return this.#element.nativeElement.download;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n}\n",
      "selector": "sbb-block-link",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 86,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 45,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "download",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 77,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "href",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 53,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 37,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-placement",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "SbbIconPlacement",
          "decorators": []
        },
        {
          "name": "rel",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 69,
          "type": "string",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "SbbLinkSize",
          "decorators": []
        },
        {
          "name": "target",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 61,
          "type": "LinkTargetType | string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "iconPlacement": {
          "name": "iconPlacement",
          "setSignature": {
            "name": "iconPlacement",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbIconPlacement",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 20,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbIconPlacement",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconPlacement",
            "type": "",
            "returnType": "SbbIconPlacement",
            "line": 23
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 28,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbLinkSize",
            "line": 31
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 37,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 40
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 45,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 48
          }
        },
        "href": {
          "name": "href",
          "setSignature": {
            "name": "href",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 53,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "href",
            "type": "string",
            "returnType": "string",
            "line": 56
          }
        },
        "target": {
          "name": "target",
          "setSignature": {
            "name": "target",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 61,
            "jsdoctags": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "target",
            "type": "",
            "returnType": "LinkTargetType | string",
            "line": 64
          }
        },
        "rel": {
          "name": "rel",
          "setSignature": {
            "name": "rel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 69,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "rel",
            "type": "string",
            "returnType": "string",
            "line": 72
          }
        },
        "download": {
          "name": "download",
          "setSignature": {
            "name": "download",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 77,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "download",
            "type": "boolean",
            "returnType": "boolean",
            "line": 80
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 86,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 89
          }
        }
      }
    },
    {
      "name": "SbbBlockLinkStaticDirective",
      "id": "directive-SbbBlockLinkStaticDirective-164c5281d7b19235e70c992d23f92bdf00a7e3af347f35143a7a7e1f62978edfbc1f053bc6d9b919000220db7d7fe092092418afd82e2afcce74cca2a4c394f6",
      "file": "src/angular/link/block-link-static/block-link-static.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbIconPlacement } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport type { SbbBlockLinkStaticElement } from '@sbb-esta/lyne-elements/link/block-link-static.js';\nimport { SbbLinkSize } from '@sbb-esta/lyne-elements/link.js';\nimport '@sbb-esta/lyne-elements/link/block-link-static.js';\n\n@Directive({\n  selector: 'sbb-block-link-static',\n  standalone: true,\n})\nexport class SbbBlockLinkStaticDirective {\n  #element: ElementRef<SbbBlockLinkStaticElement> = inject(ElementRef<SbbBlockLinkStaticElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'icon-placement' })\n  public set iconPlacement(value: SbbIconPlacement) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconPlacement = value));\n  }\n  public get iconPlacement(): SbbIconPlacement {\n    return this.#element.nativeElement.iconPlacement;\n  }\n\n  @Input()\n  public set size(value: SbbLinkSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbLinkSize {\n    return this.#element.nativeElement.size;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n}\n",
      "selector": "sbb-block-link-static",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 44,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-placement",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "SbbIconPlacement",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "SbbLinkSize",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "iconPlacement": {
          "name": "iconPlacement",
          "setSignature": {
            "name": "iconPlacement",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbIconPlacement",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 19,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbIconPlacement",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconPlacement",
            "type": "",
            "returnType": "SbbIconPlacement",
            "line": 22
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 27,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbLinkSize",
            "line": 30
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 36,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 39
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 44,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 47
          }
        }
      }
    },
    {
      "name": "SbbBreadcrumbDirective",
      "id": "directive-SbbBreadcrumbDirective-fa96b4e7276ac195e2e43f336f602564ff1775a9d35928b105372a944ac049f184638bb41a97d1def0d77e94b7c4ae41ffccbcc20f576a42112985a9765c7ceb",
      "file": "src/angular/breadcrumb/breadcrumb/breadcrumb.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbBreadcrumbElement } from '@sbb-esta/lyne-elements/breadcrumb/breadcrumb.js';\nimport '@sbb-esta/lyne-elements/breadcrumb/breadcrumb.js';\nimport { LinkTargetType } from '@sbb-esta/lyne-elements/core/base-elements.js';\n\n@Directive({\n  selector: 'sbb-breadcrumb',\n  standalone: true,\n})\nexport class SbbBreadcrumbDirective {\n  #element: ElementRef<SbbBreadcrumbElement> = inject(ElementRef<SbbBreadcrumbElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input()\n  public set href(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.href = value));\n  }\n  public get href(): string {\n    return this.#element.nativeElement.href;\n  }\n\n  @Input()\n  public set target(value: LinkTargetType | string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.target = value));\n  }\n  public get target(): LinkTargetType | string {\n    return this.#element.nativeElement.target;\n  }\n\n  @Input()\n  public set rel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.rel = value));\n  }\n  public get rel(): string {\n    return this.#element.nativeElement.rel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set download(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.download = value));\n  }\n  public get download(): boolean {\n    return this.#element.nativeElement.download;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n}\n",
      "selector": "sbb-breadcrumb",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 59,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "download",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 50,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "href",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "string",
          "decorators": []
        },
        {
          "name": "rel",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 42,
          "type": "string",
          "decorators": []
        },
        {
          "name": "target",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "LinkTargetType | string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 21
          }
        },
        "href": {
          "name": "href",
          "setSignature": {
            "name": "href",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "href",
            "type": "string",
            "returnType": "string",
            "line": 29
          }
        },
        "target": {
          "name": "target",
          "setSignature": {
            "name": "target",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 34,
            "jsdoctags": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "target",
            "type": "",
            "returnType": "LinkTargetType | string",
            "line": 37
          }
        },
        "rel": {
          "name": "rel",
          "setSignature": {
            "name": "rel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 42,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "rel",
            "type": "string",
            "returnType": "string",
            "line": 45
          }
        },
        "download": {
          "name": "download",
          "setSignature": {
            "name": "download",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 50,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "download",
            "type": "boolean",
            "returnType": "boolean",
            "line": 53
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 59,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 62
          }
        }
      }
    },
    {
      "name": "SbbBreadcrumbGroupDirective",
      "id": "directive-SbbBreadcrumbGroupDirective-783118e048a6d210b16a0a617481cf260524cc94eb57a2d94af32e4cca2425699a831ef8384f7d1f9a2092fc4820ebed739a400580cbd1bcc22e1a6d072e886d",
      "file": "src/angular/breadcrumb/breadcrumb-group/breadcrumb-group.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive } from '@angular/core';\nimport '@sbb-esta/lyne-elements/breadcrumb/breadcrumb-group.js';\n\n@Directive({\n  selector: 'sbb-breadcrumb-group',\n  standalone: true,\n})\nexport class SbbBreadcrumbGroupDirective {}\n",
      "selector": "sbb-breadcrumb-group",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": []
    },
    {
      "name": "SbbButtonDirective",
      "id": "directive-SbbButtonDirective-d22737ddf96aa9a90a6a52e62b73f7cd48aaf9eb01e7aff081505b8db42d08d3fdb4836e48cae66d7fb72283033d634ffffe3b9656b3ee8edbf5696c8dde6d4f",
      "file": "src/angular/button/button/button.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbButtonElement } from '@sbb-esta/lyne-elements/button/button.js';\nimport '@sbb-esta/lyne-elements/button/button.js';\nimport { SbbButtonSize } from '@sbb-esta/lyne-elements/button.js';\nimport { SbbButtonType } from '@sbb-esta/lyne-elements/core/base-elements.js';\n\n@Directive({\n  selector: 'sbb-button',\n  standalone: true,\n})\nexport class SbbButtonDirective {\n  #element: ElementRef<SbbButtonElement> = inject(ElementRef<SbbButtonElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: SbbButtonSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbButtonSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'disabled-interactive', transform: booleanAttribute })\n  public set disabledInteractive(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabledInteractive = value));\n  }\n  public get disabledInteractive(): boolean {\n    return this.#element.nativeElement.disabledInteractive;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set form(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.form = value));\n  }\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set type(value: SbbButtonType) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): SbbButtonType {\n    return this.#element.nativeElement.type;\n  }\n}\n",
      "selector": "sbb-button",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 52,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled-interactive",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 44,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "form",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 60,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 68,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "SbbButtonSize",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 84,
          "type": "SbbButtonType",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 76,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbButtonSize",
            "line": 21
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 29
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 35,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 38
          }
        },
        "disabledInteractive": {
          "name": "disabledInteractive",
          "setSignature": {
            "name": "disabledInteractive",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 44,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabledInteractive",
            "type": "boolean",
            "returnType": "boolean",
            "line": 47
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 52,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 55
          }
        },
        "form": {
          "name": "form",
          "setSignature": {
            "name": "form",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 60,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 63
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 68,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 71
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 76,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 79
          }
        },
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 84,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "SbbButtonType",
            "line": 87
          }
        }
      }
    },
    {
      "name": "SbbButtonLinkDirective",
      "id": "directive-SbbButtonLinkDirective-9691dd188d120fa411f4531b71558391b39f16334cadbd9b7c059e9e9fa564d97cf6efa5c2b46e05ab3c751844d73678b826caebd3d92f42284e04a8324528f0",
      "file": "src/angular/button/button-link/button-link.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbButtonLinkElement } from '@sbb-esta/lyne-elements/button/button-link.js';\nimport '@sbb-esta/lyne-elements/button/button-link.js';\nimport { SbbButtonSize } from '@sbb-esta/lyne-elements/button.js';\nimport { LinkTargetType } from '@sbb-esta/lyne-elements/core/base-elements.js';\n\n@Directive({\n  selector: 'sbb-button-link',\n  standalone: true,\n})\nexport class SbbButtonLinkDirective {\n  #element: ElementRef<SbbButtonLinkElement> = inject(ElementRef<SbbButtonLinkElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: SbbButtonSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbButtonSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'disabled-interactive', transform: booleanAttribute })\n  public set disabledInteractive(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabledInteractive = value));\n  }\n  public get disabledInteractive(): boolean {\n    return this.#element.nativeElement.disabledInteractive;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set href(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.href = value));\n  }\n  public get href(): string {\n    return this.#element.nativeElement.href;\n  }\n\n  @Input()\n  public set target(value: LinkTargetType | string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.target = value));\n  }\n  public get target(): LinkTargetType | string {\n    return this.#element.nativeElement.target;\n  }\n\n  @Input()\n  public set rel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.rel = value));\n  }\n  public get rel(): string {\n    return this.#element.nativeElement.rel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set download(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.download = value));\n  }\n  public get download(): boolean {\n    return this.#element.nativeElement.download;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n}\n",
      "selector": "sbb-button-link",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 93,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 52,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled-interactive",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 44,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "download",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 84,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "href",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 60,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "rel",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 76,
          "type": "string",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "SbbButtonSize",
          "decorators": []
        },
        {
          "name": "target",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 68,
          "type": "LinkTargetType | string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbButtonSize",
            "line": 21
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 29
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 35,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 38
          }
        },
        "disabledInteractive": {
          "name": "disabledInteractive",
          "setSignature": {
            "name": "disabledInteractive",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 44,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabledInteractive",
            "type": "boolean",
            "returnType": "boolean",
            "line": 47
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 52,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 55
          }
        },
        "href": {
          "name": "href",
          "setSignature": {
            "name": "href",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 60,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "href",
            "type": "string",
            "returnType": "string",
            "line": 63
          }
        },
        "target": {
          "name": "target",
          "setSignature": {
            "name": "target",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 68,
            "jsdoctags": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "target",
            "type": "",
            "returnType": "LinkTargetType | string",
            "line": 71
          }
        },
        "rel": {
          "name": "rel",
          "setSignature": {
            "name": "rel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 76,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "rel",
            "type": "string",
            "returnType": "string",
            "line": 79
          }
        },
        "download": {
          "name": "download",
          "setSignature": {
            "name": "download",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 84,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "download",
            "type": "boolean",
            "returnType": "boolean",
            "line": 87
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 93,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 96
          }
        }
      }
    },
    {
      "name": "SbbButtonStaticDirective",
      "id": "directive-SbbButtonStaticDirective-3c11524eb61fc78b10b98fe70b3fca6fcfdc108ea1ce2586414dbb0c49792f13c1625320ba07c8e0fba602d7d2812c59e93b0932d8bce4de96f49177e868a82a",
      "file": "src/angular/button/button-static/button-static.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbButtonStaticElement } from '@sbb-esta/lyne-elements/button/button-static.js';\nimport '@sbb-esta/lyne-elements/button/button-static.js';\nimport { SbbButtonSize } from '@sbb-esta/lyne-elements/button.js';\n\n@Directive({\n  selector: 'sbb-button-static',\n  standalone: true,\n})\nexport class SbbButtonStaticDirective {\n  #element: ElementRef<SbbButtonStaticElement> = inject(ElementRef<SbbButtonStaticElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: SbbButtonSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbButtonSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n}\n",
      "selector": "sbb-button-static",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 42,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "SbbButtonSize",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbButtonSize",
            "line": 20
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 28
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 34,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 37
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 42,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 45
          }
        }
      }
    },
    {
      "name": "SbbCalendarDirective",
      "id": "directive-SbbCalendarDirective-121a578b846ac62389aad9cd6ddbae01929fc7bb0c6b356d303913b91f7d034068df592795ae658ec43569a18cccd48560591e95b34ef38f1c83aaf9c7b5c0ac",
      "file": "src/angular/calendar/calendar.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, Output, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { CalendarView, SbbCalendarElement } from '@sbb-esta/lyne-elements/calendar.js';\nimport { SbbDateLike } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/calendar.js';\n\n@Directive({\n  selector: 'sbb-calendar',\n  standalone: true,\n})\nexport class SbbCalendarDirective<T = Date> {\n  #element: ElementRef<SbbCalendarElement<T>> = inject(ElementRef<SbbCalendarElement<T>>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set wide(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.wide = value));\n  }\n  public get wide(): boolean {\n    return this.#element.nativeElement.wide;\n  }\n\n  @Input()\n  public set view(value: CalendarView) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.view = value));\n  }\n  public get view(): CalendarView {\n    return this.#element.nativeElement.view;\n  }\n\n  @Input()\n  public set min(value: SbbDateLike<T> | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.min = value));\n  }\n  public get min(): T | null {\n    return this.#element.nativeElement.min;\n  }\n\n  @Input()\n  public set max(value: SbbDateLike<T> | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.max = value));\n  }\n  public get max(): T | null {\n    return this.#element.nativeElement.max;\n  }\n\n  @Input()\n  public set now(value: SbbDateLike<T> | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.now = value));\n  }\n  public get now(): T {\n    return this.#element.nativeElement.now;\n  }\n\n  @Input()\n  public set selected(value: SbbDateLike<T> | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.selected = value));\n  }\n  public get selected(): T | null {\n    return this.#element.nativeElement.selected;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'date-filter' })\n  public set dateFilter(value: ((date: T | null) => boolean) | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.dateFilter = value));\n  }\n  public get dateFilter(): ((date: T | null) => boolean) | null {\n    return this.#element.nativeElement.dateFilter;\n  }\n\n  @Output() public dateSelected: Observable<T> = fromEvent<T>(\n    this.#element.nativeElement,\n    'dateSelected',\n  );\n\n  public resetPosition(): void {\n    return this.#element.nativeElement.resetPosition();\n  }\n}\n",
      "selector": "sbb-calendar",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "date-filter",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 67,
          "type": " | null",
          "decorators": []
        },
        {
          "name": "max",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 42,
          "type": "SbbDateLike | null",
          "decorators": []
        },
        {
          "name": "min",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "SbbDateLike | null",
          "decorators": []
        },
        {
          "name": "now",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 50,
          "type": "SbbDateLike | null",
          "decorators": []
        },
        {
          "name": "selected",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 58,
          "type": "SbbDateLike | null",
          "decorators": []
        },
        {
          "name": "view",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "CalendarView",
          "decorators": []
        },
        {
          "required": false,
          "name": "wide",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "dateSelected",
          "defaultValue": "fromEvent<T>(\n    this.#element.nativeElement,\n    'dateSelected',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 74,
          "type": "Observable<T>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "resetPosition",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 79,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": [],
      "accessors": {
        "wide": {
          "name": "wide",
          "setSignature": {
            "name": "wide",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "wide",
            "type": "boolean",
            "returnType": "boolean",
            "line": 21
          }
        },
        "view": {
          "name": "view",
          "setSignature": {
            "name": "view",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "CalendarView",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "CalendarView",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "view",
            "type": "",
            "returnType": "CalendarView",
            "line": 29
          }
        },
        "min": {
          "name": "min",
          "setSignature": {
            "name": "min",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbDateLike<T> | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 34,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbDateLike<T> | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "min",
            "type": "",
            "returnType": "T | null",
            "line": 37
          }
        },
        "max": {
          "name": "max",
          "setSignature": {
            "name": "max",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbDateLike<T> | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 42,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbDateLike<T> | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "max",
            "type": "",
            "returnType": "T | null",
            "line": 45
          }
        },
        "now": {
          "name": "now",
          "setSignature": {
            "name": "now",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbDateLike<T> | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 50,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbDateLike<T> | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "now",
            "type": "",
            "returnType": "T",
            "line": 53
          }
        },
        "selected": {
          "name": "selected",
          "setSignature": {
            "name": "selected",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbDateLike<T> | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 58,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbDateLike<T> | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "selected",
            "type": "",
            "returnType": "T | null",
            "line": 61
          }
        },
        "dateFilter": {
          "name": "dateFilter",
          "setSignature": {
            "name": "dateFilter",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": " | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 67,
            "jsdoctags": [
              {
                "name": "value",
                "type": " | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "dateFilter",
            "type": "",
            "returnType": " | null",
            "line": 70
          }
        }
      }
    },
    {
      "name": "SbbCardBadgeDirective",
      "id": "directive-SbbCardBadgeDirective-dc77a47dbbc1279d78fd71389480478a0320f7212c2b910e69213e9d8187a064130d08e2426173798fb68e94895920c42a91def5da3f6796844910e6e46ff5e3",
      "file": "src/angular/card/card-badge/card-badge.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport type { SbbCardBadgeElement } from '@sbb-esta/lyne-elements/card/card-badge.js';\nimport '@sbb-esta/lyne-elements/card/card-badge.js';\n\n@Directive({\n  selector: 'sbb-card-badge',\n  standalone: true,\n})\nexport class SbbCardBadgeDirective {\n  #element: ElementRef<SbbCardBadgeElement> = inject(ElementRef<SbbCardBadgeElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set color(value: 'charcoal' | 'white') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.color = value));\n  }\n  public get color(): 'charcoal' | 'white' {\n    return this.#element.nativeElement.color;\n  }\n}\n",
      "selector": "sbb-card-badge",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "name": "color",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "\"charcoal\" | \"white\"",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "color": {
          "name": "color",
          "setSignature": {
            "name": "color",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"charcoal\" | \"white\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 15,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"charcoal\" | \"white\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "color",
            "type": "",
            "returnType": "\"charcoal\" | \"white\"",
            "line": 18
          }
        }
      }
    },
    {
      "name": "SbbCardButtonDirective",
      "id": "directive-SbbCardButtonDirective-eb157e19de5e7a698c923f3ec53adb9b6495651cbb680319e08b5290ae069b3bfc4dc012fa51ed7cb2d75831baa3b7077242937615bff5040c23b27157bbaaf0",
      "file": "src/angular/card/card-button/card-button.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbCardButtonElement } from '@sbb-esta/lyne-elements/card/card-button.js';\nimport '@sbb-esta/lyne-elements/card/card-button.js';\nimport { SbbButtonType } from '@sbb-esta/lyne-elements/core/base-elements.js';\n\n@Directive({\n  selector: 'sbb-card-button',\n  standalone: true,\n})\nexport class SbbCardButtonDirective {\n  #element: ElementRef<SbbCardButtonElement> = inject(ElementRef<SbbCardButtonElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set active(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.active = value));\n  }\n  public get active(): boolean {\n    return this.#element.nativeElement.active;\n  }\n\n  @Input()\n  public set form(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.form = value));\n  }\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set type(value: SbbButtonType) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): SbbButtonType {\n    return this.#element.nativeElement.type;\n  }\n}\n",
      "selector": "sbb-card-button",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "active",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "form",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "string",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 49,
          "type": "SbbButtonType",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 41,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "active": {
          "name": "active",
          "setSignature": {
            "name": "active",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "active",
            "type": "boolean",
            "returnType": "boolean",
            "line": 20
          }
        },
        "form": {
          "name": "form",
          "setSignature": {
            "name": "form",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 28
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 33,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 36
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 41,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 44
          }
        },
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 49,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "SbbButtonType",
            "line": 52
          }
        }
      }
    },
    {
      "name": "SbbCardDirective",
      "id": "directive-SbbCardDirective-5c58d4e5686da38740e79b8d6670df44ed1c26bf794b38d70f72db7ad81e26009293a8464ff3442695cf0e1797904222b164fcff878b6715327093b066894270",
      "file": "src/angular/card/card/card.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport type { SbbCardElement } from '@sbb-esta/lyne-elements/card/card.js';\nimport '@sbb-esta/lyne-elements/card/card.js';\n\n@Directive({\n  selector: 'sbb-card',\n  standalone: true,\n})\nexport class SbbCardDirective {\n  #element: ElementRef<SbbCardElement> = inject(ElementRef<SbbCardElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: 'xs' | 's' | 'm' | 'l' | 'xl' | 'xxl' | 'xxxl') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): 'xs' | 's' | 'm' | 'l' | 'xl' | 'xxl' | 'xxxl' {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input()\n  public set color(\n    value: 'white' | 'milk' | 'transparent-bordered' | 'transparent-bordered-dashed',\n  ) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.color = value));\n  }\n  public get color(): 'white' | 'milk' | 'transparent-bordered' | 'transparent-bordered-dashed' {\n    return this.#element.nativeElement.color;\n  }\n}\n",
      "selector": "sbb-card",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "name": "color",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "\"white\" | \"milk\" | \"transparent-bordered\" | \"transparent-bordered-dashed\"",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "\"xs\" | \"s\" | \"m\" | \"l\" | \"xl\" | \"xxl\" | \"xxxl\"",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"xs\" | \"s\" | \"m\" | \"l\" | \"xl\" | \"xxl\" | \"xxxl\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 15,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"xs\" | \"s\" | \"m\" | \"l\" | \"xl\" | \"xxl\" | \"xxxl\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "\"xs\" | \"s\" | \"m\" | \"l\" | \"xl\" | \"xxl\" | \"xxxl\"",
            "line": 18
          }
        },
        "color": {
          "name": "color",
          "setSignature": {
            "name": "color",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"white\" | \"milk\" | \"transparent-bordered\" | \"transparent-bordered-dashed\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 23,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"white\" | \"milk\" | \"transparent-bordered\" | \"transparent-bordered-dashed\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "color",
            "type": "",
            "returnType": "\"white\" | \"milk\" | \"transparent-bordered\" | \"transparent-bordered-dashed\"",
            "line": 28
          }
        }
      }
    },
    {
      "name": "SbbCardLinkDirective",
      "id": "directive-SbbCardLinkDirective-1ea226a15082c3d2a49f32d361db0b1feb15feb5a41dd3d88464430362b0f0ec801bd2fc11d051f1d4872178e0f46e39b83e34141cfcbc5f8c407c94aee0cfbb",
      "file": "src/angular/card/card-link/card-link.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbCardLinkElement } from '@sbb-esta/lyne-elements/card/card-link.js';\nimport '@sbb-esta/lyne-elements/card/card-link.js';\nimport { LinkTargetType } from '@sbb-esta/lyne-elements/core/base-elements.js';\n\n@Directive({\n  selector: 'sbb-card-link',\n  standalone: true,\n})\nexport class SbbCardLinkDirective {\n  #element: ElementRef<SbbCardLinkElement> = inject(ElementRef<SbbCardLinkElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set active(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.active = value));\n  }\n  public get active(): boolean {\n    return this.#element.nativeElement.active;\n  }\n\n  @Input()\n  public set href(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.href = value));\n  }\n  public get href(): string {\n    return this.#element.nativeElement.href;\n  }\n\n  @Input()\n  public set target(value: LinkTargetType | string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.target = value));\n  }\n  public get target(): LinkTargetType | string {\n    return this.#element.nativeElement.target;\n  }\n\n  @Input()\n  public set rel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.rel = value));\n  }\n  public get rel(): string {\n    return this.#element.nativeElement.rel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set download(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.download = value));\n  }\n  public get download(): boolean {\n    return this.#element.nativeElement.download;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n}\n",
      "selector": "sbb-card-link",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 58,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "active",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "download",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 49,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "href",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "string",
          "decorators": []
        },
        {
          "name": "rel",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 41,
          "type": "string",
          "decorators": []
        },
        {
          "name": "target",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "LinkTargetType | string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "active": {
          "name": "active",
          "setSignature": {
            "name": "active",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "active",
            "type": "boolean",
            "returnType": "boolean",
            "line": 20
          }
        },
        "href": {
          "name": "href",
          "setSignature": {
            "name": "href",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "href",
            "type": "string",
            "returnType": "string",
            "line": 28
          }
        },
        "target": {
          "name": "target",
          "setSignature": {
            "name": "target",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 33,
            "jsdoctags": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "target",
            "type": "",
            "returnType": "LinkTargetType | string",
            "line": 36
          }
        },
        "rel": {
          "name": "rel",
          "setSignature": {
            "name": "rel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 41,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "rel",
            "type": "string",
            "returnType": "string",
            "line": 44
          }
        },
        "download": {
          "name": "download",
          "setSignature": {
            "name": "download",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 49,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "download",
            "type": "boolean",
            "returnType": "boolean",
            "line": 52
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 58,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 61
          }
        }
      }
    },
    {
      "name": "SbbCheckboxDirective",
      "id": "directive-SbbCheckboxDirective-31c4443dc9a85b68b0df37698fbc176d216b7a5b6fc85a4d2e033d89f80178e018b6d305ba8e2660f9118f2b4593a0283bd8d8b93b6fe12336e2eff5ac4cb288",
      "file": "src/angular/checkbox/checkbox/checkbox.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, Output, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbCheckboxGroupElement } from '@sbb-esta/lyne-elements/checkbox/checkbox-group.js';\nimport type { SbbCheckboxElement } from '@sbb-esta/lyne-elements/checkbox/checkbox.js';\nimport { SbbCheckboxSize } from '@sbb-esta/lyne-elements/checkbox.js';\nimport { SbbIconPlacement } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/checkbox/checkbox.js';\n\n@Directive({\n  selector: 'sbb-checkbox',\n  standalone: true,\n})\nexport class SbbCheckboxDirective {\n  #element: ElementRef<SbbCheckboxElement> = inject(ElementRef<SbbCheckboxElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: SbbCheckboxSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbCheckboxSize {\n    return this.#element.nativeElement.size;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'icon-placement' })\n  public set iconPlacement(value: SbbIconPlacement) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconPlacement = value));\n  }\n  public get iconPlacement(): SbbIconPlacement {\n    return this.#element.nativeElement.iconPlacement;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set indeterminate(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.indeterminate = value));\n  }\n  public get indeterminate(): boolean {\n    return this.#element.nativeElement.indeterminate;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set checked(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.checked = value));\n  }\n  public get checked(): boolean {\n    return this.#element.nativeElement.checked;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set required(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.required = value));\n  }\n  public get required(): boolean {\n    return this.#element.nativeElement.required;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public change: Observable<Event> = fromEvent<Event>(\n    this.#element.nativeElement,\n    'change',\n  );\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public input: Observable<InputEvent> = fromEvent<InputEvent>(\n    this.#element.nativeElement,\n    'input',\n  );\n\n  public get group(): SbbCheckboxGroupElement | null {\n    return this.#element.nativeElement.group;\n  }\n\n  public get type(): string {\n    return this.#element.nativeElement.type;\n  }\n\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n}\n",
      "selector": "sbb-checkbox",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "checked",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 45,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 53,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 86,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-placement",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 29,
          "type": "SbbIconPlacement",
          "decorators": []
        },
        {
          "required": false,
          "name": "indeterminate",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 37,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 69,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "required",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 61,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "SbbCheckboxSize",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 77,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "change",
          "defaultValue": "fromEvent<Event>(\n    this.#element.nativeElement,\n    'change',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 94,
          "type": "Observable<Event>"
        },
        {
          "name": "input",
          "defaultValue": "fromEvent<InputEvent>(\n    this.#element.nativeElement,\n    'input',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 100,
          "type": "Observable<InputEvent>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbCheckboxSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 20,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbCheckboxSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbCheckboxSize",
            "line": 23
          }
        },
        "iconPlacement": {
          "name": "iconPlacement",
          "setSignature": {
            "name": "iconPlacement",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbIconPlacement",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 29,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbIconPlacement",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconPlacement",
            "type": "",
            "returnType": "SbbIconPlacement",
            "line": 32
          }
        },
        "indeterminate": {
          "name": "indeterminate",
          "setSignature": {
            "name": "indeterminate",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 37,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "indeterminate",
            "type": "boolean",
            "returnType": "boolean",
            "line": 40
          }
        },
        "checked": {
          "name": "checked",
          "setSignature": {
            "name": "checked",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 45,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "checked",
            "type": "boolean",
            "returnType": "boolean",
            "line": 48
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 53,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 56
          }
        },
        "required": {
          "name": "required",
          "setSignature": {
            "name": "required",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 61,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "required",
            "type": "boolean",
            "returnType": "boolean",
            "line": 64
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 69,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 72
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 77,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 80
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 86,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 89
          }
        },
        "group": {
          "name": "group",
          "getSignature": {
            "name": "group",
            "type": "",
            "returnType": "SbbCheckboxGroupElement | null",
            "line": 105
          }
        },
        "type": {
          "name": "type",
          "getSignature": {
            "name": "type",
            "type": "string",
            "returnType": "string",
            "line": 109
          }
        },
        "form": {
          "name": "form",
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 113
          }
        }
      }
    },
    {
      "name": "SbbCheckboxGroupDirective",
      "id": "directive-SbbCheckboxGroupDirective-c2bbef43e6bc103aef9dc068c7abb92a6e1f1c49b364185304b33ec345bdca285b1f534e793d875d04dedecaf33ae210e076a902503e2c4839b76bcba436e0f9",
      "file": "src/angular/checkbox/checkbox-group/checkbox-group.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbCheckboxGroupElement } from '@sbb-esta/lyne-elements/checkbox/checkbox-group.js';\nimport '@sbb-esta/lyne-elements/checkbox/checkbox-group.js';\nimport { SbbCheckboxPanelElement } from '@sbb-esta/lyne-elements/checkbox/checkbox-panel.js';\nimport { SbbCheckboxElement } from '@sbb-esta/lyne-elements/checkbox/checkbox.js';\nimport { SbbCheckboxSize } from '@sbb-esta/lyne-elements/checkbox.js';\nimport { SbbHorizontalFrom, SbbOrientation } from '@sbb-esta/lyne-elements/core/interfaces.js';\n\n@Directive({\n  selector: 'sbb-checkbox-group',\n  standalone: true,\n})\nexport class SbbCheckboxGroupDirective {\n  #element: ElementRef<SbbCheckboxGroupElement> = inject(ElementRef<SbbCheckboxGroupElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set required(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.required = value));\n  }\n  public get required(): boolean {\n    return this.#element.nativeElement.required;\n  }\n\n  @Input()\n  public set size(value: SbbCheckboxSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbCheckboxSize {\n    return this.#element.nativeElement.size;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'horizontal-from' })\n  public set horizontalFrom(value: SbbHorizontalFrom | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.horizontalFrom = value));\n  }\n  public get horizontalFrom(): SbbHorizontalFrom | null {\n    return this.#element.nativeElement.horizontalFrom;\n  }\n\n  @Input()\n  public set orientation(value: SbbOrientation) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.orientation = value));\n  }\n  public get orientation(): SbbOrientation {\n    return this.#element.nativeElement.orientation;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  public get checkboxes(): (SbbCheckboxElement | SbbCheckboxPanelElement)[] {\n    return this.#element.nativeElement.checkboxes;\n  }\n}\n",
      "selector": "sbb-checkbox-group",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 53,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "horizontal-from",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 37,
          "type": "SbbHorizontalFrom | null",
          "decorators": []
        },
        {
          "name": "orientation",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 45,
          "type": "SbbOrientation",
          "decorators": []
        },
        {
          "required": false,
          "name": "required",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "SbbCheckboxSize",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "required": {
          "name": "required",
          "setSignature": {
            "name": "required",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 20,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "required",
            "type": "boolean",
            "returnType": "boolean",
            "line": 23
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbCheckboxSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 28,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbCheckboxSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbCheckboxSize",
            "line": 31
          }
        },
        "horizontalFrom": {
          "name": "horizontalFrom",
          "setSignature": {
            "name": "horizontalFrom",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbHorizontalFrom | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 37,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbHorizontalFrom | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "horizontalFrom",
            "type": "",
            "returnType": "SbbHorizontalFrom | null",
            "line": 40
          }
        },
        "orientation": {
          "name": "orientation",
          "setSignature": {
            "name": "orientation",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbOrientation",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 45,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbOrientation",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "orientation",
            "type": "",
            "returnType": "SbbOrientation",
            "line": 48
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 53,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 56
          }
        },
        "checkboxes": {
          "name": "checkboxes",
          "getSignature": {
            "name": "checkboxes",
            "type": "[]",
            "returnType": "[]",
            "line": 60
          }
        }
      }
    },
    {
      "name": "SbbCheckboxPanelDirective",
      "id": "directive-SbbCheckboxPanelDirective-f0da7638d40b4b4144f4791bec36a4b1d60b63b1a15f7ca20c524748eeddfb6707b084a3aab13af1e0a7d0a11b97fa65e51c0ff324fb9cc4be290bcd60687fd2",
      "file": "src/angular/checkbox/checkbox-panel/checkbox-panel.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, Output, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbCheckboxGroupElement } from '@sbb-esta/lyne-elements/checkbox/checkbox-group.js';\nimport type { SbbCheckboxPanelElement } from '@sbb-esta/lyne-elements/checkbox/checkbox-panel.js';\nimport { SbbPanelSize } from '@sbb-esta/lyne-elements/core/mixins.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/checkbox/checkbox-panel.js';\n\n@Directive({\n  selector: 'sbb-checkbox-panel',\n  standalone: true,\n})\nexport class SbbCheckboxPanelDirective {\n  #element: ElementRef<SbbCheckboxPanelElement> = inject(ElementRef<SbbCheckboxPanelElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: SbbPanelSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbPanelSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input()\n  public set color(value: 'white' | 'milk') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.color = value));\n  }\n  public get color(): 'white' | 'milk' {\n    return this.#element.nativeElement.color;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set borderless(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.borderless = value));\n  }\n  public get borderless(): boolean {\n    return this.#element.nativeElement.borderless;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set indeterminate(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.indeterminate = value));\n  }\n  public get indeterminate(): boolean {\n    return this.#element.nativeElement.indeterminate;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set checked(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.checked = value));\n  }\n  public get checked(): boolean {\n    return this.#element.nativeElement.checked;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set required(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.required = value));\n  }\n  public get required(): boolean {\n    return this.#element.nativeElement.required;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public change: Observable<Event> = fromEvent<Event>(\n    this.#element.nativeElement,\n    'change',\n  );\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public input: Observable<InputEvent> = fromEvent<InputEvent>(\n    this.#element.nativeElement,\n    'input',\n  );\n\n  public get group(): SbbCheckboxGroupElement | null {\n    return this.#element.nativeElement.group;\n  }\n\n  public get type(): string {\n    return this.#element.nativeElement.type;\n  }\n\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n}\n",
      "selector": "sbb-checkbox-panel",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "borderless",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "checked",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 51,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "color",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "\"white\" | \"milk\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 59,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "indeterminate",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 75,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "required",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 67,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "SbbPanelSize",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 83,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "change",
          "defaultValue": "fromEvent<Event>(\n    this.#element.nativeElement,\n    'change',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 91,
          "type": "Observable<Event>"
        },
        {
          "name": "input",
          "defaultValue": "fromEvent<InputEvent>(\n    this.#element.nativeElement,\n    'input',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 97,
          "type": "Observable<InputEvent>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbPanelSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 19,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbPanelSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbPanelSize",
            "line": 22
          }
        },
        "color": {
          "name": "color",
          "setSignature": {
            "name": "color",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"white\" | \"milk\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 27,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"white\" | \"milk\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "color",
            "type": "",
            "returnType": "\"white\" | \"milk\"",
            "line": 30
          }
        },
        "borderless": {
          "name": "borderless",
          "setSignature": {
            "name": "borderless",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 35,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "borderless",
            "type": "boolean",
            "returnType": "boolean",
            "line": 38
          }
        },
        "indeterminate": {
          "name": "indeterminate",
          "setSignature": {
            "name": "indeterminate",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 43,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "indeterminate",
            "type": "boolean",
            "returnType": "boolean",
            "line": 46
          }
        },
        "checked": {
          "name": "checked",
          "setSignature": {
            "name": "checked",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 51,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "checked",
            "type": "boolean",
            "returnType": "boolean",
            "line": 54
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 59,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 62
          }
        },
        "required": {
          "name": "required",
          "setSignature": {
            "name": "required",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 67,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "required",
            "type": "boolean",
            "returnType": "boolean",
            "line": 70
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 75,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 78
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 83,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 86
          }
        },
        "group": {
          "name": "group",
          "getSignature": {
            "name": "group",
            "type": "",
            "returnType": "SbbCheckboxGroupElement | null",
            "line": 102
          }
        },
        "type": {
          "name": "type",
          "getSignature": {
            "name": "type",
            "type": "string",
            "returnType": "string",
            "line": 106
          }
        },
        "form": {
          "name": "form",
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 110
          }
        }
      }
    },
    {
      "name": "SbbChipLabelDirective",
      "id": "directive-SbbChipLabelDirective-d710b53473525d32ace7cdbc423b9bd4a25343909303716144ebfc541e3cbc4d572b1d6e555d24678875a6ab51692409abf5b57a036b3f4357d3e5a12d48c0d9",
      "file": "src/angular/chip-label/chip-label.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport type { SbbChipLabelElement } from '@sbb-esta/lyne-elements/chip-label.js';\nimport '@sbb-esta/lyne-elements/chip-label.js';\n\n@Directive({\n  selector: 'sbb-chip-label',\n  standalone: true,\n})\nexport class SbbChipLabelDirective {\n  #element: ElementRef<SbbChipLabelElement> = inject(ElementRef<SbbChipLabelElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: 'xxs' | 'xs' | 's') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): 'xxs' | 'xs' | 's' {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input()\n  public set color(value: 'milk' | 'charcoal' | 'white' | 'granite') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.color = value));\n  }\n  public get color(): 'milk' | 'charcoal' | 'white' | 'granite' {\n    return this.#element.nativeElement.color;\n  }\n}\n",
      "selector": "sbb-chip-label",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "name": "color",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "\"milk\" | \"charcoal\" | \"white\" | \"granite\"",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "\"xxs\" | \"xs\" | \"s\"",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"xxs\" | \"xs\" | \"s\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 15,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"xxs\" | \"xs\" | \"s\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "\"xxs\" | \"xs\" | \"s\"",
            "line": 18
          }
        },
        "color": {
          "name": "color",
          "setSignature": {
            "name": "color",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"milk\" | \"charcoal\" | \"white\" | \"granite\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 23,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"milk\" | \"charcoal\" | \"white\" | \"granite\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "color",
            "type": "",
            "returnType": "\"milk\" | \"charcoal\" | \"white\" | \"granite\"",
            "line": 26
          }
        }
      }
    },
    {
      "name": "SbbClockDirective",
      "id": "directive-SbbClockDirective-bd56bc627660151c0fa75cbc7ee77133fef280f4d98acfabf22271489291ec28f550acb9999d42b7f145a97f805d52448e638acac1ffbb3b61f8a80bf8293952",
      "file": "src/angular/clock/clock.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport type { SbbClockElement } from '@sbb-esta/lyne-elements/clock.js';\nimport '@sbb-esta/lyne-elements/clock.js';\nimport { SbbTime } from '@sbb-esta/lyne-elements/core/interfaces.js';\n\n@Directive({\n  selector: 'sbb-clock',\n  standalone: true,\n})\nexport class SbbClockDirective {\n  #element: ElementRef<SbbClockElement> = inject(ElementRef<SbbClockElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set now(value: SbbTime | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.now = value));\n  }\n  public get now(): SbbTime | null {\n    return this.#element.nativeElement.now;\n  }\n}\n",
      "selector": "sbb-clock",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "name": "now",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "SbbTime | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "now": {
          "name": "now",
          "setSignature": {
            "name": "now",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTime | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTime | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "now",
            "type": "",
            "returnType": "SbbTime | null",
            "line": 19
          }
        }
      }
    },
    {
      "name": "SbbCompactPaginatorDirective",
      "id": "directive-SbbCompactPaginatorDirective-5071bafa1a972b07e8c3b9309c59c4d64eab000cc0c2500b7e441fb094aa4d2b339c90dfc9d61ce9975ea868fccc68dd30a0a9186ccefa4f85bfb87ed22c74f9",
      "file": "src/angular/paginator/compact-paginator/compact-paginator.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {\n  Directive,\n  ElementRef,\n  Input,\n  NgZone,\n  Output,\n  inject,\n  numberAttribute,\n} from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbPaginatorPageEventDetails } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport type { SbbCompactPaginatorElement } from '@sbb-esta/lyne-elements/paginator/compact-paginator.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/paginator/compact-paginator.js';\n\n@Directive({\n  selector: 'sbb-compact-paginator',\n  standalone: true,\n})\nexport class SbbCompactPaginatorDirective {\n  #element: ElementRef<SbbCompactPaginatorElement> = inject(ElementRef<SbbCompactPaginatorElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: numberAttribute })\n  public set length(value: number) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.length = value));\n  }\n  public get length(): number {\n    return this.#element.nativeElement.length;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'page-size', transform: numberAttribute })\n  public set pageSize(value: number) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.pageSize = value));\n  }\n  public get pageSize(): number {\n    return this.#element.nativeElement.pageSize;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'page-index', transform: numberAttribute })\n  public set pageIndex(value: number) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.pageIndex = value));\n  }\n  public get pageIndex(): number {\n    return this.#element.nativeElement.pageIndex;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'pager-position' })\n  public set pagerPosition(value: 'start' | 'end') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.pagerPosition = value));\n  }\n  public get pagerPosition(): 'start' | 'end' {\n    return this.#element.nativeElement.pagerPosition;\n  }\n\n  @Input()\n  public set size(value: 'm' | 's') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): 'm' | 's' {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Output() public page: Observable<SbbPaginatorPageEventDetails> =\n    fromEvent<SbbPaginatorPageEventDetails>(this.#element.nativeElement, 'page');\n}\n",
      "selector": "sbb-compact-paginator",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 77,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "length",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "number",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 69,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "page-index",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 44,
          "type": "number",
          "decorators": []
        },
        {
          "required": false,
          "name": "page-size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "number",
          "decorators": []
        },
        {
          "required": false,
          "name": "pager-position",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 53,
          "type": "\"start\" | \"end\"",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 61,
          "type": "\"m\" | \"s\"",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "page",
          "defaultValue": "fromEvent<SbbPaginatorPageEventDetails>(this.#element.nativeElement, 'page')",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 84,
          "type": "Observable<SbbPaginatorPageEventDetails>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "length": {
          "name": "length",
          "setSignature": {
            "name": "length",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "length",
            "type": "number",
            "returnType": "number",
            "line": 29
          }
        },
        "pageSize": {
          "name": "pageSize",
          "setSignature": {
            "name": "pageSize",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 35,
            "jsdoctags": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "pageSize",
            "type": "number",
            "returnType": "number",
            "line": 38
          }
        },
        "pageIndex": {
          "name": "pageIndex",
          "setSignature": {
            "name": "pageIndex",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 44,
            "jsdoctags": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "pageIndex",
            "type": "number",
            "returnType": "number",
            "line": 47
          }
        },
        "pagerPosition": {
          "name": "pagerPosition",
          "setSignature": {
            "name": "pagerPosition",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"start\" | \"end\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 53,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"start\" | \"end\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "pagerPosition",
            "type": "",
            "returnType": "\"start\" | \"end\"",
            "line": 56
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"m\" | \"s\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 61,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"m\" | \"s\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "\"m\" | \"s\"",
            "line": 64
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 69,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 72
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 77,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 80
          }
        }
      }
    },
    {
      "name": "SbbContainerDirective",
      "id": "directive-SbbContainerDirective-b36538db72a5672ea7358dbf690947ed0bb02f607c41f8a520f37529e901b69c433d3540887a3c2b7cac6b6b048a51d2a84568f42b25762cabced010e9886600",
      "file": "src/angular/container/container/container.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbContainerElement } from '@sbb-esta/lyne-elements/container/container.js';\nimport '@sbb-esta/lyne-elements/container/container.js';\n\n@Directive({\n  selector: 'sbb-container',\n  standalone: true,\n})\nexport class SbbContainerDirective {\n  #element: ElementRef<SbbContainerElement> = inject(ElementRef<SbbContainerElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set expanded(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.expanded = value));\n  }\n  public get expanded(): boolean {\n    return this.#element.nativeElement.expanded;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'background-expanded', transform: booleanAttribute })\n  public set backgroundExpanded(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.backgroundExpanded = value));\n  }\n  public get backgroundExpanded(): boolean {\n    return this.#element.nativeElement.backgroundExpanded;\n  }\n\n  @Input()\n  public set color(value: 'transparent' | 'white' | 'milk') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.color = value));\n  }\n  public get color(): 'transparent' | 'white' | 'milk' {\n    return this.#element.nativeElement.color;\n  }\n}\n",
      "selector": "sbb-container",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "background-expanded",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "color",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "\"transparent\" | \"white\" | \"milk\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "expanded",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "expanded": {
          "name": "expanded",
          "setSignature": {
            "name": "expanded",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "expanded",
            "type": "boolean",
            "returnType": "boolean",
            "line": 19
          }
        },
        "backgroundExpanded": {
          "name": "backgroundExpanded",
          "setSignature": {
            "name": "backgroundExpanded",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "backgroundExpanded",
            "type": "boolean",
            "returnType": "boolean",
            "line": 28
          }
        },
        "color": {
          "name": "color",
          "setSignature": {
            "name": "color",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"transparent\" | \"white\" | \"milk\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 33,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"transparent\" | \"white\" | \"milk\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "color",
            "type": "",
            "returnType": "\"transparent\" | \"white\" | \"milk\"",
            "line": 36
          }
        }
      }
    },
    {
      "name": "SbbDatepickerDirective",
      "id": "directive-SbbDatepickerDirective-9d85e93273a6b073b71e98769139f482ebece209f375d6bee9c32ede7c50a4e1af730effe94792635c3895f5d2ed5c42072b86fbab1289fb19ceffd2b272d051",
      "file": "src/angular/datepicker/datepicker/datepicker.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, Output, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbValidationChangeEvent } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport type {\n  SbbDatepickerElement,\n  SbbInputUpdateEvent,\n} from '@sbb-esta/lyne-elements/datepicker/datepicker.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/datepicker/datepicker.js';\n\n@Directive({\n  selector: 'sbb-datepicker',\n  standalone: true,\n})\nexport class SbbDatepickerDirective<T = Date> {\n  #element: ElementRef<SbbDatepickerElement<T>> = inject(ElementRef<SbbDatepickerElement<T>>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set wide(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.wide = value));\n  }\n  public get wide(): boolean {\n    return this.#element.nativeElement.wide;\n  }\n\n  @Input()\n  public set dateFilter(value: (date: T | null) => boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.dateFilter = value));\n  }\n  public get dateFilter(): (date: T | null) => boolean {\n    return this.#element.nativeElement.dateFilter;\n  }\n\n  @Input()\n  public set input(value: string | HTMLElement | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.input = value));\n  }\n  public get input(): string | HTMLElement | null {\n    return this.#element.nativeElement.input;\n  }\n\n  @Input()\n  public set now(value: T) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.now = value));\n  }\n  public get now(): T {\n    return this.#element.nativeElement.now;\n  }\n\n  @Input()\n  public set valueAsDate(value: T | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.valueAsDate = value));\n  }\n  public get valueAsDate(): T | null {\n    return this.#element.nativeElement.valueAsDate;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public change: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'change',\n  );\n\n  // eslint-disable-next-line @angular-eslint/no-output-rename, @angular-eslint/no-output-native\n  @Output('input') public inputEvent: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'input',\n  );\n\n  @Output() public inputUpdated: Observable<SbbInputUpdateEvent> = fromEvent<SbbInputUpdateEvent>(\n    this.#element.nativeElement,\n    'inputUpdated',\n  );\n\n  @Output() public datePickerUpdated: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'datePickerUpdated',\n  );\n\n  @Output() public validationChange: Observable<SbbValidationChangeEvent> =\n    fromEvent<SbbValidationChangeEvent>(this.#element.nativeElement, 'validationChange');\n\n  public findPreviousAvailableDate(date: T): T {\n    return this.#element.nativeElement.findPreviousAvailableDate(date);\n  }\n\n  public findNextAvailableDate(date: T): T {\n    return this.#element.nativeElement.findNextAvailableDate(date);\n  }\n}\n",
      "selector": "sbb-datepicker",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "name": "dateFilter",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 29,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "input",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 37,
          "type": "string | HTMLElement | null",
          "decorators": []
        },
        {
          "name": "now",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 45,
          "type": "T",
          "decorators": []
        },
        {
          "name": "valueAsDate",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 53,
          "type": "T | null",
          "decorators": []
        },
        {
          "required": false,
          "name": "wide",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 21,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "change",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'change',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 61,
          "type": "Observable<void>"
        },
        {
          "name": "datePickerUpdated",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'datePickerUpdated',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 77,
          "type": "Observable<void>"
        },
        {
          "name": "input",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'input',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 67,
          "type": "Observable<void>"
        },
        {
          "name": "inputUpdated",
          "defaultValue": "fromEvent<SbbInputUpdateEvent>(\n    this.#element.nativeElement,\n    'inputUpdated',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 72,
          "type": "Observable<SbbInputUpdateEvent>"
        },
        {
          "name": "validationChange",
          "defaultValue": "fromEvent<SbbValidationChangeEvent>(this.#element.nativeElement, 'validationChange')",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 82,
          "type": "Observable<SbbValidationChangeEvent>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "findNextAvailableDate",
          "args": [
            {
              "name": "date",
              "type": "T",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "T",
          "typeParameters": [],
          "line": 89,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": "date",
              "type": "T",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "findPreviousAvailableDate",
          "args": [
            {
              "name": "date",
              "type": "T",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "T",
          "typeParameters": [],
          "line": 85,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": "date",
              "type": "T",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "extends": [],
      "accessors": {
        "wide": {
          "name": "wide",
          "setSignature": {
            "name": "wide",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 21,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "wide",
            "type": "boolean",
            "returnType": "boolean",
            "line": 24
          }
        },
        "dateFilter": {
          "name": "dateFilter",
          "setSignature": {
            "name": "dateFilter",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "function": [
                  {
                    "name": "date",
                    "type": "T | null",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ]
              }
            ],
            "returnType": "void",
            "line": 29,
            "jsdoctags": [
              {
                "name": "value",
                "type": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "function": [
                  {
                    "name": "date",
                    "type": "T | null",
                    "deprecated": false,
                    "deprecationMessage": ""
                  }
                ],
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "dateFilter",
            "type": "function",
            "returnType": "boolean",
            "line": 32
          }
        },
        "input": {
          "name": "input",
          "setSignature": {
            "name": "input",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | HTMLElement | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 37,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | HTMLElement | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "input",
            "type": "",
            "returnType": "string | HTMLElement | null",
            "line": 40
          }
        },
        "now": {
          "name": "now",
          "setSignature": {
            "name": "now",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "T",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 45,
            "jsdoctags": [
              {
                "name": "value",
                "type": "T",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "now",
            "type": "",
            "returnType": "T",
            "line": 48
          }
        },
        "valueAsDate": {
          "name": "valueAsDate",
          "setSignature": {
            "name": "valueAsDate",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "T | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 53,
            "jsdoctags": [
              {
                "name": "value",
                "type": "T | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "valueAsDate",
            "type": "",
            "returnType": "T | null",
            "line": 56
          }
        }
      }
    },
    {
      "name": "SbbDatepickerNextDayDirective",
      "id": "directive-SbbDatepickerNextDayDirective-3f1cd86a818899bc6d65e0808781f950220e9d6f5a01b3b4e9093b727cd17933d6480a991983ee2c7b5e7241d8f08cc64dea91bc8f257c13539bb024de2d836b",
      "file": "src/angular/datepicker/datepicker-next-day/datepicker-next-day.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbButtonType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport type { SbbDatepickerNextDayElement } from '@sbb-esta/lyne-elements/datepicker/datepicker-next-day.js';\nimport '@sbb-esta/lyne-elements/datepicker/datepicker-next-day.js';\nimport { SbbDatepickerElement } from '@sbb-esta/lyne-elements/datepicker/datepicker.js';\n\n@Directive({\n  selector: 'sbb-datepicker-next-day',\n  standalone: true,\n})\nexport class SbbDatepickerNextDayDirective<T = Date> {\n  #element: ElementRef<SbbDatepickerNextDayElement<T>> = inject(\n    ElementRef<SbbDatepickerNextDayElement<T>>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'date-picker' })\n  public set datePicker(value: string | SbbDatepickerElement<T> | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.datePicker = value));\n  }\n  public get datePicker(): string | SbbDatepickerElement<T> | null {\n    return this.#element.nativeElement.datePicker;\n  }\n\n  @Input()\n  public set form(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.form = value));\n  }\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set type(value: SbbButtonType) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): SbbButtonType {\n    return this.#element.nativeElement.type;\n  }\n}\n",
      "selector": "sbb-datepicker-next-day",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "date-picker",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 29,
          "type": "string | SbbDatepickerElement | null",
          "decorators": []
        },
        {
          "name": "form",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 37,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 45,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 61,
          "type": "SbbButtonType",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 53,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 20,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 23
          }
        },
        "datePicker": {
          "name": "datePicker",
          "setSignature": {
            "name": "datePicker",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | SbbDatepickerElement<T> | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 29,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | SbbDatepickerElement<T> | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "datePicker",
            "type": "",
            "returnType": "string | SbbDatepickerElement | null",
            "line": 32
          }
        },
        "form": {
          "name": "form",
          "setSignature": {
            "name": "form",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 37,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 40
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 45,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 48
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 53,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 56
          }
        },
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 61,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "SbbButtonType",
            "line": 64
          }
        }
      }
    },
    {
      "name": "SbbDatepickerPreviousDayDirective",
      "id": "directive-SbbDatepickerPreviousDayDirective-abc8f0426d35fb0bf31323a8066b39d86fdf87e86eca419373b27c9bcd434ef3aa46f909584b42fcdb563f4dde2f282120781f9bf1d9d55524f6dd8c7eb79f16",
      "file": "src/angular/datepicker/datepicker-previous-day/datepicker-previous-day.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbButtonType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport type { SbbDatepickerPreviousDayElement } from '@sbb-esta/lyne-elements/datepicker/datepicker-previous-day.js';\nimport '@sbb-esta/lyne-elements/datepicker/datepicker-previous-day.js';\nimport { SbbDatepickerElement } from '@sbb-esta/lyne-elements/datepicker/datepicker.js';\n\n@Directive({\n  selector: 'sbb-datepicker-previous-day',\n  standalone: true,\n})\nexport class SbbDatepickerPreviousDayDirective<T = Date> {\n  #element: ElementRef<SbbDatepickerPreviousDayElement<T>> = inject(\n    ElementRef<SbbDatepickerPreviousDayElement<T>>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'date-picker' })\n  public set datePicker(value: string | SbbDatepickerElement<T> | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.datePicker = value));\n  }\n  public get datePicker(): string | SbbDatepickerElement<T> | null {\n    return this.#element.nativeElement.datePicker;\n  }\n\n  @Input()\n  public set form(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.form = value));\n  }\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set type(value: SbbButtonType) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): SbbButtonType {\n    return this.#element.nativeElement.type;\n  }\n}\n",
      "selector": "sbb-datepicker-previous-day",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "date-picker",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 29,
          "type": "string | SbbDatepickerElement | null",
          "decorators": []
        },
        {
          "name": "form",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 37,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 45,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 61,
          "type": "SbbButtonType",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 53,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 20,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 23
          }
        },
        "datePicker": {
          "name": "datePicker",
          "setSignature": {
            "name": "datePicker",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | SbbDatepickerElement<T> | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 29,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | SbbDatepickerElement<T> | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "datePicker",
            "type": "",
            "returnType": "string | SbbDatepickerElement | null",
            "line": 32
          }
        },
        "form": {
          "name": "form",
          "setSignature": {
            "name": "form",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 37,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 40
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 45,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 48
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 53,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 56
          }
        },
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 61,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "SbbButtonType",
            "line": 64
          }
        }
      }
    },
    {
      "name": "SbbDatepickerToggleDirective",
      "id": "directive-SbbDatepickerToggleDirective-5346bf7d941227988dc270f033c5f0df3b3c45aebd896b5fc3e16f6fcabc7c5dcb7b02ebe0ebd37453735421a63812f224f6ae48148ec697ed6f037652e608a6",
      "file": "src/angular/datepicker/datepicker-toggle/datepicker-toggle.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { CalendarView } from '@sbb-esta/lyne-elements/calendar.js';\nimport type { SbbDatepickerToggleElement } from '@sbb-esta/lyne-elements/datepicker/datepicker-toggle.js';\nimport { SbbDatepickerElement } from '@sbb-esta/lyne-elements/datepicker/datepicker.js';\nimport '@sbb-esta/lyne-elements/datepicker/datepicker-toggle.js';\n\n@Directive({\n  selector: 'sbb-datepicker-toggle',\n  standalone: true,\n})\nexport class SbbDatepickerToggleDirective<T = Date> {\n  #element: ElementRef<SbbDatepickerToggleElement<T>> = inject(\n    ElementRef<SbbDatepickerToggleElement<T>>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'date-picker' })\n  public set datePicker(value: string | SbbDatepickerElement | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.datePicker = value));\n  }\n  public get datePicker(): string | SbbDatepickerElement | null {\n    return this.#element.nativeElement.datePicker;\n  }\n\n  @Input()\n  public set view(value: CalendarView) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.view = value));\n  }\n  public get view(): CalendarView {\n    return this.#element.nativeElement.view;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  public open(): void {\n    return this.#element.nativeElement.open();\n  }\n}\n",
      "selector": "sbb-datepicker-toggle",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "date-picker",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 21,
          "type": "string | SbbDatepickerElement | null",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 37,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "view",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 29,
          "type": "CalendarView",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "open",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 44,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": [],
      "accessors": {
        "datePicker": {
          "name": "datePicker",
          "setSignature": {
            "name": "datePicker",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | SbbDatepickerElement | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 21,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | SbbDatepickerElement | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "datePicker",
            "type": "",
            "returnType": "string | SbbDatepickerElement | null",
            "line": 24
          }
        },
        "view": {
          "name": "view",
          "setSignature": {
            "name": "view",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "CalendarView",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 29,
            "jsdoctags": [
              {
                "name": "value",
                "type": "CalendarView",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "view",
            "type": "",
            "returnType": "CalendarView",
            "line": 32
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 37,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 40
          }
        }
      }
    },
    {
      "name": "SbbDialogActionsDirective",
      "id": "directive-SbbDialogActionsDirective-0fd9e2272141fffd724e7ae2c5e4d745cea862a562fc4e3e05be98ba5276be68c7d984dc6acde7a6a388478432491b59f0569baae0c245e6d94ea5d24227a505",
      "file": "src/angular/dialog/dialog-actions/dialog-actions.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { SbbButtonSize } from '@sbb-esta/lyne-elements/button.js';\nimport { SbbHorizontalFrom, SbbOrientation } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport type { SbbDialogActionsElement } from '@sbb-esta/lyne-elements/dialog/dialog-actions.js';\nimport { SbbLinkSize } from '@sbb-esta/lyne-elements/link.js';\nimport '@sbb-esta/lyne-elements/dialog/dialog-actions.js';\n\n@Directive({\n  selector: 'sbb-dialog-actions',\n  standalone: true,\n})\nexport class SbbDialogActionsDirective {\n  #element: ElementRef<SbbDialogActionsElement> = inject(ElementRef<SbbDialogActionsElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'align-group' })\n  public set alignGroup(value: 'start' | 'center' | 'stretch' | 'end') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.alignGroup = value));\n  }\n  public get alignGroup(): 'start' | 'center' | 'stretch' | 'end' {\n    return this.#element.nativeElement.alignGroup;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'horizontal-from' })\n  public set horizontalFrom(value: SbbHorizontalFrom) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.horizontalFrom = value));\n  }\n  public get horizontalFrom(): SbbHorizontalFrom {\n    return this.#element.nativeElement.horizontalFrom;\n  }\n\n  @Input()\n  public set orientation(value: SbbOrientation) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.orientation = value));\n  }\n  public get orientation(): SbbOrientation {\n    return this.#element.nativeElement.orientation;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'button-size' })\n  public set buttonSize(value: SbbButtonSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.buttonSize = value));\n  }\n  public get buttonSize(): SbbButtonSize {\n    return this.#element.nativeElement.buttonSize;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'link-size' })\n  public set linkSize(value: SbbLinkSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.linkSize = value));\n  }\n  public get linkSize(): SbbLinkSize {\n    return this.#element.nativeElement.linkSize;\n  }\n}\n",
      "selector": "sbb-dialog-actions",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "align-group",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "\"start\" | \"center\" | \"stretch\" | \"end\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "button-size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 45,
          "type": "SbbButtonSize",
          "decorators": []
        },
        {
          "required": false,
          "name": "horizontal-from",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "SbbHorizontalFrom",
          "decorators": []
        },
        {
          "required": false,
          "name": "link-size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 54,
          "type": "SbbLinkSize",
          "decorators": []
        },
        {
          "name": "orientation",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "SbbOrientation",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "alignGroup": {
          "name": "alignGroup",
          "setSignature": {
            "name": "alignGroup",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"start\" | \"center\" | \"stretch\" | \"end\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 19,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"start\" | \"center\" | \"stretch\" | \"end\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "alignGroup",
            "type": "",
            "returnType": "\"start\" | \"center\" | \"stretch\" | \"end\"",
            "line": 22
          }
        },
        "horizontalFrom": {
          "name": "horizontalFrom",
          "setSignature": {
            "name": "horizontalFrom",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbHorizontalFrom",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 28,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbHorizontalFrom",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "horizontalFrom",
            "type": "",
            "returnType": "SbbHorizontalFrom",
            "line": 31
          }
        },
        "orientation": {
          "name": "orientation",
          "setSignature": {
            "name": "orientation",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbOrientation",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 36,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbOrientation",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "orientation",
            "type": "",
            "returnType": "SbbOrientation",
            "line": 39
          }
        },
        "buttonSize": {
          "name": "buttonSize",
          "setSignature": {
            "name": "buttonSize",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 45,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "buttonSize",
            "type": "",
            "returnType": "SbbButtonSize",
            "line": 48
          }
        },
        "linkSize": {
          "name": "linkSize",
          "setSignature": {
            "name": "linkSize",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 54,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "linkSize",
            "type": "",
            "returnType": "SbbLinkSize",
            "line": 57
          }
        }
      }
    },
    {
      "name": "SbbDialogContentDirective",
      "id": "directive-SbbDialogContentDirective-100bb5f733cea8758993cf5cbd8c9a3853394c754694a2a8b434050d549f3cd88425ecbdf126b0cc9f95023b53f6f2d99169e1b76d348130e046dc9aeed8672d",
      "file": "src/angular/dialog/dialog-content/dialog-content.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive } from '@angular/core';\nimport '@sbb-esta/lyne-elements/dialog/dialog-content.js';\n\n@Directive({\n  selector: 'sbb-dialog-content',\n  standalone: true,\n})\nexport class SbbDialogContentDirective {}\n",
      "selector": "sbb-dialog-content",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": []
    },
    {
      "name": "SbbDialogDirective",
      "id": "directive-SbbDialogDirective-9ed02d43a662ef3f49aa011ac0a0b1b02e547cc1f14b9c835cf28b42cc4c2c1f42ba36501dccc9be843282b89a9295a70e7d881cdb25ceab40525549ec9c3160",
      "file": "src/angular/dialog/dialog/dialog.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, Output, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbOverlayCloseEventDetails } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport type { SbbDialogElement } from '@sbb-esta/lyne-elements/dialog/dialog.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/dialog/dialog.js';\n\n@Directive({\n  selector: 'sbb-dialog',\n  standalone: true,\n})\nexport class SbbDialogDirective {\n  #element: ElementRef<SbbDialogElement> = inject(ElementRef<SbbDialogElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'backdrop-action' })\n  public set backdropAction(value: 'close' | 'none') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.backdropAction = value));\n  }\n  public get backdropAction(): 'close' | 'none' {\n    return this.#element.nativeElement.backdropAction;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n\n  @Output() public willOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  );\n\n  @Output() public didOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  );\n\n  @Output() public willClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  );\n\n  @Output() public didClose: Observable<SbbOverlayCloseEventDetails> =\n    fromEvent<SbbOverlayCloseEventDetails>(this.#element.nativeElement, 'didClose');\n\n  public get isOpen(): boolean {\n    return this.#element.nativeElement.isOpen;\n  }\n\n  public open(): void {\n    return this.#element.nativeElement.open();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public close(result: any, target: HTMLElement): any {\n    return this.#element.nativeElement.close(result, target);\n  }\n}\n",
      "selector": "sbb-dialog",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "backdrop-action",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "\"close\" | \"none\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "didClose",
          "defaultValue": "fromEvent<SbbOverlayCloseEventDetails>(this.#element.nativeElement, 'didClose')",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 58,
          "type": "Observable<SbbOverlayCloseEventDetails>"
        },
        {
          "name": "didOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 48,
          "type": "Observable<void>"
        },
        {
          "name": "willClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 53,
          "type": "Observable<void>"
        },
        {
          "name": "willOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "close",
          "args": [
            {
              "name": "result",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "target",
              "type": "HTMLElement",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 70,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": "result",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "target",
              "type": "HTMLElement",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "open",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 65,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": [],
      "accessors": {
        "backdropAction": {
          "name": "backdropAction",
          "setSignature": {
            "name": "backdropAction",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"close\" | \"none\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 19,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"close\" | \"none\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "backdropAction",
            "type": "",
            "returnType": "\"close\" | \"none\"",
            "line": 22
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 27,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 30
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 36,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 39
          }
        },
        "isOpen": {
          "name": "isOpen",
          "getSignature": {
            "name": "isOpen",
            "type": "boolean",
            "returnType": "boolean",
            "line": 61
          }
        }
      }
    },
    {
      "name": "SbbDialogTitleDirective",
      "id": "directive-SbbDialogTitleDirective-884176f75af162b84987d83018b757aaf313e457913b5b94f1911ac533b07d832a8eb2e67761a83f39f878150aa95351465e15e1c0d663ed30acb26bf104891d",
      "file": "src/angular/dialog/dialog-title/dialog-title.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, Output, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { Breakpoint } from '@sbb-esta/lyne-elements/core/dom.js';\nimport type { SbbDialogTitleElement } from '@sbb-esta/lyne-elements/dialog/dialog-title.js';\nimport { SbbTitleLevel } from '@sbb-esta/lyne-elements/title.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/dialog/dialog-title.js';\n\n@Directive({\n  selector: 'sbb-dialog-title',\n  standalone: true,\n})\nexport class SbbDialogTitleDirective {\n  #element: ElementRef<SbbDialogTitleElement> = inject(ElementRef<SbbDialogTitleElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'back-button', transform: booleanAttribute })\n  public set backButton(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.backButton = value));\n  }\n  public get backButton(): boolean {\n    return this.#element.nativeElement.backButton;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'accessibility-close-label' })\n  public set accessibilityCloseLabel(value: string) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.accessibilityCloseLabel = value),\n    );\n  }\n  public get accessibilityCloseLabel(): string {\n    return this.#element.nativeElement.accessibilityCloseLabel;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'accessibility-back-label' })\n  public set accessibilityBackLabel(value: string) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.accessibilityBackLabel = value),\n    );\n  }\n  public get accessibilityBackLabel(): string {\n    return this.#element.nativeElement.accessibilityBackLabel;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'hide-on-scroll' })\n  public set hideOnScroll(value: Breakpoint | boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.hideOnScroll = value));\n  }\n  public get hideOnScroll(): Breakpoint | boolean {\n    return this.#element.nativeElement.hideOnScroll;\n  }\n\n  @Input()\n  public set level(value: SbbTitleLevel) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.level = value));\n  }\n  public get level(): SbbTitleLevel {\n    return this.#element.nativeElement.level;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'visual-level' })\n  public set visualLevel(value: SbbTitleLevel | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.visualLevel = value));\n  }\n  public get visualLevel(): SbbTitleLevel | null {\n    return this.#element.nativeElement.visualLevel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'visually-hidden', transform: booleanAttribute })\n  public set visuallyHidden(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.visuallyHidden = value));\n  }\n  public get visuallyHidden(): boolean {\n    return this.#element.nativeElement.visuallyHidden;\n  }\n\n  @Output() public requestBackAction: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'requestBackAction',\n  );\n}\n",
      "selector": "sbb-dialog-title",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-back-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 40,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "accessibility-close-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 29,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "back-button",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "hide-on-scroll",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 51,
          "type": "Breakpoint | boolean",
          "decorators": []
        },
        {
          "name": "level",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 59,
          "type": "SbbTitleLevel",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 76,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "visual-level",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 68,
          "type": "SbbTitleLevel | null",
          "decorators": []
        },
        {
          "required": false,
          "name": "visually-hidden",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 85,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "requestBackAction",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'requestBackAction',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 92,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "backButton": {
          "name": "backButton",
          "setSignature": {
            "name": "backButton",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 20,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "backButton",
            "type": "boolean",
            "returnType": "boolean",
            "line": 23
          }
        },
        "accessibilityCloseLabel": {
          "name": "accessibilityCloseLabel",
          "setSignature": {
            "name": "accessibilityCloseLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 29,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityCloseLabel",
            "type": "string",
            "returnType": "string",
            "line": 34
          }
        },
        "accessibilityBackLabel": {
          "name": "accessibilityBackLabel",
          "setSignature": {
            "name": "accessibilityBackLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 40,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityBackLabel",
            "type": "string",
            "returnType": "string",
            "line": 45
          }
        },
        "hideOnScroll": {
          "name": "hideOnScroll",
          "setSignature": {
            "name": "hideOnScroll",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "Breakpoint | boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 51,
            "jsdoctags": [
              {
                "name": "value",
                "type": "Breakpoint | boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "hideOnScroll",
            "type": "",
            "returnType": "Breakpoint | boolean",
            "line": 54
          }
        },
        "level": {
          "name": "level",
          "setSignature": {
            "name": "level",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 59,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "level",
            "type": "",
            "returnType": "SbbTitleLevel",
            "line": 62
          }
        },
        "visualLevel": {
          "name": "visualLevel",
          "setSignature": {
            "name": "visualLevel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTitleLevel | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 68,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTitleLevel | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "visualLevel",
            "type": "",
            "returnType": "SbbTitleLevel | null",
            "line": 71
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 76,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 79
          }
        },
        "visuallyHidden": {
          "name": "visuallyHidden",
          "setSignature": {
            "name": "visuallyHidden",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 85,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "visuallyHidden",
            "type": "boolean",
            "returnType": "boolean",
            "line": 88
          }
        }
      }
    },
    {
      "name": "SbbDividerDirective",
      "id": "directive-SbbDividerDirective-48887a2037e47650bff045cb4c64ce9279d8ca9a15a0bcf93fbd290f561757b03e4d0ec7df3b61fb4d6c859c1583fb0bd93e633b05289e5123c4dabf3d18ccd5",
      "file": "src/angular/divider/divider.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbOrientation } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport type { SbbDividerElement } from '@sbb-esta/lyne-elements/divider.js';\nimport '@sbb-esta/lyne-elements/divider.js';\n\n@Directive({\n  selector: 'sbb-divider',\n  standalone: true,\n})\nexport class SbbDividerDirective {\n  #element: ElementRef<SbbDividerElement> = inject(ElementRef<SbbDividerElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set orientation(value: SbbOrientation) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.orientation = value));\n  }\n  public get orientation(): SbbOrientation {\n    return this.#element.nativeElement.orientation;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n}\n",
      "selector": "sbb-divider",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "orientation",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "SbbOrientation",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "orientation": {
          "name": "orientation",
          "setSignature": {
            "name": "orientation",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbOrientation",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbOrientation",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "orientation",
            "type": "",
            "returnType": "SbbOrientation",
            "line": 20
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 28
          }
        }
      }
    },
    {
      "name": "SbbExpansionPanelContentDirective",
      "id": "directive-SbbExpansionPanelContentDirective-c59913708bc3ec049cc7001e841ca26466c9cbf41cf6d2f86f622ab627b6b9ef8b5b0cfd15cb8102a4b25e08017fca8f5c200f8084445c658106d8bc7b2cc692",
      "file": "src/angular/expansion-panel/expansion-panel-content/expansion-panel-content.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive } from '@angular/core';\nimport '@sbb-esta/lyne-elements/expansion-panel/expansion-panel-content.js';\n\n@Directive({\n  selector: 'sbb-expansion-panel-content',\n  standalone: true,\n})\nexport class SbbExpansionPanelContentDirective {}\n",
      "selector": "sbb-expansion-panel-content",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": []
    },
    {
      "name": "SbbExpansionPanelDirective",
      "id": "directive-SbbExpansionPanelDirective-4235bd96666e8650f937fb5f55cb2136978d9d20dc6d95886fceaa516a27309be8b9fba0f7563802e763bed119ffb605ee1423faac7905efe6c7e7bb12102638",
      "file": "src/angular/expansion-panel/expansion-panel/expansion-panel.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, Output, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbExpansionPanelElement } from '@sbb-esta/lyne-elements/expansion-panel/expansion-panel.js';\nimport { SbbTitleLevel } from '@sbb-esta/lyne-elements/title.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/expansion-panel/expansion-panel.js';\n\n@Directive({\n  selector: 'sbb-expansion-panel',\n  standalone: true,\n})\nexport class SbbExpansionPanelDirective {\n  #element: ElementRef<SbbExpansionPanelElement> = inject(ElementRef<SbbExpansionPanelElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'title-level' })\n  public set titleLevel(value: SbbTitleLevel | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleLevel = value));\n  }\n  public get titleLevel(): SbbTitleLevel | null {\n    return this.#element.nativeElement.titleLevel;\n  }\n\n  @Input()\n  public set color(value: 'white' | 'milk') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.color = value));\n  }\n  public get color(): 'white' | 'milk' {\n    return this.#element.nativeElement.color;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set expanded(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.expanded = value));\n  }\n  public get expanded(): boolean {\n    return this.#element.nativeElement.expanded;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set borderless(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.borderless = value));\n  }\n  public get borderless(): boolean {\n    return this.#element.nativeElement.borderless;\n  }\n\n  @Input()\n  public set size(value: 's' | 'l') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): 's' | 'l' {\n    return this.#element.nativeElement.size;\n  }\n\n  @Output() public willOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  );\n\n  @Output() public didOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  );\n\n  @Output() public willClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  );\n\n  @Output() public didClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  );\n}\n",
      "selector": "sbb-expansion-panel",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "borderless",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 51,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "color",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "\"white\" | \"milk\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "expanded",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 59,
          "type": "\"s\" | \"l\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "title-level",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "SbbTitleLevel | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "didClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 81,
          "type": "Observable<void>"
        },
        {
          "name": "didOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 71,
          "type": "Observable<void>"
        },
        {
          "name": "willClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 76,
          "type": "Observable<void>"
        },
        {
          "name": "willOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 66,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "titleLevel": {
          "name": "titleLevel",
          "setSignature": {
            "name": "titleLevel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTitleLevel | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 19,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTitleLevel | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleLevel",
            "type": "",
            "returnType": "SbbTitleLevel | null",
            "line": 22
          }
        },
        "color": {
          "name": "color",
          "setSignature": {
            "name": "color",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"white\" | \"milk\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 27,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"white\" | \"milk\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "color",
            "type": "",
            "returnType": "\"white\" | \"milk\"",
            "line": 30
          }
        },
        "expanded": {
          "name": "expanded",
          "setSignature": {
            "name": "expanded",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 35,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "expanded",
            "type": "boolean",
            "returnType": "boolean",
            "line": 38
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 43,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 46
          }
        },
        "borderless": {
          "name": "borderless",
          "setSignature": {
            "name": "borderless",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 51,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "borderless",
            "type": "boolean",
            "returnType": "boolean",
            "line": 54
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"s\" | \"l\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 59,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"s\" | \"l\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "\"s\" | \"l\"",
            "line": 62
          }
        }
      }
    },
    {
      "name": "SbbExpansionPanelHeaderDirective",
      "id": "directive-SbbExpansionPanelHeaderDirective-9774f14ebcc9c55baf5ddccd3cfb6ebf23d812b9f0bac67873240c5ae2487a0b7f50cc22a92059ed7a9c40f651e17a840b46c7320e9566a4ccac34c7b2059477",
      "file": "src/angular/expansion-panel/expansion-panel-header/expansion-panel-header.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, Output, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbButtonType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport type { SbbExpansionPanelHeaderElement } from '@sbb-esta/lyne-elements/expansion-panel/expansion-panel-header.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/expansion-panel/expansion-panel-header.js';\n\n@Directive({\n  selector: 'sbb-expansion-panel-header',\n  standalone: true,\n})\nexport class SbbExpansionPanelHeaderDirective {\n  #element: ElementRef<SbbExpansionPanelHeaderElement> = inject(\n    ElementRef<SbbExpansionPanelHeaderElement>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'disabled-interactive', transform: booleanAttribute })\n  public set disabledInteractive(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabledInteractive = value));\n  }\n  public get disabledInteractive(): boolean {\n    return this.#element.nativeElement.disabledInteractive;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input()\n  public set form(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.form = value));\n  }\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set type(value: SbbButtonType) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): SbbButtonType {\n    return this.#element.nativeElement.type;\n  }\n\n  @Output() public toggleExpanded: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'toggleExpanded',\n  );\n}\n",
      "selector": "sbb-expansion-panel-header",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 29,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled-interactive",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 21,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "form",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 46,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 38,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 54,
          "type": "string",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 70,
          "type": "SbbButtonType",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 62,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "toggleExpanded",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'toggleExpanded',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 77,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "disabledInteractive": {
          "name": "disabledInteractive",
          "setSignature": {
            "name": "disabledInteractive",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 21,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabledInteractive",
            "type": "boolean",
            "returnType": "boolean",
            "line": 24
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 29,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 32
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 38,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 41
          }
        },
        "form": {
          "name": "form",
          "setSignature": {
            "name": "form",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 46,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 49
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 54,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 57
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 62,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 65
          }
        },
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 70,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "SbbButtonType",
            "line": 73
          }
        }
      }
    },
    {
      "name": "SbbFileSelectorDirective",
      "id": "directive-SbbFileSelectorDirective-fdbc45a798527fa435b9c0ab2fd3cc74a7348cc722e74e3dc3f7418805dd76918f0491bc49ffc404ed78174faac9f0b1dbeee987d512cb46fdf7608e0bf4e2b3",
      "file": "src/angular/file-selector/file-selector/file-selector.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, Output, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { FormRestoreReason, FormRestoreState } from '@sbb-esta/lyne-elements/core/mixins.js';\nimport type { SbbFileSelectorElement } from '@sbb-esta/lyne-elements/file-selector/file-selector.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/file-selector/file-selector.js';\n\n@Directive({\n  selector: 'sbb-file-selector',\n  standalone: true,\n})\nexport class SbbFileSelectorDirective {\n  #element: ElementRef<SbbFileSelectorElement> = inject(ElementRef<SbbFileSelectorElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: 's' | 'm') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): 's' | 'm' {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set multiple(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.multiple = value));\n  }\n  public get multiple(): boolean {\n    return this.#element.nativeElement.multiple;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'multiple-mode' })\n  public set multipleMode(value: 'default' | 'persistent') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.multipleMode = value));\n  }\n  public get multipleMode(): 'default' | 'persistent' {\n    return this.#element.nativeElement.multipleMode;\n  }\n\n  @Input()\n  public set accept(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accept = value));\n  }\n  public get accept(): string {\n    return this.#element.nativeElement.accept;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set files(value: Readonly<File>[]) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.files = value));\n  }\n  public get files(): Readonly<File>[] {\n    return this.#element.nativeElement.files;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Output() public fileChanged: Observable<readonly File[]> = fromEvent<readonly File[]>(\n    this.#element.nativeElement,\n    'fileChanged',\n  );\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public change: Observable<Event> = fromEvent<Event>(\n    this.#element.nativeElement,\n    'change',\n  );\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public input: Observable<Event> = fromEvent<Event>(\n    this.#element.nativeElement,\n    'input',\n  );\n\n  public get type(): string {\n    return this.#element.nativeElement.type;\n  }\n\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  public formResetCallback(): void {\n    return this.#element.nativeElement.formResetCallback();\n  }\n\n  public formStateRestoreCallback(\n    state: FormRestoreState | null,\n    _reason: FormRestoreReason,\n  ): void {\n    return this.#element.nativeElement.formStateRestoreCallback(state, _reason);\n  }\n}\n",
      "selector": "sbb-file-selector",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "name": "accept",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 52,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 76,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "files",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 68,
          "type": "Readonly[]",
          "decorators": []
        },
        {
          "required": false,
          "name": "multiple",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "multiple-mode",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "\"default\" | \"persistent\"",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 84,
          "type": "string",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "\"s\" | \"m\"",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 60,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "change",
          "defaultValue": "fromEvent<Event>(\n    this.#element.nativeElement,\n    'change',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 97,
          "type": "Observable<Event>"
        },
        {
          "name": "fileChanged",
          "defaultValue": "fromEvent<readonly File[]>(\n    this.#element.nativeElement,\n    'fileChanged',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 91,
          "type": "Observable<File[]>"
        },
        {
          "name": "input",
          "defaultValue": "fromEvent<Event>(\n    this.#element.nativeElement,\n    'input',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 103,
          "type": "Observable<Event>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "formResetCallback",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 116,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        },
        {
          "name": "formStateRestoreCallback",
          "args": [
            {
              "name": "state",
              "type": "FormRestoreState | null",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "_reason",
              "type": "FormRestoreReason",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 120,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": "state",
              "type": "FormRestoreState | null",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "_reason",
              "type": "FormRestoreReason",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"s\" | \"m\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"s\" | \"m\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "\"s\" | \"m\"",
            "line": 21
          }
        },
        "multiple": {
          "name": "multiple",
          "setSignature": {
            "name": "multiple",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "multiple",
            "type": "boolean",
            "returnType": "boolean",
            "line": 29
          }
        },
        "multipleMode": {
          "name": "multipleMode",
          "setSignature": {
            "name": "multipleMode",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"default\" | \"persistent\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 35,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"default\" | \"persistent\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "multipleMode",
            "type": "",
            "returnType": "\"default\" | \"persistent\"",
            "line": 38
          }
        },
        "accept": {
          "name": "accept",
          "setSignature": {
            "name": "accept",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 43,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accept",
            "type": "string",
            "returnType": "string",
            "line": 46
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 52,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 55
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 60,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 63
          }
        },
        "files": {
          "name": "files",
          "setSignature": {
            "name": "files",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "Readonly<File>[]",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 68,
            "jsdoctags": [
              {
                "name": "value",
                "type": "Readonly<File>[]",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "files",
            "type": "[]",
            "returnType": "Readonly[]",
            "line": 71
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 76,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 79
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 84,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 87
          }
        },
        "type": {
          "name": "type",
          "getSignature": {
            "name": "type",
            "type": "string",
            "returnType": "string",
            "line": 108
          }
        },
        "form": {
          "name": "form",
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 112
          }
        }
      }
    },
    {
      "name": "SbbFileSelectorDropzoneDirective",
      "id": "directive-SbbFileSelectorDropzoneDirective-8334f8cb4c5afd5698adc590d54441c6228407cd904a9bfa393523ca685aae8413a967a67c269ddec798e5066b69eb0c81ed8d34d27102b80cffbd43c0db6fc5",
      "file": "src/angular/file-selector/file-selector-dropzone/file-selector-dropzone.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, Output, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { FormRestoreReason, FormRestoreState } from '@sbb-esta/lyne-elements/core/mixins.js';\nimport type { SbbFileSelectorDropzoneElement } from '@sbb-esta/lyne-elements/file-selector/file-selector-dropzone.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/file-selector/file-selector-dropzone.js';\n\n@Directive({\n  selector: 'sbb-file-selector-dropzone',\n  standalone: true,\n})\nexport class SbbFileSelectorDropzoneDirective {\n  #element: ElementRef<SbbFileSelectorDropzoneElement> = inject(\n    ElementRef<SbbFileSelectorDropzoneElement>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'title-content' })\n  public set titleContent(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleContent = value));\n  }\n  public get titleContent(): string {\n    return this.#element.nativeElement.titleContent;\n  }\n\n  @Input()\n  public set size(value: 's' | 'm') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): 's' | 'm' {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set multiple(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.multiple = value));\n  }\n  public get multiple(): boolean {\n    return this.#element.nativeElement.multiple;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'multiple-mode' })\n  public set multipleMode(value: 'default' | 'persistent') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.multipleMode = value));\n  }\n  public get multipleMode(): 'default' | 'persistent' {\n    return this.#element.nativeElement.multipleMode;\n  }\n\n  @Input()\n  public set accept(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accept = value));\n  }\n  public get accept(): string {\n    return this.#element.nativeElement.accept;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set files(value: Readonly<File>[]) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.files = value));\n  }\n  public get files(): Readonly<File>[] {\n    return this.#element.nativeElement.files;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Output() public fileChanged: Observable<readonly File[]> = fromEvent<readonly File[]>(\n    this.#element.nativeElement,\n    'fileChanged',\n  );\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public change: Observable<Event> = fromEvent<Event>(\n    this.#element.nativeElement,\n    'change',\n  );\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public input: Observable<Event> = fromEvent<Event>(\n    this.#element.nativeElement,\n    'input',\n  );\n\n  public get type(): string {\n    return this.#element.nativeElement.type;\n  }\n\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  public formResetCallback(): void {\n    return this.#element.nativeElement.formResetCallback();\n  }\n\n  public formStateRestoreCallback(\n    state: FormRestoreState | null,\n    _reason: FormRestoreReason,\n  ): void {\n    return this.#element.nativeElement.formStateRestoreCallback(state, _reason);\n  }\n}\n",
      "selector": "sbb-file-selector-dropzone",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "name": "accept",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 54,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 63,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 87,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "files",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 79,
          "type": "Readonly[]",
          "decorators": []
        },
        {
          "required": false,
          "name": "multiple",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 37,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "multiple-mode",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 46,
          "type": "\"default\" | \"persistent\"",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 95,
          "type": "string",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 29,
          "type": "\"s\" | \"m\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "title-content",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 21,
          "type": "string",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 71,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "change",
          "defaultValue": "fromEvent<Event>(\n    this.#element.nativeElement,\n    'change',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 108,
          "type": "Observable<Event>"
        },
        {
          "name": "fileChanged",
          "defaultValue": "fromEvent<readonly File[]>(\n    this.#element.nativeElement,\n    'fileChanged',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 102,
          "type": "Observable<File[]>"
        },
        {
          "name": "input",
          "defaultValue": "fromEvent<Event>(\n    this.#element.nativeElement,\n    'input',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 114,
          "type": "Observable<Event>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "formResetCallback",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 127,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        },
        {
          "name": "formStateRestoreCallback",
          "args": [
            {
              "name": "state",
              "type": "FormRestoreState | null",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "_reason",
              "type": "FormRestoreReason",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 131,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": "state",
              "type": "FormRestoreState | null",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "_reason",
              "type": "FormRestoreReason",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "extends": [],
      "accessors": {
        "titleContent": {
          "name": "titleContent",
          "setSignature": {
            "name": "titleContent",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 21,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleContent",
            "type": "string",
            "returnType": "string",
            "line": 24
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"s\" | \"m\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 29,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"s\" | \"m\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "\"s\" | \"m\"",
            "line": 32
          }
        },
        "multiple": {
          "name": "multiple",
          "setSignature": {
            "name": "multiple",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 37,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "multiple",
            "type": "boolean",
            "returnType": "boolean",
            "line": 40
          }
        },
        "multipleMode": {
          "name": "multipleMode",
          "setSignature": {
            "name": "multipleMode",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"default\" | \"persistent\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 46,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"default\" | \"persistent\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "multipleMode",
            "type": "",
            "returnType": "\"default\" | \"persistent\"",
            "line": 49
          }
        },
        "accept": {
          "name": "accept",
          "setSignature": {
            "name": "accept",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 54,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accept",
            "type": "string",
            "returnType": "string",
            "line": 57
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 63,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 66
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 71,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 74
          }
        },
        "files": {
          "name": "files",
          "setSignature": {
            "name": "files",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "Readonly<File>[]",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 79,
            "jsdoctags": [
              {
                "name": "value",
                "type": "Readonly<File>[]",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "files",
            "type": "[]",
            "returnType": "Readonly[]",
            "line": 82
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 87,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 90
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 95,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 98
          }
        },
        "type": {
          "name": "type",
          "getSignature": {
            "name": "type",
            "type": "string",
            "returnType": "string",
            "line": 119
          }
        },
        "form": {
          "name": "form",
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 123
          }
        }
      }
    },
    {
      "name": "SbbFlipCardDetailsDirective",
      "id": "directive-SbbFlipCardDetailsDirective-6512b4f5449cff7906e87ad4dfb65bf63135c8a5c4e4df3d888221ecf3d366837791ce931177e64a71534a75cf2d9805fe6c1753a6867dc18438947a997e7bf4",
      "file": "src/angular/flip-card/flip-card-details/flip-card-details.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive } from '@angular/core';\nimport '@sbb-esta/lyne-elements/flip-card/flip-card-details.js';\n\n@Directive({\n  selector: 'sbb-flip-card-details',\n  standalone: true,\n})\nexport class SbbFlipCardDetailsDirective {}\n",
      "selector": "sbb-flip-card-details",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": []
    },
    {
      "name": "SbbFlipCardDirective",
      "id": "directive-SbbFlipCardDirective-f323b0b6a1d70c068962bc3d0df8753b071644e58915f525d4fab5ee04d131aa281fc9e149270bcc21adf73ec65908767934b55666c09ac5fcb9784d8df0880d",
      "file": "src/angular/flip-card/flip-card/flip-card.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, Output, inject } from '@angular/core';\nimport { SbbFlipCardSummaryElement } from '@sbb-esta/lyne-elements/flip-card/flip-card-summary.js';\nimport type { SbbFlipCardElement } from '@sbb-esta/lyne-elements/flip-card/flip-card.js';\nimport { SbbFlipCardDetailsElement } from '@sbb-esta/lyne-elements/flip-card.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/flip-card/flip-card.js';\n\n@Directive({\n  selector: 'sbb-flip-card',\n  standalone: true,\n})\nexport class SbbFlipCardDirective {\n  #element: ElementRef<SbbFlipCardElement> = inject(ElementRef<SbbFlipCardElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n\n  @Output() public flip: Observable<void> = fromEvent<void>(this.#element.nativeElement, 'flip');\n\n  public get summary(): SbbFlipCardSummaryElement | null {\n    return this.#element.nativeElement.summary;\n  }\n\n  public get details(): SbbFlipCardDetailsElement | null {\n    return this.#element.nativeElement.details;\n  }\n\n  public get isFlipped(): boolean {\n    return this.#element.nativeElement.isFlipped;\n  }\n\n  public toggle(): void {\n    return this.#element.nativeElement.toggle();\n  }\n}\n",
      "selector": "sbb-flip-card",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "flip",
          "defaultValue": "fromEvent<void>(this.#element.nativeElement, 'flip')",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "toggle",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 40,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": [],
      "accessors": {
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 19,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 22
          }
        },
        "summary": {
          "name": "summary",
          "getSignature": {
            "name": "summary",
            "type": "",
            "returnType": "SbbFlipCardSummaryElement | null",
            "line": 28
          }
        },
        "details": {
          "name": "details",
          "getSignature": {
            "name": "details",
            "type": "",
            "returnType": "SbbFlipCardDetailsElement | null",
            "line": 32
          }
        },
        "isFlipped": {
          "name": "isFlipped",
          "getSignature": {
            "name": "isFlipped",
            "type": "boolean",
            "returnType": "boolean",
            "line": 36
          }
        }
      }
    },
    {
      "name": "SbbFlipCardSummaryDirective",
      "id": "directive-SbbFlipCardSummaryDirective-93bb8f9eeb00f37a7fa43b48f9049c193a17e25ce8c19dd30fa3ef2e2a35761d71a5b93459799594dc21dd83876cee0fc3584027f3577126f9a4a83964c3eddd",
      "file": "src/angular/flip-card/flip-card-summary/flip-card-summary.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport type {\n  SbbFlipCardImageAlignment,\n  SbbFlipCardSummaryElement,\n} from '@sbb-esta/lyne-elements/flip-card/flip-card-summary.js';\nimport '@sbb-esta/lyne-elements/flip-card/flip-card-summary.js';\n\n@Directive({\n  selector: 'sbb-flip-card-summary',\n  standalone: true,\n})\nexport class SbbFlipCardSummaryDirective {\n  #element: ElementRef<SbbFlipCardSummaryElement> = inject(ElementRef<SbbFlipCardSummaryElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'image-alignment' })\n  public set imageAlignment(value: SbbFlipCardImageAlignment) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.imageAlignment = value));\n  }\n  public get imageAlignment(): SbbFlipCardImageAlignment {\n    return this.#element.nativeElement.imageAlignment;\n  }\n}\n",
      "selector": "sbb-flip-card-summary",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "image-alignment",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "SbbFlipCardImageAlignment",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "imageAlignment": {
          "name": "imageAlignment",
          "setSignature": {
            "name": "imageAlignment",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbFlipCardImageAlignment",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 19,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbFlipCardImageAlignment",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "imageAlignment",
            "type": "",
            "returnType": "SbbFlipCardImageAlignment",
            "line": 22
          }
        }
      }
    },
    {
      "name": "SbbFooterDirective",
      "id": "directive-SbbFooterDirective-a9b7296daa21f1c2446729a8c46042d51f4b5904f688f3d2359731f8a46429670ce7db0a6dd8d0bdb8257cd486b08ea52d84177f89b8b5b9e52108fcfbce85bc",
      "file": "src/angular/footer/footer.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbFooterElement } from '@sbb-esta/lyne-elements/footer.js';\nimport '@sbb-esta/lyne-elements/footer.js';\nimport { SbbTitleLevel } from '@sbb-esta/lyne-elements/title.js';\n\n@Directive({\n  selector: 'sbb-footer',\n  standalone: true,\n})\nexport class SbbFooterDirective {\n  #element: ElementRef<SbbFooterElement> = inject(ElementRef<SbbFooterElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set variant(value: 'default' | 'clock-columns') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.variant = value));\n  }\n  public get variant(): 'default' | 'clock-columns' {\n    return this.#element.nativeElement.variant;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set expanded(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.expanded = value));\n  }\n  public get expanded(): boolean {\n    return this.#element.nativeElement.expanded;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'accessibility-title' })\n  public set accessibilityTitle(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityTitle = value));\n  }\n  public get accessibilityTitle(): string {\n    return this.#element.nativeElement.accessibilityTitle;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'accessibility-title-level' })\n  public set accessibilityTitleLevel(value: SbbTitleLevel) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.accessibilityTitleLevel = value),\n    );\n  }\n  public get accessibilityTitleLevel(): SbbTitleLevel {\n    return this.#element.nativeElement.accessibilityTitleLevel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n}\n",
      "selector": "sbb-footer",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-title",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "accessibility-title-level",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "SbbTitleLevel",
          "decorators": []
        },
        {
          "required": false,
          "name": "expanded",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 53,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "variant",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "\"default\" | \"clock-columns\"",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "variant": {
          "name": "variant",
          "setSignature": {
            "name": "variant",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"default\" | \"clock-columns\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"default\" | \"clock-columns\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "variant",
            "type": "",
            "returnType": "\"default\" | \"clock-columns\"",
            "line": 20
          }
        },
        "expanded": {
          "name": "expanded",
          "setSignature": {
            "name": "expanded",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "expanded",
            "type": "boolean",
            "returnType": "boolean",
            "line": 28
          }
        },
        "accessibilityTitle": {
          "name": "accessibilityTitle",
          "setSignature": {
            "name": "accessibilityTitle",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 34,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityTitle",
            "type": "string",
            "returnType": "string",
            "line": 37
          }
        },
        "accessibilityTitleLevel": {
          "name": "accessibilityTitleLevel",
          "setSignature": {
            "name": "accessibilityTitleLevel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 43,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityTitleLevel",
            "type": "",
            "returnType": "SbbTitleLevel",
            "line": 48
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 53,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 56
          }
        }
      }
    },
    {
      "name": "SbbFormErrorDirective",
      "id": "directive-SbbFormErrorDirective-66915e1fa49bbecd35eda7d752a976084de1f330db52f1e3dc897c27437d35cb38373b0e628d399581b9b7778a5c3605f0278449c6361ac80646db284824ffae",
      "file": "src/angular/form-error/form-error.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbFormErrorElement } from '@sbb-esta/lyne-elements/form-error.js';\nimport '@sbb-esta/lyne-elements/form-error.js';\n\n@Directive({\n  selector: 'sbb-form-error',\n  standalone: true,\n})\nexport class SbbFormErrorDirective {\n  #element: ElementRef<SbbFormErrorElement> = inject(ElementRef<SbbFormErrorElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n}\n",
      "selector": "sbb-form-error",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 19
          }
        }
      }
    },
    {
      "name": "SbbFormFieldClearDirective",
      "id": "directive-SbbFormFieldClearDirective-026bed262045f1d498c7739154a1e6466cbdb2fd728ea7ee54369bf201295948a96acd8cc44e21e6ed8a1fa1d87ac781271f3f570376ac04ac6096989c98fd6f",
      "file": "src/angular/form-field/form-field-clear/form-field-clear.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbButtonType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport type { SbbFormFieldClearElement } from '@sbb-esta/lyne-elements/form-field/form-field-clear.js';\nimport '@sbb-esta/lyne-elements/form-field/form-field-clear.js';\n\n@Directive({\n  selector: 'sbb-form-field-clear',\n  standalone: true,\n})\nexport class SbbFormFieldClearDirective {\n  #element: ElementRef<SbbFormFieldClearElement> = inject(ElementRef<SbbFormFieldClearElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input()\n  public set form(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.form = value));\n  }\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set type(value: SbbButtonType) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): SbbButtonType {\n    return this.#element.nativeElement.type;\n  }\n}\n",
      "selector": "sbb-form-field-clear",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "name": "form",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 49,
          "type": "SbbButtonType",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 41,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 20
          }
        },
        "form": {
          "name": "form",
          "setSignature": {
            "name": "form",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 28
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 33,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 36
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 41,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 44
          }
        },
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 49,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "SbbButtonType",
            "line": 52
          }
        }
      }
    },
    {
      "name": "SbbFormFieldDirective",
      "id": "directive-SbbFormFieldDirective-dac401236ce9664d1ca36f203ac42873fd888f12561014a0c6f4658eb527d80f1bc859d596016bd5765294c2a7218709ec0ddbf8fff2430bc0d5c1a8b18feebd",
      "file": "src/angular/form-field/form-field/form-field.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbFormFieldElement } from '@sbb-esta/lyne-elements/form-field/form-field.js';\nimport '@sbb-esta/lyne-elements/form-field/form-field.js';\n\n@Directive({\n  selector: 'sbb-form-field',\n  standalone: true,\n})\nexport class SbbFormFieldDirective {\n  #element: ElementRef<SbbFormFieldElement> = inject(ElementRef<SbbFormFieldElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'error-space' })\n  public set errorSpace(value: 'none' | 'reserve') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.errorSpace = value));\n  }\n  public get errorSpace(): 'none' | 'reserve' {\n    return this.#element.nativeElement.errorSpace;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set optional(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.optional = value));\n  }\n  public get optional(): boolean {\n    return this.#element.nativeElement.optional;\n  }\n\n  @Input()\n  public set size(value: 'l' | 'm' | 's') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): 'l' | 'm' | 's' {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set borderless(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.borderless = value));\n  }\n  public get borderless(): boolean {\n    return this.#element.nativeElement.borderless;\n  }\n\n  @Input()\n  public set width(value: 'default' | 'collapse') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.width = value));\n  }\n  public get width(): 'default' | 'collapse' {\n    return this.#element.nativeElement.width;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'hidden-label', transform: booleanAttribute })\n  public set hiddenLabel(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.hiddenLabel = value));\n  }\n  public get hiddenLabel(): boolean {\n    return this.#element.nativeElement.hiddenLabel;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'floating-label', transform: booleanAttribute })\n  public set floatingLabel(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.floatingLabel = value));\n  }\n  public get floatingLabel(): boolean {\n    return this.#element.nativeElement.floatingLabel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  public get inputElement(): HTMLInputElement | HTMLSelectElement | HTMLElement | undefined {\n    return this.#element.nativeElement.inputElement;\n  }\n\n  public reset(): void {\n    return this.#element.nativeElement.reset();\n  }\n\n  public clear(): void {\n    return this.#element.nativeElement.clear();\n  }\n}\n",
      "selector": "sbb-form-field",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "borderless",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 41,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "error-space",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "\"none\" | \"reserve\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "floating-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 67,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "hidden-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 58,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 75,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "optional",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "\"l\" | \"m\" | \"s\"",
          "decorators": []
        },
        {
          "name": "width",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 49,
          "type": "\"default\" | \"collapse\"",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "clear",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 90,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        },
        {
          "name": "reset",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 86,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": [],
      "accessors": {
        "errorSpace": {
          "name": "errorSpace",
          "setSignature": {
            "name": "errorSpace",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"none\" | \"reserve\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"none\" | \"reserve\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "errorSpace",
            "type": "",
            "returnType": "\"none\" | \"reserve\"",
            "line": 20
          }
        },
        "optional": {
          "name": "optional",
          "setSignature": {
            "name": "optional",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "optional",
            "type": "boolean",
            "returnType": "boolean",
            "line": 28
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"l\" | \"m\" | \"s\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 33,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"l\" | \"m\" | \"s\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "\"l\" | \"m\" | \"s\"",
            "line": 36
          }
        },
        "borderless": {
          "name": "borderless",
          "setSignature": {
            "name": "borderless",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 41,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "borderless",
            "type": "boolean",
            "returnType": "boolean",
            "line": 44
          }
        },
        "width": {
          "name": "width",
          "setSignature": {
            "name": "width",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"default\" | \"collapse\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 49,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"default\" | \"collapse\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "width",
            "type": "",
            "returnType": "\"default\" | \"collapse\"",
            "line": 52
          }
        },
        "hiddenLabel": {
          "name": "hiddenLabel",
          "setSignature": {
            "name": "hiddenLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 58,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "hiddenLabel",
            "type": "boolean",
            "returnType": "boolean",
            "line": 61
          }
        },
        "floatingLabel": {
          "name": "floatingLabel",
          "setSignature": {
            "name": "floatingLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 67,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "floatingLabel",
            "type": "boolean",
            "returnType": "boolean",
            "line": 70
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 75,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 78
          }
        },
        "inputElement": {
          "name": "inputElement",
          "getSignature": {
            "name": "inputElement",
            "type": "",
            "returnType": "HTMLInputElement | HTMLSelectElement | HTMLElement | undefined",
            "line": 82
          }
        }
      }
    },
    {
      "name": "SbbHeaderButtonDirective",
      "id": "directive-SbbHeaderButtonDirective-441d7bb5924beebede21158e10a7415e83270132b932a95ffd8bcb6e296420dcbaefca199c884c061bc443baa7c44adfc9c4493707beadfe663a02270f11baad",
      "file": "src/angular/header/header-button/header-button.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { SbbButtonType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport { SbbHorizontalFrom } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport type { SbbHeaderButtonElement } from '@sbb-esta/lyne-elements/header/header-button.js';\nimport '@sbb-esta/lyne-elements/header/header-button.js';\n\n@Directive({\n  selector: 'sbb-header-button',\n  standalone: true,\n})\nexport class SbbHeaderButtonDirective {\n  #element: ElementRef<SbbHeaderButtonElement> = inject(ElementRef<SbbHeaderButtonElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'expand-from' })\n  public set expandFrom(value: SbbHorizontalFrom) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.expandFrom = value));\n  }\n  public get expandFrom(): SbbHorizontalFrom {\n    return this.#element.nativeElement.expandFrom;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input()\n  public set form(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.form = value));\n  }\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set type(value: SbbButtonType) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): SbbButtonType {\n    return this.#element.nativeElement.type;\n  }\n}\n",
      "selector": "sbb-header-button",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "expand-from",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "SbbHorizontalFrom",
          "decorators": []
        },
        {
          "name": "form",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "string",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 59,
          "type": "SbbButtonType",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 51,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "expandFrom": {
          "name": "expandFrom",
          "setSignature": {
            "name": "expandFrom",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbHorizontalFrom",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbHorizontalFrom",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "expandFrom",
            "type": "",
            "returnType": "SbbHorizontalFrom",
            "line": 21
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 27,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 30
          }
        },
        "form": {
          "name": "form",
          "setSignature": {
            "name": "form",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 35,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 38
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 43,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 46
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 51,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 54
          }
        },
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 59,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "SbbButtonType",
            "line": 62
          }
        }
      }
    },
    {
      "name": "SbbHeaderDirective",
      "id": "directive-SbbHeaderDirective-ab2ad2350d48ca4d8f45c5d81f683cd462b5327ad64be952617c63320e0cad9a2201097bf36a68bcd011af3f42c2e01a0cdc426033720d025bf00a28ec17502b",
      "file": "src/angular/header/header/header.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbHeaderElement } from '@sbb-esta/lyne-elements/header/header.js';\nimport '@sbb-esta/lyne-elements/header/header.js';\n\n@Directive({\n  selector: 'sbb-header',\n  standalone: true,\n})\nexport class SbbHeaderDirective {\n  #element: ElementRef<SbbHeaderElement> = inject(ElementRef<SbbHeaderElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set expanded(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.expanded = value));\n  }\n  public get expanded(): boolean {\n    return this.#element.nativeElement.expanded;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'scroll-origin' })\n  public set scrollOrigin(value: string | HTMLElement | Document) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.scrollOrigin = value));\n  }\n  public get scrollOrigin(): string | HTMLElement | Document {\n    return this.#element.nativeElement.scrollOrigin;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'hide-on-scroll', transform: booleanAttribute })\n  public set hideOnScroll(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.hideOnScroll = value));\n  }\n  public get hideOnScroll(): boolean {\n    return this.#element.nativeElement.hideOnScroll;\n  }\n\n  @Input()\n  public set size(value: 'm' | 's') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): 'm' | 's' {\n    return this.#element.nativeElement.size;\n  }\n}\n",
      "selector": "sbb-header",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "expanded",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "hide-on-scroll",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "scroll-origin",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "string | HTMLElement | Document",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 42,
          "type": "\"m\" | \"s\"",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "expanded": {
          "name": "expanded",
          "setSignature": {
            "name": "expanded",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "expanded",
            "type": "boolean",
            "returnType": "boolean",
            "line": 19
          }
        },
        "scrollOrigin": {
          "name": "scrollOrigin",
          "setSignature": {
            "name": "scrollOrigin",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | HTMLElement | Document",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | HTMLElement | Document",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "scrollOrigin",
            "type": "",
            "returnType": "string | HTMLElement | Document",
            "line": 28
          }
        },
        "hideOnScroll": {
          "name": "hideOnScroll",
          "setSignature": {
            "name": "hideOnScroll",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 34,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "hideOnScroll",
            "type": "boolean",
            "returnType": "boolean",
            "line": 37
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"m\" | \"s\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 42,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"m\" | \"s\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "\"m\" | \"s\"",
            "line": 45
          }
        }
      }
    },
    {
      "name": "SbbHeaderLinkDirective",
      "id": "directive-SbbHeaderLinkDirective-726bb665138529052be5a65f0eefbd080ec2e09c2d4e646cbf8b2e4fcf657f742631ba8ead6cdc57091198f1da480a4bfa8f1174bca6483b3ef4212e5feb0109",
      "file": "src/angular/header/header-link/header-link.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { LinkTargetType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport { SbbHorizontalFrom } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport type { SbbHeaderLinkElement } from '@sbb-esta/lyne-elements/header/header-link.js';\nimport '@sbb-esta/lyne-elements/header/header-link.js';\n\n@Directive({\n  selector: 'sbb-header-link',\n  standalone: true,\n})\nexport class SbbHeaderLinkDirective {\n  #element: ElementRef<SbbHeaderLinkElement> = inject(ElementRef<SbbHeaderLinkElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'expand-from' })\n  public set expandFrom(value: SbbHorizontalFrom) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.expandFrom = value));\n  }\n  public get expandFrom(): SbbHorizontalFrom {\n    return this.#element.nativeElement.expandFrom;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input()\n  public set href(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.href = value));\n  }\n  public get href(): string {\n    return this.#element.nativeElement.href;\n  }\n\n  @Input()\n  public set target(value: LinkTargetType | string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.target = value));\n  }\n  public get target(): LinkTargetType | string {\n    return this.#element.nativeElement.target;\n  }\n\n  @Input()\n  public set rel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.rel = value));\n  }\n  public get rel(): string {\n    return this.#element.nativeElement.rel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set download(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.download = value));\n  }\n  public get download(): boolean {\n    return this.#element.nativeElement.download;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n}\n",
      "selector": "sbb-header-link",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 69,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "download",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 60,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "expand-from",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "SbbHorizontalFrom",
          "decorators": []
        },
        {
          "name": "href",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "string",
          "decorators": []
        },
        {
          "name": "rel",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 52,
          "type": "string",
          "decorators": []
        },
        {
          "name": "target",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 44,
          "type": "LinkTargetType | string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "expandFrom": {
          "name": "expandFrom",
          "setSignature": {
            "name": "expandFrom",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbHorizontalFrom",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 19,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbHorizontalFrom",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "expandFrom",
            "type": "",
            "returnType": "SbbHorizontalFrom",
            "line": 22
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 28,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 31
          }
        },
        "href": {
          "name": "href",
          "setSignature": {
            "name": "href",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 36,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "href",
            "type": "string",
            "returnType": "string",
            "line": 39
          }
        },
        "target": {
          "name": "target",
          "setSignature": {
            "name": "target",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 44,
            "jsdoctags": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "target",
            "type": "",
            "returnType": "LinkTargetType | string",
            "line": 47
          }
        },
        "rel": {
          "name": "rel",
          "setSignature": {
            "name": "rel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 52,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "rel",
            "type": "string",
            "returnType": "string",
            "line": 55
          }
        },
        "download": {
          "name": "download",
          "setSignature": {
            "name": "download",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 60,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "download",
            "type": "boolean",
            "returnType": "boolean",
            "line": 63
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 69,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 72
          }
        }
      }
    },
    {
      "name": "SbbIconDirective",
      "id": "directive-SbbIconDirective-2a3ce0f5cd031d469bdfd4043756e54058045fe263f68f982c07600de7eac5028bc349bceadf71059389719a06df489eb8f9dbf2c2b81c5a11617194c6bbdcbb",
      "file": "src/angular/icon/icon.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbIconElement } from '@sbb-esta/lyne-elements/icon.js';\nimport '@sbb-esta/lyne-elements/icon.js';\n\n@Directive({\n  selector: 'sbb-icon',\n  standalone: true,\n})\nexport class SbbIconDirective {\n  #element: ElementRef<SbbIconElement> = inject(ElementRef<SbbIconElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'no-sanitize', transform: booleanAttribute })\n  public set noSanitize(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.noSanitize = value));\n  }\n  public get noSanitize(): boolean {\n    return this.#element.nativeElement.noSanitize;\n  }\n}\n",
      "selector": "sbb-icon",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "no-sanitize",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 19
          }
        },
        "noSanitize": {
          "name": "noSanitize",
          "setSignature": {
            "name": "noSanitize",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "noSanitize",
            "type": "boolean",
            "returnType": "boolean",
            "line": 28
          }
        }
      }
    },
    {
      "name": "SbbImageDirective",
      "id": "directive-SbbImageDirective-5d92e713ad13a228e4974ed72d22a2eee45977fa16423fff1621ed2220156ff6c1cb9c776256f1c5dfaf8f6e41508d422d85005406ccde7c659ef60899d1b628",
      "file": "src/angular/image/image.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {\n  Directive,\n  ElementRef,\n  Input,\n  NgZone,\n  Output,\n  inject,\n  numberAttribute,\n} from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbImageElement } from '@sbb-esta/lyne-elements/image.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/image.js';\n\n@Directive({\n  selector: 'sbb-image',\n  standalone: true,\n})\nexport class SbbImageDirective {\n  #element: ElementRef<SbbImageElement> = inject(ElementRef<SbbImageElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set alt(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.alt = value));\n  }\n  public get alt(): string {\n    return this.#element.nativeElement.alt;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'skip-lqip', transform: booleanAttribute })\n  public set skipLqip(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.skipLqip = value));\n  }\n  public get skipLqip(): boolean {\n    return this.#element.nativeElement.skipLqip;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'custom-focal-point', transform: booleanAttribute })\n  public set customFocalPoint(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.customFocalPoint = value));\n  }\n  public get customFocalPoint(): boolean {\n    return this.#element.nativeElement.customFocalPoint;\n  }\n\n  @Input()\n  public set decoding(value: 'sync' | 'async' | 'auto') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.decoding = value));\n  }\n  public get decoding(): 'sync' | 'async' | 'auto' {\n    return this.#element.nativeElement.decoding;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'focal-point-debug', transform: booleanAttribute })\n  public set focalPointDebug(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.focalPointDebug = value));\n  }\n  public get focalPointDebug(): boolean {\n    return this.#element.nativeElement.focalPointDebug;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'focal-point-x', transform: numberAttribute })\n  public set focalPointX(value: number) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.focalPointX = value));\n  }\n  public get focalPointX(): number {\n    return this.#element.nativeElement.focalPointX;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'focal-point-y', transform: numberAttribute })\n  public set focalPointY(value: number) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.focalPointY = value));\n  }\n  public get focalPointY(): number {\n    return this.#element.nativeElement.focalPointY;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'image-src' })\n  public set imageSrc(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.imageSrc = value));\n  }\n  public get imageSrc(): string {\n    return this.#element.nativeElement.imageSrc;\n  }\n\n  @Input()\n  public set importance(value: 'auto' | 'high' | 'low') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.importance = value));\n  }\n  public get importance(): 'auto' | 'high' | 'low' {\n    return this.#element.nativeElement.importance;\n  }\n\n  @Input()\n  public set loading(value: 'eager' | 'lazy') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.loading = value));\n  }\n  public get loading(): 'eager' | 'lazy' {\n    return this.#element.nativeElement.loading;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'performance-mark' })\n  public set performanceMark(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.performanceMark = value));\n  }\n  public get performanceMark(): string {\n    return this.#element.nativeElement.performanceMark;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'picture-sizes-config' })\n  public set pictureSizesConfig(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.pictureSizesConfig = value));\n  }\n  public get pictureSizesConfig(): string {\n    return this.#element.nativeElement.pictureSizesConfig;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public load: Observable<Event> = fromEvent<Event>(this.#element.nativeElement, 'load');\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public error: Observable<Event> = fromEvent<Event>(\n    this.#element.nativeElement,\n    'error',\n  );\n\n  public get complete(): boolean {\n    return this.#element.nativeElement.complete;\n  }\n}\n",
      "selector": "sbb-image",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "name": "alt",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "custom-focal-point",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "decoding",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 51,
          "type": "\"sync\" | \"async\" | \"auto\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "focal-point-debug",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 60,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "focal-point-x",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 69,
          "type": "number",
          "decorators": []
        },
        {
          "required": false,
          "name": "focal-point-y",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 78,
          "type": "number",
          "decorators": []
        },
        {
          "required": false,
          "name": "image-src",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 87,
          "type": "string",
          "decorators": []
        },
        {
          "name": "importance",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 95,
          "type": "\"auto\" | \"high\" | \"low\"",
          "decorators": []
        },
        {
          "name": "loading",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 103,
          "type": "\"eager\" | \"lazy\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "performance-mark",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 112,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "picture-sizes-config",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 121,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "skip-lqip",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "error",
          "defaultValue": "fromEvent<Event>(\n    this.#element.nativeElement,\n    'error',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 132,
          "type": "Observable<Event>"
        },
        {
          "name": "load",
          "defaultValue": "fromEvent<Event>(this.#element.nativeElement, 'load')",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 129,
          "type": "Observable<Event>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "alt": {
          "name": "alt",
          "setSignature": {
            "name": "alt",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "alt",
            "type": "string",
            "returnType": "string",
            "line": 28
          }
        },
        "skipLqip": {
          "name": "skipLqip",
          "setSignature": {
            "name": "skipLqip",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 34,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "skipLqip",
            "type": "boolean",
            "returnType": "boolean",
            "line": 37
          }
        },
        "customFocalPoint": {
          "name": "customFocalPoint",
          "setSignature": {
            "name": "customFocalPoint",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 43,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "customFocalPoint",
            "type": "boolean",
            "returnType": "boolean",
            "line": 46
          }
        },
        "decoding": {
          "name": "decoding",
          "setSignature": {
            "name": "decoding",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"sync\" | \"async\" | \"auto\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 51,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"sync\" | \"async\" | \"auto\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "decoding",
            "type": "",
            "returnType": "\"sync\" | \"async\" | \"auto\"",
            "line": 54
          }
        },
        "focalPointDebug": {
          "name": "focalPointDebug",
          "setSignature": {
            "name": "focalPointDebug",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 60,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "focalPointDebug",
            "type": "boolean",
            "returnType": "boolean",
            "line": 63
          }
        },
        "focalPointX": {
          "name": "focalPointX",
          "setSignature": {
            "name": "focalPointX",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 69,
            "jsdoctags": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "focalPointX",
            "type": "number",
            "returnType": "number",
            "line": 72
          }
        },
        "focalPointY": {
          "name": "focalPointY",
          "setSignature": {
            "name": "focalPointY",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 78,
            "jsdoctags": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "focalPointY",
            "type": "number",
            "returnType": "number",
            "line": 81
          }
        },
        "imageSrc": {
          "name": "imageSrc",
          "setSignature": {
            "name": "imageSrc",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 87,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "imageSrc",
            "type": "string",
            "returnType": "string",
            "line": 90
          }
        },
        "importance": {
          "name": "importance",
          "setSignature": {
            "name": "importance",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"auto\" | \"high\" | \"low\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 95,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"auto\" | \"high\" | \"low\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "importance",
            "type": "",
            "returnType": "\"auto\" | \"high\" | \"low\"",
            "line": 98
          }
        },
        "loading": {
          "name": "loading",
          "setSignature": {
            "name": "loading",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"eager\" | \"lazy\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 103,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"eager\" | \"lazy\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "loading",
            "type": "",
            "returnType": "\"eager\" | \"lazy\"",
            "line": 106
          }
        },
        "performanceMark": {
          "name": "performanceMark",
          "setSignature": {
            "name": "performanceMark",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 112,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "performanceMark",
            "type": "string",
            "returnType": "string",
            "line": 115
          }
        },
        "pictureSizesConfig": {
          "name": "pictureSizesConfig",
          "setSignature": {
            "name": "pictureSizesConfig",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 121,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "pictureSizesConfig",
            "type": "string",
            "returnType": "string",
            "line": 124
          }
        },
        "complete": {
          "name": "complete",
          "getSignature": {
            "name": "complete",
            "type": "boolean",
            "returnType": "boolean",
            "line": 137
          }
        }
      }
    },
    {
      "name": "SbbJourneyHeaderDirective",
      "id": "directive-SbbJourneyHeaderDirective-34753707b795d6ea80551952f8aaea5d0e6ec154e5567c8ed498be478cfb9dba16aa8818e9ac98718245fe44ad9d190b4036c0e3698cc916f4f29c51aae98802",
      "file": "src/angular/journey-header/journey-header.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type {\n  JourneyHeaderSize,\n  SbbJourneyHeaderElement,\n} from '@sbb-esta/lyne-elements/journey-header.js';\nimport '@sbb-esta/lyne-elements/journey-header.js';\nimport { SbbTitleLevel } from '@sbb-esta/lyne-elements/title.js';\n\n@Directive({\n  selector: 'sbb-journey-header',\n  standalone: true,\n})\nexport class SbbJourneyHeaderDirective {\n  #element: ElementRef<SbbJourneyHeaderElement> = inject(ElementRef<SbbJourneyHeaderElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set origin(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.origin = value));\n  }\n  public get origin(): string {\n    return this.#element.nativeElement.origin;\n  }\n\n  @Input()\n  public set destination(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.destination = value));\n  }\n  public get destination(): string {\n    return this.#element.nativeElement.destination;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'round-trip', transform: booleanAttribute })\n  public set roundTrip(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.roundTrip = value));\n  }\n  public get roundTrip(): boolean {\n    return this.#element.nativeElement.roundTrip;\n  }\n\n  @Input()\n  public set level(value: SbbTitleLevel) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.level = value));\n  }\n  public get level(): SbbTitleLevel {\n    return this.#element.nativeElement.level;\n  }\n\n  @Input()\n  public set size(value: JourneyHeaderSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): JourneyHeaderSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n}\n",
      "selector": "sbb-journey-header",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "name": "destination",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "string",
          "decorators": []
        },
        {
          "name": "level",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 45,
          "type": "SbbTitleLevel",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 61,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "origin",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "round-trip",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 37,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 53,
          "type": "JourneyHeaderSize",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "origin": {
          "name": "origin",
          "setSignature": {
            "name": "origin",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 20,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "origin",
            "type": "string",
            "returnType": "string",
            "line": 23
          }
        },
        "destination": {
          "name": "destination",
          "setSignature": {
            "name": "destination",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 28,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "destination",
            "type": "string",
            "returnType": "string",
            "line": 31
          }
        },
        "roundTrip": {
          "name": "roundTrip",
          "setSignature": {
            "name": "roundTrip",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 37,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "roundTrip",
            "type": "boolean",
            "returnType": "boolean",
            "line": 40
          }
        },
        "level": {
          "name": "level",
          "setSignature": {
            "name": "level",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 45,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "level",
            "type": "",
            "returnType": "SbbTitleLevel",
            "line": 48
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "JourneyHeaderSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 53,
            "jsdoctags": [
              {
                "name": "value",
                "type": "JourneyHeaderSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "JourneyHeaderSize",
            "line": 56
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 61,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 64
          }
        }
      }
    },
    {
      "name": "SbbLeadContainerDirective",
      "id": "directive-SbbLeadContainerDirective-6cca2091141acff7413d8679e4f051a2e9fb9706ae9ab61d2cf990ec0ca651d3d163ac61815e02ca44ea49eea727ace4df22588e5aca1851b2c83eb35f729d58",
      "file": "src/angular/lead-container/lead-container.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive } from '@angular/core';\nimport '@sbb-esta/lyne-elements/lead-container.js';\n\n@Directive({\n  selector: 'sbb-lead-container',\n  standalone: true,\n})\nexport class SbbLeadContainerDirective {}\n",
      "selector": "sbb-lead-container",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": []
    },
    {
      "name": "SbbLinkButtonDirective",
      "id": "directive-SbbLinkButtonDirective-673f8fffe3fb9a7135124a4bd7b2a45860dd83f43660b14799b9fc40253cb7a23058f4e590a5c4117545925ce4963f417975b64f51595551147f013d1bf06d72",
      "file": "src/angular/link/link-button/link-button.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbButtonType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport type { SbbLinkButtonElement } from '@sbb-esta/lyne-elements/link/link-button.js';\nimport '@sbb-esta/lyne-elements/link/link-button.js';\nimport { SbbLinkSize } from '@sbb-esta/lyne-elements/link.js';\n\n@Directive({\n  selector: 'sbb-link-button',\n  standalone: true,\n})\nexport class SbbLinkButtonDirective {\n  #element: ElementRef<SbbLinkButtonElement> = inject(ElementRef<SbbLinkButtonElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: SbbLinkSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbLinkSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'disabled-interactive', transform: booleanAttribute })\n  public set disabledInteractive(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabledInteractive = value));\n  }\n  public get disabledInteractive(): boolean {\n    return this.#element.nativeElement.disabledInteractive;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set form(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.form = value));\n  }\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set type(value: SbbButtonType) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): SbbButtonType {\n    return this.#element.nativeElement.type;\n  }\n}\n",
      "selector": "sbb-link-button",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled-interactive",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "form",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 51,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 59,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "SbbLinkSize",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 75,
          "type": "SbbButtonType",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 67,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbLinkSize",
            "line": 21
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 29
          }
        },
        "disabledInteractive": {
          "name": "disabledInteractive",
          "setSignature": {
            "name": "disabledInteractive",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 35,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabledInteractive",
            "type": "boolean",
            "returnType": "boolean",
            "line": 38
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 43,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 46
          }
        },
        "form": {
          "name": "form",
          "setSignature": {
            "name": "form",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 51,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 54
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 59,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 62
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 67,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 70
          }
        },
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 75,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "SbbButtonType",
            "line": 78
          }
        }
      }
    },
    {
      "name": "SbbLinkDirective",
      "id": "directive-SbbLinkDirective-150c11b539938fd9138dc0259053143f4563e4c9a6ede694b782f02dfefae6173d9cd6a6f73c618435aa9b12dd99595b62767881e114592e0b54532d1a749f49",
      "file": "src/angular/link/link/link.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { LinkTargetType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport type { SbbLinkElement } from '@sbb-esta/lyne-elements/link/link.js';\nimport { SbbLinkSize } from '@sbb-esta/lyne-elements/link.js';\nimport '@sbb-esta/lyne-elements/link/link.js';\n\n@Directive({\n  selector: 'sbb-link',\n  standalone: true,\n})\nexport class SbbLinkDirective {\n  #element: ElementRef<SbbLinkElement> = inject(ElementRef<SbbLinkElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: SbbLinkSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbLinkSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set href(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.href = value));\n  }\n  public get href(): string {\n    return this.#element.nativeElement.href;\n  }\n\n  @Input()\n  public set target(value: LinkTargetType | string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.target = value));\n  }\n  public get target(): LinkTargetType | string {\n    return this.#element.nativeElement.target;\n  }\n\n  @Input()\n  public set rel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.rel = value));\n  }\n  public get rel(): string {\n    return this.#element.nativeElement.rel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set download(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.download = value));\n  }\n  public get download(): boolean {\n    return this.#element.nativeElement.download;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n}\n",
      "selector": "sbb-link",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 75,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "download",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 66,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "href",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 42,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "rel",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 58,
          "type": "string",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "SbbLinkSize",
          "decorators": []
        },
        {
          "name": "target",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 50,
          "type": "LinkTargetType | string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbLinkSize",
            "line": 21
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 29
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 34,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 37
          }
        },
        "href": {
          "name": "href",
          "setSignature": {
            "name": "href",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 42,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "href",
            "type": "string",
            "returnType": "string",
            "line": 45
          }
        },
        "target": {
          "name": "target",
          "setSignature": {
            "name": "target",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 50,
            "jsdoctags": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "target",
            "type": "",
            "returnType": "LinkTargetType | string",
            "line": 53
          }
        },
        "rel": {
          "name": "rel",
          "setSignature": {
            "name": "rel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 58,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "rel",
            "type": "string",
            "returnType": "string",
            "line": 61
          }
        },
        "download": {
          "name": "download",
          "setSignature": {
            "name": "download",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 66,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "download",
            "type": "boolean",
            "returnType": "boolean",
            "line": 69
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 75,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 78
          }
        }
      }
    },
    {
      "name": "SbbLinkListAnchorDirective",
      "id": "directive-SbbLinkListAnchorDirective-fa4f1542fee04351ae6efcc470c021f38d45bb2e0735ef27f5ea47837423a387b0cd347bd2fe7b9f77a7ab8e3106397f66188d20e9f0a0255cc409c0fc4b296e",
      "file": "src/angular/link-list/link-list-anchor/link-list-anchor.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbLinkListAnchorElement } from '@sbb-esta/lyne-elements/link-list/link-list-anchor.js';\nimport '@sbb-esta/lyne-elements/link-list/link-list-anchor.js';\nimport { SbbLinkSize } from '@sbb-esta/lyne-elements/link.js';\nimport { SbbTitleLevel } from '@sbb-esta/lyne-elements/title.js';\n\n@Directive({\n  selector: 'sbb-link-list-anchor',\n  standalone: true,\n})\nexport class SbbLinkListAnchorDirective {\n  #element: ElementRef<SbbLinkListAnchorElement> = inject(ElementRef<SbbLinkListAnchorElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'title-content' })\n  public set titleContent(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleContent = value));\n  }\n  public get titleContent(): string {\n    return this.#element.nativeElement.titleContent;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'title-level' })\n  public set titleLevel(value: SbbTitleLevel) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleLevel = value));\n  }\n  public get titleLevel(): SbbTitleLevel {\n    return this.#element.nativeElement.titleLevel;\n  }\n\n  @Input()\n  public set size(value: SbbLinkSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbLinkSize {\n    return this.#element.nativeElement.size;\n  }\n}\n",
      "selector": "sbb-link-list-anchor",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 44,
          "type": "SbbLinkSize",
          "decorators": []
        },
        {
          "required": false,
          "name": "title-content",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "title-level",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "SbbTitleLevel",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 21
          }
        },
        "titleContent": {
          "name": "titleContent",
          "setSignature": {
            "name": "titleContent",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 27,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleContent",
            "type": "string",
            "returnType": "string",
            "line": 30
          }
        },
        "titleLevel": {
          "name": "titleLevel",
          "setSignature": {
            "name": "titleLevel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 36,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleLevel",
            "type": "",
            "returnType": "SbbTitleLevel",
            "line": 39
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 44,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbLinkSize",
            "line": 47
          }
        }
      }
    },
    {
      "name": "SbbLinkListDirective",
      "id": "directive-SbbLinkListDirective-c11ef38ecc9f26023fd82f62af05eb8b0df704040c1f04124dee4ac8af2f7a02320eb31500faaf18fef6c9e459a6e1b6fb11d5167e84a12f06dde8df1cfca8f6",
      "file": "src/angular/link-list/link-list/link-list.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbHorizontalFrom, SbbOrientation } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport type { SbbLinkListElement } from '@sbb-esta/lyne-elements/link-list/link-list.js';\nimport { SbbLinkSize } from '@sbb-esta/lyne-elements/link.js';\nimport { SbbTitleLevel } from '@sbb-esta/lyne-elements/title.js';\nimport '@sbb-esta/lyne-elements/link-list/link-list.js';\n\n@Directive({\n  selector: 'sbb-link-list',\n  standalone: true,\n})\nexport class SbbLinkListDirective {\n  #element: ElementRef<SbbLinkListElement> = inject(ElementRef<SbbLinkListElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'horizontal-from' })\n  public set horizontalFrom(value: SbbHorizontalFrom | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.horizontalFrom = value));\n  }\n  public get horizontalFrom(): SbbHorizontalFrom | null {\n    return this.#element.nativeElement.horizontalFrom;\n  }\n\n  @Input()\n  public set orientation(value: SbbOrientation) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.orientation = value));\n  }\n  public get orientation(): SbbOrientation {\n    return this.#element.nativeElement.orientation;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'title-content' })\n  public set titleContent(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleContent = value));\n  }\n  public get titleContent(): string {\n    return this.#element.nativeElement.titleContent;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'title-level' })\n  public set titleLevel(value: SbbTitleLevel) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleLevel = value));\n  }\n  public get titleLevel(): SbbTitleLevel {\n    return this.#element.nativeElement.titleLevel;\n  }\n\n  @Input()\n  public set size(value: SbbLinkSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbLinkSize {\n    return this.#element.nativeElement.size;\n  }\n}\n",
      "selector": "sbb-link-list",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "horizontal-from",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "SbbHorizontalFrom | null",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "orientation",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "SbbOrientation",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 62,
          "type": "SbbLinkSize",
          "decorators": []
        },
        {
          "required": false,
          "name": "title-content",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 45,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "title-level",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 54,
          "type": "SbbTitleLevel",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "horizontalFrom": {
          "name": "horizontalFrom",
          "setSignature": {
            "name": "horizontalFrom",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbHorizontalFrom | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 20,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbHorizontalFrom | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "horizontalFrom",
            "type": "",
            "returnType": "SbbHorizontalFrom | null",
            "line": 23
          }
        },
        "orientation": {
          "name": "orientation",
          "setSignature": {
            "name": "orientation",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbOrientation",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 28,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbOrientation",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "orientation",
            "type": "",
            "returnType": "SbbOrientation",
            "line": 31
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 36,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 39
          }
        },
        "titleContent": {
          "name": "titleContent",
          "setSignature": {
            "name": "titleContent",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 45,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleContent",
            "type": "string",
            "returnType": "string",
            "line": 48
          }
        },
        "titleLevel": {
          "name": "titleLevel",
          "setSignature": {
            "name": "titleLevel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 54,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleLevel",
            "type": "",
            "returnType": "SbbTitleLevel",
            "line": 57
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 62,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbLinkSize",
            "line": 65
          }
        }
      }
    },
    {
      "name": "SbbLinkStaticDirective",
      "id": "directive-SbbLinkStaticDirective-bc180c6eb74f185531ab11cf6bc3b5ae452835f7f7d3f5b98df91f172f5eb3d8298febf5a8b911a28a3abc748f0650597a10c2c2ae50aa9099ffe2b158c3e3b3",
      "file": "src/angular/link/link-static/link-static.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbLinkStaticElement } from '@sbb-esta/lyne-elements/link/link-static.js';\nimport '@sbb-esta/lyne-elements/link/link-static.js';\nimport { SbbLinkSize } from '@sbb-esta/lyne-elements/link.js';\n\n@Directive({\n  selector: 'sbb-link-static',\n  standalone: true,\n})\nexport class SbbLinkStaticDirective {\n  #element: ElementRef<SbbLinkStaticElement> = inject(ElementRef<SbbLinkStaticElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: SbbLinkSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbLinkSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n}\n",
      "selector": "sbb-link-static",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "SbbLinkSize",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbLinkSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbLinkSize",
            "line": 20
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 28
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 33,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 36
          }
        }
      }
    },
    {
      "name": "SbbLoadingIndicatorCircleDirective",
      "id": "directive-SbbLoadingIndicatorCircleDirective-1cff29db645ebd1da90bf2e44e6d346fb5a5d9b1be7e8eec5d07a293b0323d06d1d7c561560f11c3bc01eeaa7ddbd170578e8cdcdc2caec4fd6ed4431058e802",
      "file": "src/angular/loading-indicator-circle/loading-indicator-circle.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport type { SbbLoadingIndicatorCircleElement } from '@sbb-esta/lyne-elements/loading-indicator-circle.js';\nimport '@sbb-esta/lyne-elements/loading-indicator-circle.js';\n\n@Directive({\n  selector: 'sbb-loading-indicator-circle',\n  standalone: true,\n})\nexport class SbbLoadingIndicatorCircleDirective {\n  #element: ElementRef<SbbLoadingIndicatorCircleElement> = inject(\n    ElementRef<SbbLoadingIndicatorCircleElement>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set color(value: 'default' | 'smoke' | 'white') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.color = value));\n  }\n  public get color(): 'default' | 'smoke' | 'white' {\n    return this.#element.nativeElement.color;\n  }\n}\n",
      "selector": "sbb-loading-indicator-circle",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "name": "color",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "\"default\" | \"smoke\" | \"white\"",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "color": {
          "name": "color",
          "setSignature": {
            "name": "color",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"default\" | \"smoke\" | \"white\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"default\" | \"smoke\" | \"white\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "color",
            "type": "",
            "returnType": "\"default\" | \"smoke\" | \"white\"",
            "line": 20
          }
        }
      }
    },
    {
      "name": "SbbLoadingIndicatorDirective",
      "id": "directive-SbbLoadingIndicatorDirective-5a59340d44cfbe66193cc706c197c27930a49ca3e65742fe4a16469a8c781a120058fabcf39b3eb1133c2dfc15b78ca729b5b38b7177d6707f5aae1ac36f5b88",
      "file": "src/angular/loading-indicator/loading-indicator.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport type { SbbLoadingIndicatorElement } from '@sbb-esta/lyne-elements/loading-indicator.js';\nimport '@sbb-esta/lyne-elements/loading-indicator.js';\n\n@Directive({\n  selector: 'sbb-loading-indicator',\n  standalone: true,\n})\nexport class SbbLoadingIndicatorDirective {\n  #element: ElementRef<SbbLoadingIndicatorElement> = inject(ElementRef<SbbLoadingIndicatorElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: 's' | 'l' | 'xl' | 'xxl' | 'xxxl') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): 's' | 'l' | 'xl' | 'xxl' | 'xxxl' {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input()\n  public set color(value: 'default' | 'smoke' | 'white') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.color = value));\n  }\n  public get color(): 'default' | 'smoke' | 'white' {\n    return this.#element.nativeElement.color;\n  }\n}\n",
      "selector": "sbb-loading-indicator",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "name": "color",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "\"default\" | \"smoke\" | \"white\"",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "\"s\" | \"l\" | \"xl\" | \"xxl\" | \"xxxl\"",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"s\" | \"l\" | \"xl\" | \"xxl\" | \"xxxl\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 15,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"s\" | \"l\" | \"xl\" | \"xxl\" | \"xxxl\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "\"s\" | \"l\" | \"xl\" | \"xxl\" | \"xxxl\"",
            "line": 18
          }
        },
        "color": {
          "name": "color",
          "setSignature": {
            "name": "color",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"default\" | \"smoke\" | \"white\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 23,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"default\" | \"smoke\" | \"white\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "color",
            "type": "",
            "returnType": "\"default\" | \"smoke\" | \"white\"",
            "line": 26
          }
        }
      }
    },
    {
      "name": "SbbLogoDirective",
      "id": "directive-SbbLogoDirective-5bb13d8591ad4fe4be6147ff8aac3e27421f71c9d45fe81c7b406ab702f0a8ed42a0db601192b19bd36c8b7980e9b27201e765331377fa1571b7022853be3dd8",
      "file": "src/angular/logo/logo.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbProtectiveRoom } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport type { SbbLogoElement } from '@sbb-esta/lyne-elements/logo.js';\nimport '@sbb-esta/lyne-elements/logo.js';\n\n@Directive({\n  selector: 'sbb-logo',\n  standalone: true,\n})\nexport class SbbLogoDirective {\n  #element: ElementRef<SbbLogoElement> = inject(ElementRef<SbbLogoElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'protective-room' })\n  public set protectiveRoom(value: SbbProtectiveRoom) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.protectiveRoom = value));\n  }\n  public get protectiveRoom(): SbbProtectiveRoom {\n    return this.#element.nativeElement.protectiveRoom;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n}\n",
      "selector": "sbb-logo",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "protective-room",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "SbbProtectiveRoom",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "protectiveRoom": {
          "name": "protectiveRoom",
          "setSignature": {
            "name": "protectiveRoom",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbProtectiveRoom",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbProtectiveRoom",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "protectiveRoom",
            "type": "",
            "returnType": "SbbProtectiveRoom",
            "line": 21
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 27,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 30
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 35,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 38
          }
        }
      }
    },
    {
      "name": "SbbMapContainerDirective",
      "id": "directive-SbbMapContainerDirective-318f60a460397b591e379e46a69d51736239cecec4541302423f1812c26c9455917380fdd012345f3ed07107ae8c1e4c237b17b64ccca4b9cffe784a6a932237",
      "file": "src/angular/map-container/map-container.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbMapContainerElement } from '@sbb-esta/lyne-elements/map-container.js';\nimport '@sbb-esta/lyne-elements/map-container.js';\n\n@Directive({\n  selector: 'sbb-map-container',\n  standalone: true,\n})\nexport class SbbMapContainerDirective {\n  #element: ElementRef<SbbMapContainerElement> = inject(ElementRef<SbbMapContainerElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'hide-scroll-up-button', transform: booleanAttribute })\n  public set hideScrollUpButton(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.hideScrollUpButton = value));\n  }\n  public get hideScrollUpButton(): boolean {\n    return this.#element.nativeElement.hideScrollUpButton;\n  }\n}\n",
      "selector": "sbb-map-container",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "hide-scroll-up-button",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "hideScrollUpButton": {
          "name": "hideScrollUpButton",
          "setSignature": {
            "name": "hideScrollUpButton",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "hideScrollUpButton",
            "type": "boolean",
            "returnType": "boolean",
            "line": 20
          }
        }
      }
    },
    {
      "name": "SbbMenuButtonDirective",
      "id": "directive-SbbMenuButtonDirective-9da0a35e357bd3201f4aff7f69123dcfa8ad89d8836bcb7206be05ebdea99540aec40251e69eab7a6f89eabfdae55770086d4563bfdc0db25f0fe5033f730558",
      "file": "src/angular/menu/menu-button/menu-button.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbButtonType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport type { SbbMenuButtonElement } from '@sbb-esta/lyne-elements/menu/menu-button.js';\nimport '@sbb-esta/lyne-elements/menu/menu-button.js';\n\n@Directive({\n  selector: 'sbb-menu-button',\n  standalone: true,\n})\nexport class SbbMenuButtonDirective {\n  #element: ElementRef<SbbMenuButtonElement> = inject(ElementRef<SbbMenuButtonElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'disabled-interactive', transform: booleanAttribute })\n  public set disabledInteractive(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabledInteractive = value));\n  }\n  public get disabledInteractive(): boolean {\n    return this.#element.nativeElement.disabledInteractive;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set amount(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.amount = value));\n  }\n  public get amount(): string {\n    return this.#element.nativeElement.amount;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input()\n  public set form(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.form = value));\n  }\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set type(value: SbbButtonType) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): SbbButtonType {\n    return this.#element.nativeElement.type;\n  }\n}\n",
      "selector": "sbb-menu-button",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "name": "amount",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled-interactive",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "form",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 51,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 59,
          "type": "string",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 75,
          "type": "SbbButtonType",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 67,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "disabledInteractive": {
          "name": "disabledInteractive",
          "setSignature": {
            "name": "disabledInteractive",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabledInteractive",
            "type": "boolean",
            "returnType": "boolean",
            "line": 21
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 29
          }
        },
        "amount": {
          "name": "amount",
          "setSignature": {
            "name": "amount",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 34,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "amount",
            "type": "string",
            "returnType": "string",
            "line": 37
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 43,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 46
          }
        },
        "form": {
          "name": "form",
          "setSignature": {
            "name": "form",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 51,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 54
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 59,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 62
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 67,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 70
          }
        },
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 75,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "SbbButtonType",
            "line": 78
          }
        }
      }
    },
    {
      "name": "SbbMenuDirective",
      "id": "directive-SbbMenuDirective-ebe74b9778f76b085da417886b4c11f2551832b8c7da45c5910a85cb4ad2167588ea71153de19d68ee34de383a3aa96f90148c8e205f86f3fb700ef2d3984d63",
      "file": "src/angular/menu/menu/menu.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, Output, inject } from '@angular/core';\nimport type { SbbMenuElement } from '@sbb-esta/lyne-elements/menu/menu.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/menu/menu.js';\n\n@Directive({\n  selector: 'sbb-menu',\n  standalone: true,\n})\nexport class SbbMenuDirective {\n  #element: ElementRef<SbbMenuElement> = inject(ElementRef<SbbMenuElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set trigger(value: string | HTMLElement | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.trigger = value));\n  }\n  public get trigger(): string | HTMLElement | null {\n    return this.#element.nativeElement.trigger;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'list-accessibility-label' })\n  public set listAccessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.listAccessibilityLabel = value),\n    );\n  }\n  public get listAccessibilityLabel(): string {\n    return this.#element.nativeElement.listAccessibilityLabel;\n  }\n\n  @Output() public willOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  );\n\n  @Output() public didOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  );\n\n  @Output() public willClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  );\n\n  @Output() public didClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  );\n\n  public get isOpen(): boolean {\n    return this.#element.nativeElement.isOpen;\n  }\n\n  public open(): void {\n    return this.#element.nativeElement.open();\n  }\n\n  public close(): void {\n    return this.#element.nativeElement.close();\n  }\n}\n",
      "selector": "sbb-menu",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "list-accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "string",
          "decorators": []
        },
        {
          "name": "trigger",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "string | HTMLElement | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "didClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 49,
          "type": "Observable<void>"
        },
        {
          "name": "didOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 39,
          "type": "Observable<void>"
        },
        {
          "name": "willClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 44,
          "type": "Observable<void>"
        },
        {
          "name": "willOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 62,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        },
        {
          "name": "open",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 58,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": [],
      "accessors": {
        "trigger": {
          "name": "trigger",
          "setSignature": {
            "name": "trigger",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | HTMLElement | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | HTMLElement | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "trigger",
            "type": "",
            "returnType": "string | HTMLElement | null",
            "line": 19
          }
        },
        "listAccessibilityLabel": {
          "name": "listAccessibilityLabel",
          "setSignature": {
            "name": "listAccessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "listAccessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 30
          }
        },
        "isOpen": {
          "name": "isOpen",
          "getSignature": {
            "name": "isOpen",
            "type": "boolean",
            "returnType": "boolean",
            "line": 54
          }
        }
      }
    },
    {
      "name": "SbbMenuLinkDirective",
      "id": "directive-SbbMenuLinkDirective-7ea6677189fb5a8c610f42fbb61e43cb22b23959904ed8027dab74c004d0df2e4c244ac12abd4b65eb679b060c4d45738a1824bdc49ea793ad05608a6652a836",
      "file": "src/angular/menu/menu-link/menu-link.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { LinkTargetType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport type { SbbMenuLinkElement } from '@sbb-esta/lyne-elements/menu/menu-link.js';\nimport '@sbb-esta/lyne-elements/menu/menu-link.js';\n\n@Directive({\n  selector: 'sbb-menu-link',\n  standalone: true,\n})\nexport class SbbMenuLinkDirective {\n  #element: ElementRef<SbbMenuLinkElement> = inject(ElementRef<SbbMenuLinkElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'disabled-interactive', transform: booleanAttribute })\n  public set disabledInteractive(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabledInteractive = value));\n  }\n  public get disabledInteractive(): boolean {\n    return this.#element.nativeElement.disabledInteractive;\n  }\n\n  @Input()\n  public set amount(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.amount = value));\n  }\n  public get amount(): string {\n    return this.#element.nativeElement.amount;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set href(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.href = value));\n  }\n  public get href(): string {\n    return this.#element.nativeElement.href;\n  }\n\n  @Input()\n  public set target(value: LinkTargetType | string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.target = value));\n  }\n  public get target(): LinkTargetType | string {\n    return this.#element.nativeElement.target;\n  }\n\n  @Input()\n  public set rel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.rel = value));\n  }\n  public get rel(): string {\n    return this.#element.nativeElement.rel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set download(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.download = value));\n  }\n  public get download(): boolean {\n    return this.#element.nativeElement.download;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n}\n",
      "selector": "sbb-menu-link",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 84,
          "type": "string",
          "decorators": []
        },
        {
          "name": "amount",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled-interactive",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "download",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 75,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "href",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 51,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "string",
          "decorators": []
        },
        {
          "name": "rel",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 67,
          "type": "string",
          "decorators": []
        },
        {
          "name": "target",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 59,
          "type": "LinkTargetType | string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "disabledInteractive": {
          "name": "disabledInteractive",
          "setSignature": {
            "name": "disabledInteractive",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabledInteractive",
            "type": "boolean",
            "returnType": "boolean",
            "line": 21
          }
        },
        "amount": {
          "name": "amount",
          "setSignature": {
            "name": "amount",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "amount",
            "type": "string",
            "returnType": "string",
            "line": 29
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 35,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 38
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 43,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 46
          }
        },
        "href": {
          "name": "href",
          "setSignature": {
            "name": "href",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 51,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "href",
            "type": "string",
            "returnType": "string",
            "line": 54
          }
        },
        "target": {
          "name": "target",
          "setSignature": {
            "name": "target",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 59,
            "jsdoctags": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "target",
            "type": "",
            "returnType": "LinkTargetType | string",
            "line": 62
          }
        },
        "rel": {
          "name": "rel",
          "setSignature": {
            "name": "rel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 67,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "rel",
            "type": "string",
            "returnType": "string",
            "line": 70
          }
        },
        "download": {
          "name": "download",
          "setSignature": {
            "name": "download",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 75,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "download",
            "type": "boolean",
            "returnType": "boolean",
            "line": 78
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 84,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 87
          }
        }
      }
    },
    {
      "name": "SbbMessageDirective",
      "id": "directive-SbbMessageDirective-8687039991517835e3d7c67698cd6cef3179707820f02addc345103abee43dc822d401ed59b2635e8564ea4b74e3dcc69fe07f1c82e2e5e6ed87b3d862dd0b8b",
      "file": "src/angular/message/message.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport type { SbbMessageElement } from '@sbb-esta/lyne-elements/message.js';\nimport '@sbb-esta/lyne-elements/message.js';\nimport { SbbTitleLevel } from '@sbb-esta/lyne-elements/title.js';\n\n@Directive({\n  selector: 'sbb-message',\n  standalone: true,\n})\nexport class SbbMessageDirective {\n  #element: ElementRef<SbbMessageElement> = inject(ElementRef<SbbMessageElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'title-content' })\n  public set titleContent(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleContent = value));\n  }\n  public get titleContent(): string {\n    return this.#element.nativeElement.titleContent;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'title-level' })\n  public set titleLevel(value: SbbTitleLevel) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleLevel = value));\n  }\n  public get titleLevel(): SbbTitleLevel {\n    return this.#element.nativeElement.titleLevel;\n  }\n}\n",
      "selector": "sbb-message",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "title-content",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "title-level",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "SbbTitleLevel",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "titleContent": {
          "name": "titleContent",
          "setSignature": {
            "name": "titleContent",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleContent",
            "type": "string",
            "returnType": "string",
            "line": 20
          }
        },
        "titleLevel": {
          "name": "titleLevel",
          "setSignature": {
            "name": "titleLevel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleLevel",
            "type": "",
            "returnType": "SbbTitleLevel",
            "line": 29
          }
        }
      }
    },
    {
      "name": "SbbMiniButtonDirective",
      "id": "directive-SbbMiniButtonDirective-1afe13ce95123727057fe984b5168b5e9d8bb35323ad42ff49873a4b56f0a4d3d69f26f6968c95835266b15137c211e6cc9672727b190cd0b74e1f86e1b3638d",
      "file": "src/angular/button/mini-button/mini-button.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbMiniButtonElement } from '@sbb-esta/lyne-elements/button/mini-button.js';\nimport '@sbb-esta/lyne-elements/button/mini-button.js';\nimport { SbbButtonType } from '@sbb-esta/lyne-elements/core/base-elements.js';\n\n@Directive({\n  selector: 'sbb-mini-button',\n  standalone: true,\n})\nexport class SbbMiniButtonDirective {\n  #element: ElementRef<SbbMiniButtonElement> = inject(ElementRef<SbbMiniButtonElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'disabled-interactive', transform: booleanAttribute })\n  public set disabledInteractive(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabledInteractive = value));\n  }\n  public get disabledInteractive(): boolean {\n    return this.#element.nativeElement.disabledInteractive;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input()\n  public set form(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.form = value));\n  }\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set type(value: SbbButtonType) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): SbbButtonType {\n    return this.#element.nativeElement.type;\n  }\n}\n",
      "selector": "sbb-mini-button",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled-interactive",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "form",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 51,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 59,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 75,
          "type": "SbbButtonType",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 67,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "disabledInteractive": {
          "name": "disabledInteractive",
          "setSignature": {
            "name": "disabledInteractive",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabledInteractive",
            "type": "boolean",
            "returnType": "boolean",
            "line": 21
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 29
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 34,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 37
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 43,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 46
          }
        },
        "form": {
          "name": "form",
          "setSignature": {
            "name": "form",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 51,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 54
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 59,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 62
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 67,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 70
          }
        },
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 75,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "SbbButtonType",
            "line": 78
          }
        }
      }
    },
    {
      "name": "SbbMiniButtonGroupDirective",
      "id": "directive-SbbMiniButtonGroupDirective-3a7900d77d620c97ded919e9c541ae591baad82995623636868b2e0600cbf5d16fb8ac67860abb3deee67df6f89fbfdf73c8b4aec5eb7b113358b8e420f2d062",
      "file": "src/angular/button/mini-button-group/mini-button-group.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type {\n  SbbMiniButtonGroupElement,\n  SbbMiniButtonGroupSize,\n} from '@sbb-esta/lyne-elements/button/mini-button-group.js';\nimport '@sbb-esta/lyne-elements/button/mini-button-group.js';\n\n@Directive({\n  selector: 'sbb-mini-button-group',\n  standalone: true,\n})\nexport class SbbMiniButtonGroupDirective {\n  #element: ElementRef<SbbMiniButtonGroupElement> = inject(ElementRef<SbbMiniButtonGroupElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n\n  @Input()\n  public set size(value: SbbMiniButtonGroupSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbMiniButtonGroupSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n}\n",
      "selector": "sbb-mini-button-group",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "SbbMiniButtonGroupSize",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 20,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 23
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbMiniButtonGroupSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 28,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbMiniButtonGroupSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbMiniButtonGroupSize",
            "line": 31
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 36,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 39
          }
        }
      }
    },
    {
      "name": "SbbNavigationButtonDirective",
      "id": "directive-SbbNavigationButtonDirective-50040b3c5468945590ec254d69c7ed1c8a41a0844b9a03401eb1d70420c4b7026e28044a7ec39fd3b9989c94245a839afa9890e55784b16875a4f571bf91c55c",
      "file": "src/angular/navigation/navigation-button/navigation-button.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { SbbButtonType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport type { SbbNavigationButtonElement } from '@sbb-esta/lyne-elements/navigation/navigation-button.js';\nimport '@sbb-esta/lyne-elements/navigation/navigation-button.js';\nimport { SbbNavigationMarkerElement } from '@sbb-esta/lyne-elements/navigation/navigation-marker.js';\nimport { SbbNavigationSectionElement } from '@sbb-esta/lyne-elements/navigation/navigation-section.js';\nimport { SbbNavigationActionSize } from '@sbb-esta/lyne-elements/navigation.js';\n\n@Directive({\n  selector: 'sbb-navigation-button',\n  standalone: true,\n})\nexport class SbbNavigationButtonDirective {\n  #element: ElementRef<SbbNavigationButtonElement> = inject(ElementRef<SbbNavigationButtonElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: SbbNavigationActionSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbNavigationActionSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input()\n  public set connectedSection(value: SbbNavigationSectionElement | undefined) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.connectedSection = value));\n  }\n  public get connectedSection(): SbbNavigationSectionElement | undefined {\n    return this.#element.nativeElement.connectedSection;\n  }\n\n  @Input()\n  public set form(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.form = value));\n  }\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set type(value: SbbButtonType) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): SbbButtonType {\n    return this.#element.nativeElement.type;\n  }\n\n  public get marker(): SbbNavigationMarkerElement | null {\n    return this.#element.nativeElement.marker;\n  }\n\n  public get section(): SbbNavigationSectionElement | null {\n    return this.#element.nativeElement.section;\n  }\n}\n",
      "selector": "sbb-navigation-button",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "name": "connectedSection",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "SbbNavigationSectionElement | undefined",
          "decorators": []
        },
        {
          "name": "form",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "string",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "SbbNavigationActionSize",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 59,
          "type": "SbbButtonType",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 51,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbNavigationActionSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 19,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbNavigationActionSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbNavigationActionSize",
            "line": 22
          }
        },
        "connectedSection": {
          "name": "connectedSection",
          "setSignature": {
            "name": "connectedSection",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbNavigationSectionElement | undefined",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 27,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbNavigationSectionElement | undefined",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "connectedSection",
            "type": "",
            "returnType": "SbbNavigationSectionElement | undefined",
            "line": 30
          }
        },
        "form": {
          "name": "form",
          "setSignature": {
            "name": "form",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 35,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 38
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 43,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 46
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 51,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 54
          }
        },
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 59,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "SbbButtonType",
            "line": 62
          }
        },
        "marker": {
          "name": "marker",
          "getSignature": {
            "name": "marker",
            "type": "",
            "returnType": "SbbNavigationMarkerElement | null",
            "line": 66
          }
        },
        "section": {
          "name": "section",
          "getSignature": {
            "name": "section",
            "type": "",
            "returnType": "SbbNavigationSectionElement | null",
            "line": 70
          }
        }
      }
    },
    {
      "name": "SbbNavigationDirective",
      "id": "directive-SbbNavigationDirective-242f9e6c2d8030e59f130f9ebb243206259d9e3f79556e613fa0e02618e636920a5f9b5fa26ccf809a4803958f084aad80e0f39750ea01223a96bb4041af4030",
      "file": "src/angular/navigation/navigation/navigation.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, Output, inject } from '@angular/core';\nimport type { SbbNavigationElement } from '@sbb-esta/lyne-elements/navigation/navigation.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/navigation/navigation.js';\n\n@Directive({\n  selector: 'sbb-navigation',\n  standalone: true,\n})\nexport class SbbNavigationDirective {\n  #element: ElementRef<SbbNavigationElement> = inject(ElementRef<SbbNavigationElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set trigger(value: string | HTMLElement | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.trigger = value));\n  }\n  public get trigger(): string | HTMLElement | null {\n    return this.#element.nativeElement.trigger;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'accessibility-close-label' })\n  public set accessibilityCloseLabel(value: string) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.accessibilityCloseLabel = value),\n    );\n  }\n  public get accessibilityCloseLabel(): string {\n    return this.#element.nativeElement.accessibilityCloseLabel;\n  }\n\n  @Output() public willOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  );\n\n  @Output() public didOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  );\n\n  @Output() public willClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  );\n\n  @Output() public didClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  );\n\n  public get activeNavigationSection(): HTMLElement | null {\n    return this.#element.nativeElement.activeNavigationSection;\n  }\n\n  public get isOpen(): boolean {\n    return this.#element.nativeElement.isOpen;\n  }\n\n  public open(): void {\n    return this.#element.nativeElement.open();\n  }\n\n  public close(): void {\n    return this.#element.nativeElement.close();\n  }\n}\n",
      "selector": "sbb-navigation",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-close-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "string",
          "decorators": []
        },
        {
          "name": "trigger",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "string | HTMLElement | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "didClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 49,
          "type": "Observable<void>"
        },
        {
          "name": "didOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 39,
          "type": "Observable<void>"
        },
        {
          "name": "willClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 44,
          "type": "Observable<void>"
        },
        {
          "name": "willOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 66,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        },
        {
          "name": "open",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 62,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": [],
      "accessors": {
        "trigger": {
          "name": "trigger",
          "setSignature": {
            "name": "trigger",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | HTMLElement | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | HTMLElement | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "trigger",
            "type": "",
            "returnType": "string | HTMLElement | null",
            "line": 19
          }
        },
        "accessibilityCloseLabel": {
          "name": "accessibilityCloseLabel",
          "setSignature": {
            "name": "accessibilityCloseLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityCloseLabel",
            "type": "string",
            "returnType": "string",
            "line": 30
          }
        },
        "activeNavigationSection": {
          "name": "activeNavigationSection",
          "getSignature": {
            "name": "activeNavigationSection",
            "type": "",
            "returnType": "HTMLElement | null",
            "line": 54
          }
        },
        "isOpen": {
          "name": "isOpen",
          "getSignature": {
            "name": "isOpen",
            "type": "boolean",
            "returnType": "boolean",
            "line": 58
          }
        }
      }
    },
    {
      "name": "SbbNavigationLinkDirective",
      "id": "directive-SbbNavigationLinkDirective-ac4d3653fe08196ba5d23478dced41f5ddcc46bd8763cfaa20b2bf861cd05f2e9f380bd2633900b52895e5f9daf96f6f94ee5120c6fc2000c93db247a8aa2beb",
      "file": "src/angular/navigation/navigation-link/navigation-link.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { LinkTargetType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport type { SbbNavigationLinkElement } from '@sbb-esta/lyne-elements/navigation/navigation-link.js';\nimport { SbbNavigationMarkerElement } from '@sbb-esta/lyne-elements/navigation/navigation-marker.js';\nimport { SbbNavigationSectionElement } from '@sbb-esta/lyne-elements/navigation/navigation-section.js';\nimport { SbbNavigationActionSize } from '@sbb-esta/lyne-elements/navigation.js';\nimport '@sbb-esta/lyne-elements/navigation/navigation-link.js';\n\n@Directive({\n  selector: 'sbb-navigation-link',\n  standalone: true,\n})\nexport class SbbNavigationLinkDirective {\n  #element: ElementRef<SbbNavigationLinkElement> = inject(ElementRef<SbbNavigationLinkElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: SbbNavigationActionSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbNavigationActionSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input()\n  public set connectedSection(value: SbbNavigationSectionElement | undefined) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.connectedSection = value));\n  }\n  public get connectedSection(): SbbNavigationSectionElement | undefined {\n    return this.#element.nativeElement.connectedSection;\n  }\n\n  @Input()\n  public set href(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.href = value));\n  }\n  public get href(): string {\n    return this.#element.nativeElement.href;\n  }\n\n  @Input()\n  public set target(value: LinkTargetType | string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.target = value));\n  }\n  public get target(): LinkTargetType | string {\n    return this.#element.nativeElement.target;\n  }\n\n  @Input()\n  public set rel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.rel = value));\n  }\n  public get rel(): string {\n    return this.#element.nativeElement.rel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set download(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.download = value));\n  }\n  public get download(): boolean {\n    return this.#element.nativeElement.download;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n\n  public get marker(): SbbNavigationMarkerElement | null {\n    return this.#element.nativeElement.marker;\n  }\n\n  public get section(): SbbNavigationSectionElement | null {\n    return this.#element.nativeElement.section;\n  }\n}\n",
      "selector": "sbb-navigation-link",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 69,
          "type": "string",
          "decorators": []
        },
        {
          "name": "connectedSection",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "SbbNavigationSectionElement | undefined",
          "decorators": []
        },
        {
          "required": false,
          "name": "download",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 60,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "href",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "string",
          "decorators": []
        },
        {
          "name": "rel",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 52,
          "type": "string",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "SbbNavigationActionSize",
          "decorators": []
        },
        {
          "name": "target",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 44,
          "type": "LinkTargetType | string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbNavigationActionSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 20,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbNavigationActionSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbNavigationActionSize",
            "line": 23
          }
        },
        "connectedSection": {
          "name": "connectedSection",
          "setSignature": {
            "name": "connectedSection",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbNavigationSectionElement | undefined",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 28,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbNavigationSectionElement | undefined",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "connectedSection",
            "type": "",
            "returnType": "SbbNavigationSectionElement | undefined",
            "line": 31
          }
        },
        "href": {
          "name": "href",
          "setSignature": {
            "name": "href",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 36,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "href",
            "type": "string",
            "returnType": "string",
            "line": 39
          }
        },
        "target": {
          "name": "target",
          "setSignature": {
            "name": "target",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 44,
            "jsdoctags": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "target",
            "type": "",
            "returnType": "LinkTargetType | string",
            "line": 47
          }
        },
        "rel": {
          "name": "rel",
          "setSignature": {
            "name": "rel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 52,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "rel",
            "type": "string",
            "returnType": "string",
            "line": 55
          }
        },
        "download": {
          "name": "download",
          "setSignature": {
            "name": "download",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 60,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "download",
            "type": "boolean",
            "returnType": "boolean",
            "line": 63
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 69,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 72
          }
        },
        "marker": {
          "name": "marker",
          "getSignature": {
            "name": "marker",
            "type": "",
            "returnType": "SbbNavigationMarkerElement | null",
            "line": 76
          }
        },
        "section": {
          "name": "section",
          "getSignature": {
            "name": "section",
            "type": "",
            "returnType": "SbbNavigationSectionElement | null",
            "line": 80
          }
        }
      }
    },
    {
      "name": "SbbNavigationListDirective",
      "id": "directive-SbbNavigationListDirective-4102f27b93bb16f67bfefebe44aa764464b8b1b34d0d5813784efa4b6d52845131bdc4d778504427534bfb5cc00fc3aaf26a6be0869792f31f010bb20deaf268",
      "file": "src/angular/navigation/navigation-list/navigation-list.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport type { SbbNavigationListElement } from '@sbb-esta/lyne-elements/navigation/navigation-list.js';\nimport '@sbb-esta/lyne-elements/navigation/navigation-list.js';\n\n@Directive({\n  selector: 'sbb-navigation-list',\n  standalone: true,\n})\nexport class SbbNavigationListDirective {\n  #element: ElementRef<SbbNavigationListElement> = inject(ElementRef<SbbNavigationListElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set label(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.label = value));\n  }\n  public get label(): string {\n    return this.#element.nativeElement.label;\n  }\n}\n",
      "selector": "sbb-navigation-list",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "name": "label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "label": {
          "name": "label",
          "setSignature": {
            "name": "label",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 15,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "label",
            "type": "string",
            "returnType": "string",
            "line": 18
          }
        }
      }
    },
    {
      "name": "SbbNavigationMarkerDirective",
      "id": "directive-SbbNavigationMarkerDirective-fe1d63d8331d0465a73afe22506090d2603496f91b707e0c0572d37b48e7868b39684b4cd7ac037c82bf4e2e6ccf98836f58fa3d6809ece2d2998f04676e16f0",
      "file": "src/angular/navigation/navigation-marker/navigation-marker.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { SbbNavigationButtonElement } from '@sbb-esta/lyne-elements/navigation/navigation-button.js';\nimport { SbbNavigationLinkElement } from '@sbb-esta/lyne-elements/navigation/navigation-link.js';\nimport type { SbbNavigationMarkerElement } from '@sbb-esta/lyne-elements/navigation/navigation-marker.js';\nimport '@sbb-esta/lyne-elements/navigation/navigation-marker.js';\n\n@Directive({\n  selector: 'sbb-navigation-marker',\n  standalone: true,\n})\nexport class SbbNavigationMarkerDirective {\n  #element: ElementRef<SbbNavigationMarkerElement> = inject(ElementRef<SbbNavigationMarkerElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: 'l' | 's') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): 'l' | 's' {\n    return this.#element.nativeElement.size;\n  }\n\n  public select(action: SbbNavigationButtonElement | SbbNavigationLinkElement): void {\n    return this.#element.nativeElement.select(action);\n  }\n\n  public reset(): void {\n    return this.#element.nativeElement.reset();\n  }\n}\n",
      "selector": "sbb-navigation-marker",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "\"l\" | \"s\"",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "reset",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 28,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        },
        {
          "name": "select",
          "args": [
            {
              "name": "action",
              "type": "SbbNavigationButtonElement | SbbNavigationLinkElement",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 24,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": "action",
              "type": "SbbNavigationButtonElement | SbbNavigationLinkElement",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"l\" | \"s\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"l\" | \"s\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "\"l\" | \"s\"",
            "line": 20
          }
        }
      }
    },
    {
      "name": "SbbNavigationSectionDirective",
      "id": "directive-SbbNavigationSectionDirective-7d0d1730fc620fef38d8eb7c6b33ad88a4631a833a8eb3a2a91155f0801a68a0023190f71161b0ff7cb8096408e1fb18578bbcdd147486b6c8cb8e08e790e3a6",
      "file": "src/angular/navigation/navigation-section/navigation-section.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport type { SbbNavigationSectionElement } from '@sbb-esta/lyne-elements/navigation/navigation-section.js';\nimport '@sbb-esta/lyne-elements/navigation/navigation-section.js';\n\n@Directive({\n  selector: 'sbb-navigation-section',\n  standalone: true,\n})\nexport class SbbNavigationSectionDirective {\n  #element: ElementRef<SbbNavigationSectionElement> = inject(\n    ElementRef<SbbNavigationSectionElement>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'title-content' })\n  public set titleContent(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleContent = value));\n  }\n  public get titleContent(): string {\n    return this.#element.nativeElement.titleContent;\n  }\n\n  @Input()\n  public set trigger(value: string | HTMLElement | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.trigger = value));\n  }\n  public get trigger(): string | HTMLElement | null {\n    return this.#element.nativeElement.trigger;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'accessibility-back-label' })\n  public set accessibilityBackLabel(value: string) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.accessibilityBackLabel = value),\n    );\n  }\n  public get accessibilityBackLabel(): string {\n    return this.#element.nativeElement.accessibilityBackLabel;\n  }\n\n  public open(): void {\n    return this.#element.nativeElement.open();\n  }\n\n  public close(): void {\n    return this.#element.nativeElement.close();\n  }\n}\n",
      "selector": "sbb-navigation-section",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-back-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 44,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "title-content",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "string",
          "decorators": []
        },
        {
          "name": "trigger",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "string | HTMLElement | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 57,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        },
        {
          "name": "open",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 53,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": [],
      "accessors": {
        "titleContent": {
          "name": "titleContent",
          "setSignature": {
            "name": "titleContent",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleContent",
            "type": "string",
            "returnType": "string",
            "line": 21
          }
        },
        "trigger": {
          "name": "trigger",
          "setSignature": {
            "name": "trigger",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | HTMLElement | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | HTMLElement | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "trigger",
            "type": "",
            "returnType": "string | HTMLElement | null",
            "line": 29
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 35,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 38
          }
        },
        "accessibilityBackLabel": {
          "name": "accessibilityBackLabel",
          "setSignature": {
            "name": "accessibilityBackLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 44,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityBackLabel",
            "type": "string",
            "returnType": "string",
            "line": 49
          }
        }
      }
    },
    {
      "name": "SbbNotificationDirective",
      "id": "directive-SbbNotificationDirective-8736f4cfc5e5de2f409941be43d3982026ae3cd16d1fb3518c25ce363bc87ef19918a9f94d3dc49e13006cb7fd7830059145bc305acc44c08889312a5f85f2c4",
      "file": "src/angular/notification/notification.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, Output, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbNotificationElement } from '@sbb-esta/lyne-elements/notification.js';\nimport { SbbTitleLevel } from '@sbb-esta/lyne-elements/title.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/notification.js';\n\n@Directive({\n  selector: 'sbb-notification',\n  standalone: true,\n})\nexport class SbbNotificationDirective {\n  #element: ElementRef<SbbNotificationElement> = inject(ElementRef<SbbNotificationElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set type(value: 'info' | 'success' | 'warn' | 'error') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): 'info' | 'success' | 'warn' | 'error' {\n    return this.#element.nativeElement.type;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'title-content' })\n  public set titleContent(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleContent = value));\n  }\n  public get titleContent(): string {\n    return this.#element.nativeElement.titleContent;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'title-level' })\n  public set titleLevel(value: SbbTitleLevel) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleLevel = value));\n  }\n  public get titleLevel(): SbbTitleLevel {\n    return this.#element.nativeElement.titleLevel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set readonly(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.readonly = value));\n  }\n  public get readonly(): boolean {\n    return this.#element.nativeElement.readonly;\n  }\n\n  @Input()\n  public set size(value: 'm' | 's') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): 'm' | 's' {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input()\n  public set animation(value: 'open' | 'close' | 'all' | 'none') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.animation = value));\n  }\n  public get animation(): 'open' | 'close' | 'all' | 'none' {\n    return this.#element.nativeElement.animation;\n  }\n\n  @Output() public willOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  );\n\n  @Output() public didOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  );\n\n  @Output() public willClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  );\n\n  @Output() public didClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  );\n\n  public close(): void {\n    return this.#element.nativeElement.close();\n  }\n}\n",
      "selector": "sbb-notification",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "name": "animation",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 60,
          "type": "\"open\" | \"close\" | \"all\" | \"none\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "readonly",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 44,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 52,
          "type": "\"m\" | \"s\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "title-content",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "title-level",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "SbbTitleLevel",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "\"info\" | \"success\" | \"warn\" | \"error\"",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "didClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 82,
          "type": "Observable<void>"
        },
        {
          "name": "didOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 72,
          "type": "Observable<void>"
        },
        {
          "name": "willClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 77,
          "type": "Observable<void>"
        },
        {
          "name": "willOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 67,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 87,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": [],
      "accessors": {
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"info\" | \"success\" | \"warn\" | \"error\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"info\" | \"success\" | \"warn\" | \"error\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "\"info\" | \"success\" | \"warn\" | \"error\"",
            "line": 21
          }
        },
        "titleContent": {
          "name": "titleContent",
          "setSignature": {
            "name": "titleContent",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 27,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleContent",
            "type": "string",
            "returnType": "string",
            "line": 30
          }
        },
        "titleLevel": {
          "name": "titleLevel",
          "setSignature": {
            "name": "titleLevel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 36,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleLevel",
            "type": "",
            "returnType": "SbbTitleLevel",
            "line": 39
          }
        },
        "readonly": {
          "name": "readonly",
          "setSignature": {
            "name": "readonly",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 44,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "readonly",
            "type": "boolean",
            "returnType": "boolean",
            "line": 47
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"m\" | \"s\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 52,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"m\" | \"s\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "\"m\" | \"s\"",
            "line": 55
          }
        },
        "animation": {
          "name": "animation",
          "setSignature": {
            "name": "animation",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"open\" | \"close\" | \"all\" | \"none\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 60,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"open\" | \"close\" | \"all\" | \"none\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "animation",
            "type": "",
            "returnType": "\"open\" | \"close\" | \"all\" | \"none\"",
            "line": 63
          }
        }
      }
    },
    {
      "name": "SbbOptGroupDirective",
      "id": "directive-SbbOptGroupDirective-94a60e683becd7d6756ea3c209075b73eec13e7d0efe2aff71bfa87c962ce8a7d0f3e498e8101f194f4c0b85dd3fb90cb67e1fa64e91257e6f79bf4cefc8673d",
      "file": "src/angular/option/optgroup/optgroup.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbOptGroupElement } from '@sbb-esta/lyne-elements/option/optgroup.js';\nimport '@sbb-esta/lyne-elements/option/optgroup.js';\n\n@Directive({\n  selector: 'sbb-opt-group',\n  standalone: true,\n})\nexport class SbbOptGroupDirective {\n  #element: ElementRef<SbbOptGroupElement> = inject(ElementRef<SbbOptGroupElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set label(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.label = value));\n  }\n  public get label(): string {\n    return this.#element.nativeElement.label;\n  }\n}\n",
      "selector": "sbb-opt-group",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 19
          }
        },
        "label": {
          "name": "label",
          "setSignature": {
            "name": "label",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 24,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "label",
            "type": "string",
            "returnType": "string",
            "line": 27
          }
        }
      }
    },
    {
      "name": "SbbOptionDirective",
      "id": "directive-SbbOptionDirective-82df437586bb5303b91fbb27d8bee4990cfa204be83c3e4ab69e6e8722e19df35b0385d258dbbdfb8161dbf58a149d12968ec4820a32e3ce4c4e1a8cce16b793",
      "file": "src/angular/option/option/option.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, Output, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbOptionElement } from '@sbb-esta/lyne-elements/option/option.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/option/option.js';\n\n@Directive({\n  selector: 'sbb-option',\n  standalone: true,\n})\nexport class SbbOptionDirective {\n  #element: ElementRef<SbbOptionElement> = inject(ElementRef<SbbOptionElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input()\n  public set value(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set selected(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.selected = value));\n  }\n  public get selected(): boolean {\n    return this.#element.nativeElement.selected;\n  }\n\n  @Output() public optionSelectionChange: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'optionSelectionChange',\n  );\n\n  @Output() public optionSelected: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'optionSelected',\n  );\n}\n",
      "selector": "sbb-option",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "selected",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 42,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "optionSelected",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'optionSelected',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 54,
          "type": "Observable<void>"
        },
        {
          "name": "optionSelectionChange",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'optionSelectionChange',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 49,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 20
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 29
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 34,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "string",
            "returnType": "string",
            "line": 37
          }
        },
        "selected": {
          "name": "selected",
          "setSignature": {
            "name": "selected",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 42,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "selected",
            "type": "boolean",
            "returnType": "boolean",
            "line": 45
          }
        }
      }
    },
    {
      "name": "SbbOverlayDirective",
      "id": "directive-SbbOverlayDirective-30f2579e759a6128ad612d497771cf473df708a6bf022331d18d0f7abb3b4df866ae6b5c4ade5c628eea1c5d80e1723c3816e893b8251ebc455deaf69c209293",
      "file": "src/angular/overlay/overlay.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, Output, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbOverlayCloseEventDetails } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport type { SbbOverlayElement } from '@sbb-esta/lyne-elements/overlay.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/overlay.js';\n\n@Directive({\n  selector: 'sbb-overlay',\n  standalone: true,\n})\nexport class SbbOverlayDirective {\n  #element: ElementRef<SbbOverlayElement> = inject(ElementRef<SbbOverlayElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set expanded(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.expanded = value));\n  }\n  public get expanded(): boolean {\n    return this.#element.nativeElement.expanded;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'back-button', transform: booleanAttribute })\n  public set backButton(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.backButton = value));\n  }\n  public get backButton(): boolean {\n    return this.#element.nativeElement.backButton;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'accessibility-close-label' })\n  public set accessibilityCloseLabel(value: string) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.accessibilityCloseLabel = value),\n    );\n  }\n  public get accessibilityCloseLabel(): string {\n    return this.#element.nativeElement.accessibilityCloseLabel;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'accessibility-back-label' })\n  public set accessibilityBackLabel(value: string) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.accessibilityBackLabel = value),\n    );\n  }\n  public get accessibilityBackLabel(): string {\n    return this.#element.nativeElement.accessibilityBackLabel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n\n  @Output() public willOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  );\n\n  @Output() public didOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  );\n\n  @Output() public willClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  );\n\n  @Output() public didClose: Observable<SbbOverlayCloseEventDetails> =\n    fromEvent<SbbOverlayCloseEventDetails>(this.#element.nativeElement, 'didClose');\n\n  @Output() public requestBackAction: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'requestBackAction',\n  );\n\n  public get isOpen(): boolean {\n    return this.#element.nativeElement.isOpen;\n  }\n\n  public open(): void {\n    return this.#element.nativeElement.open();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  public close(result: any, target: HTMLElement): any {\n    return this.#element.nativeElement.close(result, target);\n  }\n}\n",
      "selector": "sbb-overlay",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-back-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 47,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "accessibility-close-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 66,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "back-button",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "expanded",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 57,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "didClose",
          "defaultValue": "fromEvent<SbbOverlayCloseEventDetails>(this.#element.nativeElement, 'didClose')",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 88,
          "type": "Observable<SbbOverlayCloseEventDetails>"
        },
        {
          "name": "didOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 78,
          "type": "Observable<void>"
        },
        {
          "name": "requestBackAction",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'requestBackAction',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 91,
          "type": "Observable<void>"
        },
        {
          "name": "willClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 83,
          "type": "Observable<void>"
        },
        {
          "name": "willOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 73,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "close",
          "args": [
            {
              "name": "result",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": ""
            },
            {
              "name": "target",
              "type": "HTMLElement",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "any",
          "typeParameters": [],
          "line": 105,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": "result",
              "type": "any",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            },
            {
              "name": "target",
              "type": "HTMLElement",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "open",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 100,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": [],
      "accessors": {
        "expanded": {
          "name": "expanded",
          "setSignature": {
            "name": "expanded",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "expanded",
            "type": "boolean",
            "returnType": "boolean",
            "line": 21
          }
        },
        "backButton": {
          "name": "backButton",
          "setSignature": {
            "name": "backButton",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 27,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "backButton",
            "type": "boolean",
            "returnType": "boolean",
            "line": 30
          }
        },
        "accessibilityCloseLabel": {
          "name": "accessibilityCloseLabel",
          "setSignature": {
            "name": "accessibilityCloseLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 36,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityCloseLabel",
            "type": "string",
            "returnType": "string",
            "line": 41
          }
        },
        "accessibilityBackLabel": {
          "name": "accessibilityBackLabel",
          "setSignature": {
            "name": "accessibilityBackLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 47,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityBackLabel",
            "type": "string",
            "returnType": "string",
            "line": 52
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 57,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 60
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 66,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 69
          }
        },
        "isOpen": {
          "name": "isOpen",
          "getSignature": {
            "name": "isOpen",
            "type": "boolean",
            "returnType": "boolean",
            "line": 96
          }
        }
      }
    },
    {
      "name": "SbbPaginatorDirective",
      "id": "directive-SbbPaginatorDirective-75fff29d83000dede11c39e94641e1d4524742c8a98da78c47890e330d35cb29ff580fa6cb83d202f4c9bd633f428002be5f49b3ae55b1bd4da414bf009fe599",
      "file": "src/angular/paginator/paginator/paginator.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {\n  Directive,\n  ElementRef,\n  Input,\n  NgZone,\n  Output,\n  inject,\n  numberAttribute,\n} from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbPaginatorPageEventDetails } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport type { SbbPaginatorElement } from '@sbb-esta/lyne-elements/paginator/paginator.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/paginator/paginator.js';\n\n@Directive({\n  selector: 'sbb-paginator',\n  standalone: true,\n})\nexport class SbbPaginatorDirective {\n  #element: ElementRef<SbbPaginatorElement> = inject(ElementRef<SbbPaginatorElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'page-size-options' })\n  public set pageSizeOptions(value: number[]) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.pageSizeOptions = value));\n  }\n  public get pageSizeOptions(): number[] {\n    return this.#element.nativeElement.pageSizeOptions;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'pager-position' })\n  public set pagerPosition(value: 'start' | 'end') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.pagerPosition = value));\n  }\n  public get pagerPosition(): 'start' | 'end' {\n    return this.#element.nativeElement.pagerPosition;\n  }\n\n  @Input({ transform: numberAttribute })\n  public set length(value: number) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.length = value));\n  }\n  public get length(): number {\n    return this.#element.nativeElement.length;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'page-size', transform: numberAttribute })\n  public set pageSize(value: number) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.pageSize = value));\n  }\n  public get pageSize(): number {\n    return this.#element.nativeElement.pageSize;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'page-index', transform: numberAttribute })\n  public set pageIndex(value: number) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.pageIndex = value));\n  }\n  public get pageIndex(): number {\n    return this.#element.nativeElement.pageIndex;\n  }\n\n  @Input()\n  public set size(value: 'm' | 's') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): 'm' | 's' {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Output() public page: Observable<SbbPaginatorPageEventDetails> =\n    fromEvent<SbbPaginatorPageEventDetails>(this.#element.nativeElement, 'page');\n}\n",
      "selector": "sbb-paginator",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 86,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "length",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 44,
          "type": "number",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 78,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "page-index",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 62,
          "type": "number",
          "decorators": []
        },
        {
          "required": false,
          "name": "page-size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 53,
          "type": "number",
          "decorators": []
        },
        {
          "required": false,
          "name": "page-size-options",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "number[]",
          "decorators": []
        },
        {
          "required": false,
          "name": "pager-position",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "\"start\" | \"end\"",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 70,
          "type": "\"m\" | \"s\"",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "page",
          "defaultValue": "fromEvent<SbbPaginatorPageEventDetails>(this.#element.nativeElement, 'page')",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 93,
          "type": "Observable<SbbPaginatorPageEventDetails>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "pageSizeOptions": {
          "name": "pageSizeOptions",
          "setSignature": {
            "name": "pageSizeOptions",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "number[]",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 27,
            "jsdoctags": [
              {
                "name": "value",
                "type": "number[]",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "pageSizeOptions",
            "type": "[]",
            "returnType": "number[]",
            "line": 30
          }
        },
        "pagerPosition": {
          "name": "pagerPosition",
          "setSignature": {
            "name": "pagerPosition",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"start\" | \"end\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 36,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"start\" | \"end\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "pagerPosition",
            "type": "",
            "returnType": "\"start\" | \"end\"",
            "line": 39
          }
        },
        "length": {
          "name": "length",
          "setSignature": {
            "name": "length",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 44,
            "jsdoctags": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "length",
            "type": "number",
            "returnType": "number",
            "line": 47
          }
        },
        "pageSize": {
          "name": "pageSize",
          "setSignature": {
            "name": "pageSize",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 53,
            "jsdoctags": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "pageSize",
            "type": "number",
            "returnType": "number",
            "line": 56
          }
        },
        "pageIndex": {
          "name": "pageIndex",
          "setSignature": {
            "name": "pageIndex",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 62,
            "jsdoctags": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "pageIndex",
            "type": "number",
            "returnType": "number",
            "line": 65
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"m\" | \"s\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 70,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"m\" | \"s\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "\"m\" | \"s\"",
            "line": 73
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 78,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 81
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 86,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 89
          }
        }
      }
    },
    {
      "name": "SbbPopoverDirective",
      "id": "directive-SbbPopoverDirective-0dac9a726cea2b4c97bfb7a422f9a380855705f718f411485fa38a9839feea35a34ff25dbdfe49e6af01211271daccfe3bff4c09e7dc40ef7593f2d82ab1e053",
      "file": "src/angular/popover/popover/popover.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {\n  Directive,\n  ElementRef,\n  Input,\n  NgZone,\n  Output,\n  inject,\n  numberAttribute,\n} from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbPopoverElement } from '@sbb-esta/lyne-elements/popover/popover.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/popover/popover.js';\n\n@Directive({\n  selector: 'sbb-popover',\n  standalone: true,\n})\nexport class SbbPopoverDirective {\n  #element: ElementRef<SbbPopoverElement> = inject(ElementRef<SbbPopoverElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set trigger(value: string | HTMLElement | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.trigger = value));\n  }\n  public get trigger(): string | HTMLElement | null {\n    return this.#element.nativeElement.trigger;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'hide-close-button', transform: booleanAttribute })\n  public set hideCloseButton(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.hideCloseButton = value));\n  }\n  public get hideCloseButton(): boolean {\n    return this.#element.nativeElement.hideCloseButton;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'hover-trigger', transform: booleanAttribute })\n  public set hoverTrigger(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.hoverTrigger = value));\n  }\n  public get hoverTrigger(): boolean {\n    return this.#element.nativeElement.hoverTrigger;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'open-delay', transform: numberAttribute })\n  public set openDelay(value: number) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.openDelay = value));\n  }\n  public get openDelay(): number {\n    return this.#element.nativeElement.openDelay;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'close-delay', transform: numberAttribute })\n  public set closeDelay(value: number) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.closeDelay = value));\n  }\n  public get closeDelay(): number {\n    return this.#element.nativeElement.closeDelay;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'accessibility-close-label' })\n  public set accessibilityCloseLabel(value: string) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.accessibilityCloseLabel = value),\n    );\n  }\n  public get accessibilityCloseLabel(): string {\n    return this.#element.nativeElement.accessibilityCloseLabel;\n  }\n\n  @Output() public willOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  );\n\n  @Output() public didOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  );\n\n  @Output() public willClose: Observable<{ closeTarget: HTMLElement }> = fromEvent<{\n    closeTarget: HTMLElement;\n  }>(this.#element.nativeElement, 'willClose');\n\n  @Output() public didClose: Observable<{ closeTarget: HTMLElement }> = fromEvent<{\n    closeTarget: HTMLElement;\n  }>(this.#element.nativeElement, 'didClose');\n\n  public get isOpen(): boolean {\n    return this.#element.nativeElement.isOpen;\n  }\n\n  public open(): void {\n    return this.#element.nativeElement.open();\n  }\n\n  public close(target: HTMLElement): void {\n    return this.#element.nativeElement.close(target);\n  }\n}\n",
      "selector": "sbb-popover",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-close-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 70,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "close-delay",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 61,
          "type": "number",
          "decorators": []
        },
        {
          "required": false,
          "name": "hide-close-button",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "hover-trigger",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "open-delay",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 52,
          "type": "number",
          "decorators": []
        },
        {
          "name": "trigger",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "string | HTMLElement | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "didClose",
          "defaultValue": "fromEvent<{\n    closeTarget: HTMLElement;\n  }>(this.#element.nativeElement, 'didClose')",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 93,
          "type": "Observable<literal type>"
        },
        {
          "name": "didOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 84,
          "type": "Observable<void>"
        },
        {
          "name": "willClose",
          "defaultValue": "fromEvent<{\n    closeTarget: HTMLElement;\n  }>(this.#element.nativeElement, 'willClose')",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 89,
          "type": "Observable<literal type>"
        },
        {
          "name": "willOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 79,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "close",
          "args": [
            {
              "name": "target",
              "type": "HTMLElement",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 105,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": "target",
              "type": "HTMLElement",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "open",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 101,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": [],
      "accessors": {
        "trigger": {
          "name": "trigger",
          "setSignature": {
            "name": "trigger",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | HTMLElement | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | HTMLElement | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "trigger",
            "type": "",
            "returnType": "string | HTMLElement | null",
            "line": 28
          }
        },
        "hideCloseButton": {
          "name": "hideCloseButton",
          "setSignature": {
            "name": "hideCloseButton",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 34,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "hideCloseButton",
            "type": "boolean",
            "returnType": "boolean",
            "line": 37
          }
        },
        "hoverTrigger": {
          "name": "hoverTrigger",
          "setSignature": {
            "name": "hoverTrigger",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 43,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "hoverTrigger",
            "type": "boolean",
            "returnType": "boolean",
            "line": 46
          }
        },
        "openDelay": {
          "name": "openDelay",
          "setSignature": {
            "name": "openDelay",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 52,
            "jsdoctags": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "openDelay",
            "type": "number",
            "returnType": "number",
            "line": 55
          }
        },
        "closeDelay": {
          "name": "closeDelay",
          "setSignature": {
            "name": "closeDelay",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 61,
            "jsdoctags": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "closeDelay",
            "type": "number",
            "returnType": "number",
            "line": 64
          }
        },
        "accessibilityCloseLabel": {
          "name": "accessibilityCloseLabel",
          "setSignature": {
            "name": "accessibilityCloseLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 70,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityCloseLabel",
            "type": "string",
            "returnType": "string",
            "line": 75
          }
        },
        "isOpen": {
          "name": "isOpen",
          "getSignature": {
            "name": "isOpen",
            "type": "boolean",
            "returnType": "boolean",
            "line": 97
          }
        }
      }
    },
    {
      "name": "SbbPopoverTriggerDirective",
      "id": "directive-SbbPopoverTriggerDirective-882512df91c3c63d21e61e1af577dbb1b7c85a829d2a48bde15909aba58573474ce22a0f3980a491298dcc72bc134eb92d3d9128e4d702683f15b64104a57491",
      "file": "src/angular/popover/popover-trigger/popover-trigger.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbButtonType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport type { SbbPopoverTriggerElement } from '@sbb-esta/lyne-elements/popover/popover-trigger.js';\nimport '@sbb-esta/lyne-elements/popover/popover-trigger.js';\n\n@Directive({\n  selector: 'sbb-popover-trigger',\n  standalone: true,\n})\nexport class SbbPopoverTriggerDirective {\n  #element: ElementRef<SbbPopoverTriggerElement> = inject(ElementRef<SbbPopoverTriggerElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'disabled-interactive', transform: booleanAttribute })\n  public set disabledInteractive(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabledInteractive = value));\n  }\n  public get disabledInteractive(): boolean {\n    return this.#element.nativeElement.disabledInteractive;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input()\n  public set form(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.form = value));\n  }\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set type(value: SbbButtonType) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): SbbButtonType {\n    return this.#element.nativeElement.type;\n  }\n}\n",
      "selector": "sbb-popover-trigger",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled-interactive",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "form",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 51,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 59,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 75,
          "type": "SbbButtonType",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 67,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "disabledInteractive": {
          "name": "disabledInteractive",
          "setSignature": {
            "name": "disabledInteractive",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabledInteractive",
            "type": "boolean",
            "returnType": "boolean",
            "line": 21
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 29
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 34,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 37
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 43,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 46
          }
        },
        "form": {
          "name": "form",
          "setSignature": {
            "name": "form",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 51,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 54
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 59,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 62
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 67,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 70
          }
        },
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 75,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "SbbButtonType",
            "line": 78
          }
        }
      }
    },
    {
      "name": "SbbRadioButtonDirective",
      "id": "directive-SbbRadioButtonDirective-b4d81de2c8d4bbddaee90994b4057036b6dcd28cb327301d2fb2ca26faf578f2e3784416dafc78d39046b9c10a5862808ab3ea8e5b6d2f8b417022fd3ed7e333",
      "file": "src/angular/radio-button/radio-button/radio-button.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, Output, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbRadioButtonGroupElement } from '@sbb-esta/lyne-elements/radio-button/radio-button-group.js';\nimport type { SbbRadioButtonElement } from '@sbb-esta/lyne-elements/radio-button/radio-button.js';\nimport { SbbRadioButtonSize } from '@sbb-esta/lyne-elements/radio-button.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/radio-button/radio-button.js';\n\n@Directive({\n  selector: 'sbb-radio-button',\n  standalone: true,\n})\nexport class SbbRadioButtonDirective {\n  #element: ElementRef<SbbRadioButtonElement> = inject(ElementRef<SbbRadioButtonElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: SbbRadioButtonSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbRadioButtonSize {\n    return this.#element.nativeElement.size;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'allow-empty-selection', transform: booleanAttribute })\n  public set allowEmptySelection(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.allowEmptySelection = value));\n  }\n  public get allowEmptySelection(): boolean {\n    return this.#element.nativeElement.allowEmptySelection;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set checked(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.checked = value));\n  }\n  public get checked(): boolean {\n    return this.#element.nativeElement.checked;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set required(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.required = value));\n  }\n  public get required(): boolean {\n    return this.#element.nativeElement.required;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public change: Observable<Event> = fromEvent<Event>(\n    this.#element.nativeElement,\n    'change',\n  );\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public input: Observable<InputEvent> = fromEvent<InputEvent>(\n    this.#element.nativeElement,\n    'input',\n  );\n\n  public get group(): SbbRadioButtonGroupElement | null {\n    return this.#element.nativeElement.group;\n  }\n\n  public get type(): string {\n    return this.#element.nativeElement.type;\n  }\n\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  public select(): void {\n    return this.#element.nativeElement.select();\n  }\n}\n",
      "selector": "sbb-radio-button",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "allow-empty-selection",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "checked",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 44,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 60,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "required",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 52,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "SbbRadioButtonSize",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 68,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "change",
          "defaultValue": "fromEvent<Event>(\n    this.#element.nativeElement,\n    'change',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 76,
          "type": "Observable<Event>"
        },
        {
          "name": "input",
          "defaultValue": "fromEvent<InputEvent>(\n    this.#element.nativeElement,\n    'input',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 82,
          "type": "Observable<InputEvent>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "select",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 99,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbRadioButtonSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 19,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbRadioButtonSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbRadioButtonSize",
            "line": 22
          }
        },
        "allowEmptySelection": {
          "name": "allowEmptySelection",
          "setSignature": {
            "name": "allowEmptySelection",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 28,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "allowEmptySelection",
            "type": "boolean",
            "returnType": "boolean",
            "line": 31
          }
        },
        "checked": {
          "name": "checked",
          "setSignature": {
            "name": "checked",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 36,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "checked",
            "type": "boolean",
            "returnType": "boolean",
            "line": 39
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 44,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 47
          }
        },
        "required": {
          "name": "required",
          "setSignature": {
            "name": "required",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 52,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "required",
            "type": "boolean",
            "returnType": "boolean",
            "line": 55
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 60,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 63
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 68,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 71
          }
        },
        "group": {
          "name": "group",
          "getSignature": {
            "name": "group",
            "type": "",
            "returnType": "SbbRadioButtonGroupElement | null",
            "line": 87
          }
        },
        "type": {
          "name": "type",
          "getSignature": {
            "name": "type",
            "type": "string",
            "returnType": "string",
            "line": 91
          }
        },
        "form": {
          "name": "form",
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 95
          }
        }
      }
    },
    {
      "name": "SbbRadioButtonGroupDirective",
      "id": "directive-SbbRadioButtonGroupDirective-fc34a2f2d5f1937437dc01abfa5f0baafbe58ee99e0bf3d8654a8c769f5a1871d9d9c42e3f716157eba3daf580fbd627ca405486256923da590e351292f9ff98",
      "file": "src/angular/radio-button/radio-button-group/radio-button-group.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, Output, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbHorizontalFrom, SbbOrientation } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport type { SbbRadioButtonGroupElement } from '@sbb-esta/lyne-elements/radio-button/radio-button-group.js';\nimport { SbbRadioButtonPanelElement } from '@sbb-esta/lyne-elements/radio-button/radio-button-panel.js';\nimport { SbbRadioButtonElement } from '@sbb-esta/lyne-elements/radio-button/radio-button.js';\nimport { SbbRadioButtonSize } from '@sbb-esta/lyne-elements/radio-button.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/radio-button/radio-button-group.js';\n\n@Directive({\n  selector: 'sbb-radio-button-group',\n  standalone: true,\n})\nexport class SbbRadioButtonGroupDirective {\n  #element: ElementRef<SbbRadioButtonGroupElement> = inject(ElementRef<SbbRadioButtonGroupElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'allow-empty-selection', transform: booleanAttribute })\n  public set allowEmptySelection(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.allowEmptySelection = value));\n  }\n  public get allowEmptySelection(): boolean {\n    return this.#element.nativeElement.allowEmptySelection;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set required(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.required = value));\n  }\n  public get required(): boolean {\n    return this.#element.nativeElement.required;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set size(value: SbbRadioButtonSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbRadioButtonSize {\n    return this.#element.nativeElement.size;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'horizontal-from' })\n  public set horizontalFrom(value: SbbHorizontalFrom | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.horizontalFrom = value));\n  }\n  public get horizontalFrom(): SbbHorizontalFrom | null {\n    return this.#element.nativeElement.horizontalFrom;\n  }\n\n  @Input()\n  public set orientation(value: SbbOrientation) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.orientation = value));\n  }\n  public get orientation(): SbbOrientation {\n    return this.#element.nativeElement.orientation;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Output() public didChange: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didChange',\n  );\n\n  public get radioButtons(): (SbbRadioButtonElement | SbbRadioButtonPanelElement)[] {\n    return this.#element.nativeElement.radioButtons;\n  }\n}\n",
      "selector": "sbb-radio-button-group",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "allow-empty-selection",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 22,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 79,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "horizontal-from",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 55,
          "type": "SbbHorizontalFrom | null",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 71,
          "type": "string",
          "decorators": []
        },
        {
          "name": "orientation",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 63,
          "type": "SbbOrientation",
          "decorators": []
        },
        {
          "required": false,
          "name": "required",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 30,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 46,
          "type": "SbbRadioButtonSize",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 38,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "didChange",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didChange',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 86,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "allowEmptySelection": {
          "name": "allowEmptySelection",
          "setSignature": {
            "name": "allowEmptySelection",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 22,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "allowEmptySelection",
            "type": "boolean",
            "returnType": "boolean",
            "line": 25
          }
        },
        "required": {
          "name": "required",
          "setSignature": {
            "name": "required",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 30,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "required",
            "type": "boolean",
            "returnType": "boolean",
            "line": 33
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 38,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 41
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbRadioButtonSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 46,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbRadioButtonSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbRadioButtonSize",
            "line": 49
          }
        },
        "horizontalFrom": {
          "name": "horizontalFrom",
          "setSignature": {
            "name": "horizontalFrom",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbHorizontalFrom | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 55,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbHorizontalFrom | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "horizontalFrom",
            "type": "",
            "returnType": "SbbHorizontalFrom | null",
            "line": 58
          }
        },
        "orientation": {
          "name": "orientation",
          "setSignature": {
            "name": "orientation",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbOrientation",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 63,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbOrientation",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "orientation",
            "type": "",
            "returnType": "SbbOrientation",
            "line": 66
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 71,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 74
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 79,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 82
          }
        },
        "radioButtons": {
          "name": "radioButtons",
          "getSignature": {
            "name": "radioButtons",
            "type": "[]",
            "returnType": "[]",
            "line": 91
          }
        }
      }
    },
    {
      "name": "SbbRadioButtonPanelDirective",
      "id": "directive-SbbRadioButtonPanelDirective-aeae57e5a43e84d3890d484f333a80d6f0efab77ea084ab84fb1ab1b26586e7be22b76e57551b4b50f8c9ab24ffa9ee1babb245083aa29578759f08775846d37",
      "file": "src/angular/radio-button/radio-button-panel/radio-button-panel.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, Output, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbPanelSize } from '@sbb-esta/lyne-elements/core/mixins.js';\nimport { SbbRadioButtonGroupElement } from '@sbb-esta/lyne-elements/radio-button/radio-button-group.js';\nimport type { SbbRadioButtonPanelElement } from '@sbb-esta/lyne-elements/radio-button/radio-button-panel.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/radio-button/radio-button-panel.js';\n\n@Directive({\n  selector: 'sbb-radio-button-panel',\n  standalone: true,\n})\nexport class SbbRadioButtonPanelDirective {\n  #element: ElementRef<SbbRadioButtonPanelElement> = inject(ElementRef<SbbRadioButtonPanelElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: SbbPanelSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbPanelSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input()\n  public set color(value: 'white' | 'milk') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.color = value));\n  }\n  public get color(): 'white' | 'milk' {\n    return this.#element.nativeElement.color;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set borderless(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.borderless = value));\n  }\n  public get borderless(): boolean {\n    return this.#element.nativeElement.borderless;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'allow-empty-selection', transform: booleanAttribute })\n  public set allowEmptySelection(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.allowEmptySelection = value));\n  }\n  public get allowEmptySelection(): boolean {\n    return this.#element.nativeElement.allowEmptySelection;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set checked(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.checked = value));\n  }\n  public get checked(): boolean {\n    return this.#element.nativeElement.checked;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set required(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.required = value));\n  }\n  public get required(): boolean {\n    return this.#element.nativeElement.required;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public change: Observable<Event> = fromEvent<Event>(\n    this.#element.nativeElement,\n    'change',\n  );\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public input: Observable<InputEvent> = fromEvent<InputEvent>(\n    this.#element.nativeElement,\n    'input',\n  );\n\n  public get group(): SbbRadioButtonGroupElement | null {\n    return this.#element.nativeElement.group;\n  }\n\n  public get type(): string {\n    return this.#element.nativeElement.type;\n  }\n\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  public select(): void {\n    return this.#element.nativeElement.select();\n  }\n}\n",
      "selector": "sbb-radio-button-panel",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "allow-empty-selection",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 44,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "borderless",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "checked",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 52,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "color",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "\"white\" | \"milk\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 60,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 76,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "required",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 68,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "SbbPanelSize",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 84,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "change",
          "defaultValue": "fromEvent<Event>(\n    this.#element.nativeElement,\n    'change',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 92,
          "type": "Observable<Event>"
        },
        {
          "name": "input",
          "defaultValue": "fromEvent<InputEvent>(\n    this.#element.nativeElement,\n    'input',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 98,
          "type": "Observable<InputEvent>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "select",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 115,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbPanelSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 19,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbPanelSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbPanelSize",
            "line": 22
          }
        },
        "color": {
          "name": "color",
          "setSignature": {
            "name": "color",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"white\" | \"milk\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 27,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"white\" | \"milk\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "color",
            "type": "",
            "returnType": "\"white\" | \"milk\"",
            "line": 30
          }
        },
        "borderless": {
          "name": "borderless",
          "setSignature": {
            "name": "borderless",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 35,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "borderless",
            "type": "boolean",
            "returnType": "boolean",
            "line": 38
          }
        },
        "allowEmptySelection": {
          "name": "allowEmptySelection",
          "setSignature": {
            "name": "allowEmptySelection",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 44,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "allowEmptySelection",
            "type": "boolean",
            "returnType": "boolean",
            "line": 47
          }
        },
        "checked": {
          "name": "checked",
          "setSignature": {
            "name": "checked",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 52,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "checked",
            "type": "boolean",
            "returnType": "boolean",
            "line": 55
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 60,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 63
          }
        },
        "required": {
          "name": "required",
          "setSignature": {
            "name": "required",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 68,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "required",
            "type": "boolean",
            "returnType": "boolean",
            "line": 71
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 76,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 79
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 84,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 87
          }
        },
        "group": {
          "name": "group",
          "getSignature": {
            "name": "group",
            "type": "",
            "returnType": "SbbRadioButtonGroupElement | null",
            "line": 103
          }
        },
        "type": {
          "name": "type",
          "getSignature": {
            "name": "type",
            "type": "string",
            "returnType": "string",
            "line": 107
          }
        },
        "form": {
          "name": "form",
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 111
          }
        }
      }
    },
    {
      "name": "SbbScreenReaderOnlyDirective",
      "id": "directive-SbbScreenReaderOnlyDirective-d813d8dc206d5babe831ecef942f3f89793a951e88006fb88b0be61c1fd01d68073e9ebfe3537763c64fb90cb41a6eef5649178a7411cc595dd79ae4398907fb",
      "file": "src/angular/screen-reader-only/screen-reader-only.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive } from '@angular/core';\nimport '@sbb-esta/lyne-elements/screen-reader-only.js';\n\n@Directive({\n  selector: 'sbb-screen-reader-only',\n  standalone: true,\n})\nexport class SbbScreenReaderOnlyDirective {}\n",
      "selector": "sbb-screen-reader-only",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": []
    },
    {
      "name": "SbbSecondaryButtonDirective",
      "id": "directive-SbbSecondaryButtonDirective-b5f468226c4661a1297c61a3ce865a4129ffaaee99f62e9ca43ace0b7af3fc3d7895c1dd35c1779fb361e1db2b86cd7666dc837e5f8da3e5fc837034bb3ba5bd",
      "file": "src/angular/button/secondary-button/secondary-button.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbSecondaryButtonElement } from '@sbb-esta/lyne-elements/button/secondary-button.js';\nimport '@sbb-esta/lyne-elements/button/secondary-button.js';\nimport { SbbButtonSize } from '@sbb-esta/lyne-elements/button.js';\nimport { SbbButtonType } from '@sbb-esta/lyne-elements/core/base-elements.js';\n\n@Directive({\n  selector: 'sbb-secondary-button',\n  standalone: true,\n})\nexport class SbbSecondaryButtonDirective {\n  #element: ElementRef<SbbSecondaryButtonElement> = inject(ElementRef<SbbSecondaryButtonElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: SbbButtonSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbButtonSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'disabled-interactive', transform: booleanAttribute })\n  public set disabledInteractive(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabledInteractive = value));\n  }\n  public get disabledInteractive(): boolean {\n    return this.#element.nativeElement.disabledInteractive;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set form(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.form = value));\n  }\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set type(value: SbbButtonType) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): SbbButtonType {\n    return this.#element.nativeElement.type;\n  }\n}\n",
      "selector": "sbb-secondary-button",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 52,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled-interactive",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 44,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "form",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 60,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 68,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "SbbButtonSize",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 84,
          "type": "SbbButtonType",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 76,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbButtonSize",
            "line": 21
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 29
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 35,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 38
          }
        },
        "disabledInteractive": {
          "name": "disabledInteractive",
          "setSignature": {
            "name": "disabledInteractive",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 44,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabledInteractive",
            "type": "boolean",
            "returnType": "boolean",
            "line": 47
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 52,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 55
          }
        },
        "form": {
          "name": "form",
          "setSignature": {
            "name": "form",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 60,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 63
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 68,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 71
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 76,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 79
          }
        },
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 84,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "SbbButtonType",
            "line": 87
          }
        }
      }
    },
    {
      "name": "SbbSecondaryButtonLinkDirective",
      "id": "directive-SbbSecondaryButtonLinkDirective-37b65b6ebce9f1ea52b1e9818b345105f86a947a6f4802101426f2534d1c14af6131c401fb711b6b41ae72045617215c9e486d3ffc14514a780bbc0a02ea4c3f",
      "file": "src/angular/button/secondary-button-link/secondary-button-link.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbSecondaryButtonLinkElement } from '@sbb-esta/lyne-elements/button/secondary-button-link.js';\nimport '@sbb-esta/lyne-elements/button/secondary-button-link.js';\nimport { SbbButtonSize } from '@sbb-esta/lyne-elements/button.js';\nimport { LinkTargetType } from '@sbb-esta/lyne-elements/core/base-elements.js';\n\n@Directive({\n  selector: 'sbb-secondary-button-link',\n  standalone: true,\n})\nexport class SbbSecondaryButtonLinkDirective {\n  #element: ElementRef<SbbSecondaryButtonLinkElement> = inject(\n    ElementRef<SbbSecondaryButtonLinkElement>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: SbbButtonSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbButtonSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'disabled-interactive', transform: booleanAttribute })\n  public set disabledInteractive(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabledInteractive = value));\n  }\n  public get disabledInteractive(): boolean {\n    return this.#element.nativeElement.disabledInteractive;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set href(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.href = value));\n  }\n  public get href(): string {\n    return this.#element.nativeElement.href;\n  }\n\n  @Input()\n  public set target(value: LinkTargetType | string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.target = value));\n  }\n  public get target(): LinkTargetType | string {\n    return this.#element.nativeElement.target;\n  }\n\n  @Input()\n  public set rel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.rel = value));\n  }\n  public get rel(): string {\n    return this.#element.nativeElement.rel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set download(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.download = value));\n  }\n  public get download(): boolean {\n    return this.#element.nativeElement.download;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n}\n",
      "selector": "sbb-secondary-button-link",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 95,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 54,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled-interactive",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 46,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "download",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 86,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "href",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 62,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 37,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "rel",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 78,
          "type": "string",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "SbbButtonSize",
          "decorators": []
        },
        {
          "name": "target",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 70,
          "type": "LinkTargetType | string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 20,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbButtonSize",
            "line": 23
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 28,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 31
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 37,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 40
          }
        },
        "disabledInteractive": {
          "name": "disabledInteractive",
          "setSignature": {
            "name": "disabledInteractive",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 46,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabledInteractive",
            "type": "boolean",
            "returnType": "boolean",
            "line": 49
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 54,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 57
          }
        },
        "href": {
          "name": "href",
          "setSignature": {
            "name": "href",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 62,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "href",
            "type": "string",
            "returnType": "string",
            "line": 65
          }
        },
        "target": {
          "name": "target",
          "setSignature": {
            "name": "target",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 70,
            "jsdoctags": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "target",
            "type": "",
            "returnType": "LinkTargetType | string",
            "line": 73
          }
        },
        "rel": {
          "name": "rel",
          "setSignature": {
            "name": "rel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 78,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "rel",
            "type": "string",
            "returnType": "string",
            "line": 81
          }
        },
        "download": {
          "name": "download",
          "setSignature": {
            "name": "download",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 86,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "download",
            "type": "boolean",
            "returnType": "boolean",
            "line": 89
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 95,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 98
          }
        }
      }
    },
    {
      "name": "SbbSecondaryButtonStaticDirective",
      "id": "directive-SbbSecondaryButtonStaticDirective-37fd8836fea6b4cc6e550762d34e5c9ee2ed5e4a0c6c807eda2da6d361a3889e91c564961fe48507c0f2f5d76353abfff413d55bda557deafc36629138130060",
      "file": "src/angular/button/secondary-button-static/secondary-button-static.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbSecondaryButtonStaticElement } from '@sbb-esta/lyne-elements/button/secondary-button-static.js';\nimport '@sbb-esta/lyne-elements/button/secondary-button-static.js';\nimport { SbbButtonSize } from '@sbb-esta/lyne-elements/button.js';\n\n@Directive({\n  selector: 'sbb-secondary-button-static',\n  standalone: true,\n})\nexport class SbbSecondaryButtonStaticDirective {\n  #element: ElementRef<SbbSecondaryButtonStaticElement> = inject(\n    ElementRef<SbbSecondaryButtonStaticElement>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: SbbButtonSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbButtonSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n}\n",
      "selector": "sbb-secondary-button-static",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 44,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "SbbButtonSize",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 19,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbButtonSize",
            "line": 22
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 27,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 30
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 36,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 39
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 44,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 47
          }
        }
      }
    },
    {
      "name": "SbbSelectDirective",
      "id": "directive-SbbSelectDirective-97b3fc4ad80b2f644085519e2e900fdda8de38368fa3c5ffb820f223d938e9c4f9685626eb9697d0ff2183c112bc6e0155e613f073dd2c6cea1046bc59749ef0",
      "file": "src/angular/select/select.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, Output, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbSelectElement } from '@sbb-esta/lyne-elements/select.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/select.js';\n\n@Directive({\n  selector: 'sbb-select',\n  standalone: true,\n})\nexport class SbbSelectDirective {\n  #element: ElementRef<SbbSelectElement> = inject(ElementRef<SbbSelectElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set placeholder(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.placeholder = value));\n  }\n  public get placeholder(): string {\n    return this.#element.nativeElement.placeholder;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set multiple(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.multiple = value));\n  }\n  public get multiple(): boolean {\n    return this.#element.nativeElement.multiple;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set readonly(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.readonly = value));\n  }\n  public get readonly(): boolean {\n    return this.#element.nativeElement.readonly;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set required(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.required = value));\n  }\n  public get required(): boolean {\n    return this.#element.nativeElement.required;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | string[] | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | string[] | null {\n    return this.#element.nativeElement.value;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public change: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'change',\n  );\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public input: Observable<void> = fromEvent<void>(this.#element.nativeElement, 'input');\n\n  @Output() public willOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  );\n\n  @Output() public didOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  );\n\n  @Output() public willClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  );\n\n  @Output() public didClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  );\n\n  public get type(): string {\n    return this.#element.nativeElement.type;\n  }\n\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  public get isOpen(): boolean {\n    return this.#element.nativeElement.isOpen;\n  }\n\n  public open(): void {\n    return this.#element.nativeElement.open();\n  }\n\n  public close(): void {\n    return this.#element.nativeElement.close();\n  }\n\n  public getDisplayValue(): string {\n    return this.#element.nativeElement.getDisplayValue();\n  }\n}\n",
      "selector": "sbb-select",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 41,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "multiple",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 65,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 49,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "placeholder",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "readonly",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "required",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 57,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 73,
          "type": "string | [] | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "change",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'change',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 81,
          "type": "Observable<void>"
        },
        {
          "name": "didClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 104,
          "type": "Observable<void>"
        },
        {
          "name": "didOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 94,
          "type": "Observable<void>"
        },
        {
          "name": "input",
          "defaultValue": "fromEvent<void>(this.#element.nativeElement, 'input')",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 87,
          "type": "Observable<void>"
        },
        {
          "name": "willClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 99,
          "type": "Observable<void>"
        },
        {
          "name": "willOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 89,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 125,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        },
        {
          "name": "getDisplayValue",
          "args": [],
          "optional": false,
          "returnType": "string",
          "typeParameters": [],
          "line": 129,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        },
        {
          "name": "open",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 121,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": [],
      "accessors": {
        "placeholder": {
          "name": "placeholder",
          "setSignature": {
            "name": "placeholder",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "placeholder",
            "type": "string",
            "returnType": "string",
            "line": 20
          }
        },
        "multiple": {
          "name": "multiple",
          "setSignature": {
            "name": "multiple",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "multiple",
            "type": "boolean",
            "returnType": "boolean",
            "line": 28
          }
        },
        "readonly": {
          "name": "readonly",
          "setSignature": {
            "name": "readonly",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 33,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "readonly",
            "type": "boolean",
            "returnType": "boolean",
            "line": 36
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 41,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 44
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 49,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 52
          }
        },
        "required": {
          "name": "required",
          "setSignature": {
            "name": "required",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 57,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "required",
            "type": "boolean",
            "returnType": "boolean",
            "line": 60
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 65,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 68
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | string[] | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 73,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | string[] | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | [] | null",
            "line": 76
          }
        },
        "type": {
          "name": "type",
          "getSignature": {
            "name": "type",
            "type": "string",
            "returnType": "string",
            "line": 109
          }
        },
        "form": {
          "name": "form",
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 113
          }
        },
        "isOpen": {
          "name": "isOpen",
          "getSignature": {
            "name": "isOpen",
            "type": "boolean",
            "returnType": "boolean",
            "line": 117
          }
        }
      }
    },
    {
      "name": "SbbSelectionExpansionPanelDirective",
      "id": "directive-SbbSelectionExpansionPanelDirective-1286f219869781db2945c6a2ab54bcbe56040c158997dd861afef4a753b7bfb63ae3b66c8fa841271db8f3213a317cde9fec4c83adf59fa8aef366bad29eb0c0",
      "file": "src/angular/selection-expansion-panel/selection-expansion-panel.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, Output, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbSelectionExpansionPanelElement } from '@sbb-esta/lyne-elements/selection-expansion-panel.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/selection-expansion-panel.js';\n\n@Directive({\n  selector: 'sbb-selection-expansion-panel',\n  standalone: true,\n})\nexport class SbbSelectionExpansionPanelDirective {\n  #element: ElementRef<SbbSelectionExpansionPanelElement> = inject(\n    ElementRef<SbbSelectionExpansionPanelElement>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set color(value: 'white' | 'milk') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.color = value));\n  }\n  public get color(): 'white' | 'milk' {\n    return this.#element.nativeElement.color;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'force-open', transform: booleanAttribute })\n  public set forceOpen(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.forceOpen = value));\n  }\n  public get forceOpen(): boolean {\n    return this.#element.nativeElement.forceOpen;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set borderless(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.borderless = value));\n  }\n  public get borderless(): boolean {\n    return this.#element.nativeElement.borderless;\n  }\n\n  @Output() public willOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  );\n\n  @Output() public didOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  );\n\n  @Output() public willClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  );\n\n  @Output() public didClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  );\n}\n",
      "selector": "sbb-selection-expansion-panel",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "borderless",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "color",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "\"white\" | \"milk\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "force-open",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "didClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 58,
          "type": "Observable<void>"
        },
        {
          "name": "didOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 48,
          "type": "Observable<void>"
        },
        {
          "name": "willClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 53,
          "type": "Observable<void>"
        },
        {
          "name": "willOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "color": {
          "name": "color",
          "setSignature": {
            "name": "color",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"white\" | \"milk\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 19,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"white\" | \"milk\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "color",
            "type": "",
            "returnType": "\"white\" | \"milk\"",
            "line": 22
          }
        },
        "forceOpen": {
          "name": "forceOpen",
          "setSignature": {
            "name": "forceOpen",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 28,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "forceOpen",
            "type": "boolean",
            "returnType": "boolean",
            "line": 31
          }
        },
        "borderless": {
          "name": "borderless",
          "setSignature": {
            "name": "borderless",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 36,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "borderless",
            "type": "boolean",
            "returnType": "boolean",
            "line": 39
          }
        }
      }
    },
    {
      "name": "SbbSignetDirective",
      "id": "directive-SbbSignetDirective-4480da2f1569370a5b1afeb6b3dea258d213ffc92f2e119624ec627a2ef00a3ace3459986c7012bcef4fd63cfae76349cdf6382f0f7986724fcb12ff75219705",
      "file": "src/angular/signet/signet.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport type { SbbSignetElement, SbbSignetProtectiveRoom } from '@sbb-esta/lyne-elements/signet.js';\nimport '@sbb-esta/lyne-elements/signet.js';\n\n@Directive({\n  selector: 'sbb-signet',\n  standalone: true,\n})\nexport class SbbSignetDirective {\n  #element: ElementRef<SbbSignetElement> = inject(ElementRef<SbbSignetElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'protective-room' })\n  public set protectiveRoom(value: SbbSignetProtectiveRoom) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.protectiveRoom = value));\n  }\n  public get protectiveRoom(): SbbSignetProtectiveRoom {\n    return this.#element.nativeElement.protectiveRoom;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n}\n",
      "selector": "sbb-signet",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "protective-room",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "SbbSignetProtectiveRoom",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "protectiveRoom": {
          "name": "protectiveRoom",
          "setSignature": {
            "name": "protectiveRoom",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbSignetProtectiveRoom",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbSignetProtectiveRoom",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "protectiveRoom",
            "type": "",
            "returnType": "SbbSignetProtectiveRoom",
            "line": 19
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 28
          }
        }
      }
    },
    {
      "name": "SbbSkiplinkListDirective",
      "id": "directive-SbbSkiplinkListDirective-b67aba7de19a1919feb5d369c699fe103b959a4eb5e16fee63889322fc3c39373d5ad5a5d2d20765d1df4dcce310ff728e4d527c3ec9f148517a0e94f0a0aa1a",
      "file": "src/angular/skiplink-list/skiplink-list.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport type { SbbSkiplinkListElement } from '@sbb-esta/lyne-elements/skiplink-list.js';\nimport '@sbb-esta/lyne-elements/skiplink-list.js';\nimport { SbbTitleLevel } from '@sbb-esta/lyne-elements/title.js';\n\n@Directive({\n  selector: 'sbb-skiplink-list',\n  standalone: true,\n})\nexport class SbbSkiplinkListDirective {\n  #element: ElementRef<SbbSkiplinkListElement> = inject(ElementRef<SbbSkiplinkListElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'title-content' })\n  public set titleContent(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleContent = value));\n  }\n  public get titleContent(): string {\n    return this.#element.nativeElement.titleContent;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'title-level' })\n  public set titleLevel(value: SbbTitleLevel) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleLevel = value));\n  }\n  public get titleLevel(): SbbTitleLevel {\n    return this.#element.nativeElement.titleLevel;\n  }\n}\n",
      "selector": "sbb-skiplink-list",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "title-content",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "title-level",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "SbbTitleLevel",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "titleContent": {
          "name": "titleContent",
          "setSignature": {
            "name": "titleContent",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleContent",
            "type": "string",
            "returnType": "string",
            "line": 20
          }
        },
        "titleLevel": {
          "name": "titleLevel",
          "setSignature": {
            "name": "titleLevel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleLevel",
            "type": "",
            "returnType": "SbbTitleLevel",
            "line": 29
          }
        }
      }
    },
    {
      "name": "SbbSliderDirective",
      "id": "directive-SbbSliderDirective-0d9c8c86909eb1681672c011a44dbb525c313e596260e441c473e3fa91eea45d0a19faed825d63f6cf4058595f7d53a662934f79da650649680fd858e2c1a353",
      "file": "src/angular/slider/slider.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, Output, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbSliderElement } from '@sbb-esta/lyne-elements/slider.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/slider.js';\n\n@Directive({\n  selector: 'sbb-slider',\n  standalone: true,\n})\nexport class SbbSliderDirective {\n  #element: ElementRef<SbbSliderElement> = inject(ElementRef<SbbSliderElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'value-as-number' })\n  public set valueAsNumber(value: number | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.valueAsNumber = value));\n  }\n  public get valueAsNumber(): number | null {\n    return this.#element.nativeElement.valueAsNumber;\n  }\n\n  @Input()\n  public set min(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.min = value));\n  }\n  public get min(): string {\n    return this.#element.nativeElement.min;\n  }\n\n  @Input()\n  public set max(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.max = value));\n  }\n  public get max(): string {\n    return this.#element.nativeElement.max;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set readonly(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.readonly = value));\n  }\n  public get readonly(): boolean {\n    return this.#element.nativeElement.readonly;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'start-icon' })\n  public set startIcon(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.startIcon = value));\n  }\n  public get startIcon(): string {\n    return this.#element.nativeElement.startIcon;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'end-icon' })\n  public set endIcon(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.endIcon = value));\n  }\n  public get endIcon(): string {\n    return this.#element.nativeElement.endIcon;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Output() public didChange: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didChange',\n  );\n\n  public get type(): string {\n    return this.#element.nativeElement.type;\n  }\n\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n}\n",
      "selector": "sbb-slider",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 76,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "end-icon",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 68,
          "type": "string",
          "decorators": []
        },
        {
          "name": "max",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 42,
          "type": "string",
          "decorators": []
        },
        {
          "name": "min",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 84,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "readonly",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 50,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "start-icon",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 59,
          "type": "string",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "string | null",
          "decorators": []
        },
        {
          "required": false,
          "name": "value-as-number",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "number | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "didChange",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didChange',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 91,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 20
          }
        },
        "valueAsNumber": {
          "name": "valueAsNumber",
          "setSignature": {
            "name": "valueAsNumber",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "number | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "number | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "valueAsNumber",
            "type": "",
            "returnType": "number | null",
            "line": 29
          }
        },
        "min": {
          "name": "min",
          "setSignature": {
            "name": "min",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 34,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "min",
            "type": "string",
            "returnType": "string",
            "line": 37
          }
        },
        "max": {
          "name": "max",
          "setSignature": {
            "name": "max",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 42,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "max",
            "type": "string",
            "returnType": "string",
            "line": 45
          }
        },
        "readonly": {
          "name": "readonly",
          "setSignature": {
            "name": "readonly",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 50,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "readonly",
            "type": "boolean",
            "returnType": "boolean",
            "line": 53
          }
        },
        "startIcon": {
          "name": "startIcon",
          "setSignature": {
            "name": "startIcon",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 59,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "startIcon",
            "type": "string",
            "returnType": "string",
            "line": 62
          }
        },
        "endIcon": {
          "name": "endIcon",
          "setSignature": {
            "name": "endIcon",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 68,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "endIcon",
            "type": "string",
            "returnType": "string",
            "line": 71
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 76,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 79
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 84,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 87
          }
        },
        "type": {
          "name": "type",
          "getSignature": {
            "name": "type",
            "type": "string",
            "returnType": "string",
            "line": 96
          }
        },
        "form": {
          "name": "form",
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 100
          }
        }
      }
    },
    {
      "name": "SbbStatusDirective",
      "id": "directive-SbbStatusDirective-d5790eed31dadc2152b14d8402368bc7ddbd04ab8e5096102ba40e912fb33fe26858af97db7a6a4ea15291d76bc32fb929f9854c836758c9280934b60237ba36",
      "file": "src/angular/status/status.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport type { SbbStatusElement, SbbStatusType } from '@sbb-esta/lyne-elements/status.js';\nimport '@sbb-esta/lyne-elements/status.js';\nimport { SbbTitleLevel } from '@sbb-esta/lyne-elements/title.js';\n\n@Directive({\n  selector: 'sbb-status',\n  standalone: true,\n})\nexport class SbbStatusDirective {\n  #element: ElementRef<SbbStatusElement> = inject(ElementRef<SbbStatusElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set type(value: SbbStatusType) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): SbbStatusType {\n    return this.#element.nativeElement.type;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'title-content' })\n  public set titleContent(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleContent = value));\n  }\n  public get titleContent(): string {\n    return this.#element.nativeElement.titleContent;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'title-level' })\n  public set titleLevel(value: SbbTitleLevel) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleLevel = value));\n  }\n  public get titleLevel(): SbbTitleLevel {\n    return this.#element.nativeElement.titleLevel;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n}\n",
      "selector": "sbb-status",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "title-content",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "title-level",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "SbbTitleLevel",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "SbbStatusType",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbStatusType",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbStatusType",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "SbbStatusType",
            "line": 19
          }
        },
        "titleContent": {
          "name": "titleContent",
          "setSignature": {
            "name": "titleContent",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleContent",
            "type": "string",
            "returnType": "string",
            "line": 28
          }
        },
        "titleLevel": {
          "name": "titleLevel",
          "setSignature": {
            "name": "titleLevel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 34,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleLevel",
            "type": "",
            "returnType": "SbbTitleLevel",
            "line": 37
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 43,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 46
          }
        }
      }
    },
    {
      "name": "SbbStepDirective",
      "id": "directive-SbbStepDirective-a9c9068fc9eaaa5bc13c4720f265eb5b3c2ecdb63afb4a259984a2bc39a251b1046c909786eaea2a71ccb51b12d792bd502e5d954a12e2896648aa62fce4ed83",
      "file": "src/angular/stepper/step/step.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Output, inject } from '@angular/core';\nimport { SbbStepLabelElement } from '@sbb-esta/lyne-elements/stepper/step-label.js';\nimport type {\n  SbbStepElement,\n  SbbStepValidateEventDetails,\n} from '@sbb-esta/lyne-elements/stepper/step.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/stepper/step.js';\n\n@Directive({\n  selector: 'sbb-step',\n  standalone: true,\n})\nexport class SbbStepDirective {\n  #element: ElementRef<SbbStepElement> = inject(ElementRef<SbbStepElement>);\n\n  @Output() public validate: Observable<SbbStepValidateEventDetails> =\n    fromEvent<SbbStepValidateEventDetails>(this.#element.nativeElement, 'validate');\n\n  public get label(): SbbStepLabelElement | null {\n    return this.#element.nativeElement.label;\n  }\n}\n",
      "selector": "sbb-step",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [],
      "outputsClass": [
        {
          "name": "validate",
          "defaultValue": "fromEvent<SbbStepValidateEventDetails>(this.#element.nativeElement, 'validate')",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "Observable<SbbStepValidateEventDetails>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "label": {
          "name": "label",
          "getSignature": {
            "name": "label",
            "type": "",
            "returnType": "SbbStepLabelElement | null",
            "line": 21
          }
        }
      }
    },
    {
      "name": "SbbStepLabelDirective",
      "id": "directive-SbbStepLabelDirective-7dfe8b1a0d367333eae08f988151b1ee106304bee71644c56d6dcbcf832aceee110933dcb776d05890eb578792fff3165896e46a5a590ddceeb13259e34d4044",
      "file": "src/angular/stepper/step-label/step-label.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbButtonType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport type { SbbStepLabelElement } from '@sbb-esta/lyne-elements/stepper/step-label.js';\nimport { SbbStepElement } from '@sbb-esta/lyne-elements/stepper/step.js';\nimport '@sbb-esta/lyne-elements/stepper/step-label.js';\n\n@Directive({\n  selector: 'sbb-step-label',\n  standalone: true,\n})\nexport class SbbStepLabelDirective {\n  #element: ElementRef<SbbStepLabelElement> = inject(ElementRef<SbbStepLabelElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set form(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.form = value));\n  }\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set type(value: SbbButtonType) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): SbbButtonType {\n    return this.#element.nativeElement.type;\n  }\n\n  public get step(): SbbStepElement | null {\n    return this.#element.nativeElement.step;\n  }\n}\n",
      "selector": "sbb-step-label",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "form",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "string",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 59,
          "type": "SbbButtonType",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 51,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 19,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 22
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 27,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 30
          }
        },
        "form": {
          "name": "form",
          "setSignature": {
            "name": "form",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 35,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 38
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 43,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 46
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 51,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 54
          }
        },
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 59,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "SbbButtonType",
            "line": 62
          }
        },
        "step": {
          "name": "step",
          "getSignature": {
            "name": "step",
            "type": "",
            "returnType": "SbbStepElement | null",
            "line": 66
          }
        }
      }
    },
    {
      "name": "SbbStepperDirective",
      "id": "directive-SbbStepperDirective-9193505e4c62950cce7326827aad962482cce784f77280326e19d39d911f8994d2a9073c2d61d84608072ef84aa69924378e6eebfcb1e14bb7d164877ec41291",
      "file": "src/angular/stepper/stepper/stepper.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbHorizontalFrom, SbbOrientation } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport { SbbStepElement } from '@sbb-esta/lyne-elements/stepper/step.js';\nimport type { SbbStepperElement } from '@sbb-esta/lyne-elements/stepper/stepper.js';\nimport '@sbb-esta/lyne-elements/stepper/stepper.js';\n\n@Directive({\n  selector: 'sbb-stepper',\n  standalone: true,\n})\nexport class SbbStepperDirective {\n  #element: ElementRef<SbbStepperElement> = inject(ElementRef<SbbStepperElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set linear(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.linear = value));\n  }\n  public get linear(): boolean {\n    return this.#element.nativeElement.linear;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'horizontal-from' })\n  public set horizontalFrom(value: SbbHorizontalFrom | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.horizontalFrom = value));\n  }\n  public get horizontalFrom(): SbbHorizontalFrom | null {\n    return this.#element.nativeElement.horizontalFrom;\n  }\n\n  @Input()\n  public set orientation(value: SbbOrientation) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.orientation = value));\n  }\n  public get orientation(): SbbOrientation {\n    return this.#element.nativeElement.orientation;\n  }\n\n  @Input()\n  public set size(value: 's' | 'm') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): 's' | 'm' {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input()\n  public set selected(value: SbbStepElement | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.selected = value));\n  }\n  public get selected(): SbbStepElement | null {\n    return this.#element.nativeElement.selected;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'selected-index' })\n  public set selectedIndex(value: number | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.selectedIndex = value));\n  }\n  public get selectedIndex(): number | null {\n    return this.#element.nativeElement.selectedIndex;\n  }\n\n  public get steps(): SbbStepElement[] {\n    return this.#element.nativeElement.steps;\n  }\n\n  public next(): void {\n    return this.#element.nativeElement.next();\n  }\n\n  public previous(): void {\n    return this.#element.nativeElement.previous();\n  }\n\n  public reset(): void {\n    return this.#element.nativeElement.reset();\n  }\n}\n",
      "selector": "sbb-stepper",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "horizontal-from",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "SbbHorizontalFrom | null",
          "decorators": []
        },
        {
          "required": false,
          "name": "linear",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "orientation",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "SbbOrientation",
          "decorators": []
        },
        {
          "name": "selected",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 51,
          "type": "SbbStepElement | null",
          "decorators": []
        },
        {
          "required": false,
          "name": "selected-index",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 60,
          "type": "number | null",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "\"s\" | \"m\"",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "next",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 71,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        },
        {
          "name": "previous",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 75,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        },
        {
          "name": "reset",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 79,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": [],
      "accessors": {
        "linear": {
          "name": "linear",
          "setSignature": {
            "name": "linear",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "linear",
            "type": "boolean",
            "returnType": "boolean",
            "line": 21
          }
        },
        "horizontalFrom": {
          "name": "horizontalFrom",
          "setSignature": {
            "name": "horizontalFrom",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbHorizontalFrom | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 27,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbHorizontalFrom | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "horizontalFrom",
            "type": "",
            "returnType": "SbbHorizontalFrom | null",
            "line": 30
          }
        },
        "orientation": {
          "name": "orientation",
          "setSignature": {
            "name": "orientation",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbOrientation",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 35,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbOrientation",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "orientation",
            "type": "",
            "returnType": "SbbOrientation",
            "line": 38
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"s\" | \"m\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 43,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"s\" | \"m\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "\"s\" | \"m\"",
            "line": 46
          }
        },
        "selected": {
          "name": "selected",
          "setSignature": {
            "name": "selected",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbStepElement | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 51,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbStepElement | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "selected",
            "type": "",
            "returnType": "SbbStepElement | null",
            "line": 54
          }
        },
        "selectedIndex": {
          "name": "selectedIndex",
          "setSignature": {
            "name": "selectedIndex",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "number | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 60,
            "jsdoctags": [
              {
                "name": "value",
                "type": "number | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "selectedIndex",
            "type": "",
            "returnType": "number | null",
            "line": 63
          }
        },
        "steps": {
          "name": "steps",
          "getSignature": {
            "name": "steps",
            "type": "[]",
            "returnType": "SbbStepElement[]",
            "line": 67
          }
        }
      }
    },
    {
      "name": "SbbStickyBarDirective",
      "id": "directive-SbbStickyBarDirective-7e505fefe3fef3eef44681eebbbb374be308140e4522b50fc98c9d2bb5daa1c93b5d5a810517b7ef9bd01c9a6d257d5203fa58b5c7238b947cc258c332cafdcc",
      "file": "src/angular/container/sticky-bar/sticky-bar.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, Output, inject } from '@angular/core';\nimport type { SbbStickyBarElement } from '@sbb-esta/lyne-elements/container/sticky-bar.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/container/sticky-bar.js';\n\n@Directive({\n  selector: 'sbb-sticky-bar',\n  standalone: true,\n})\nexport class SbbStickyBarDirective {\n  #element: ElementRef<SbbStickyBarElement> = inject(ElementRef<SbbStickyBarElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set color(value: 'white' | 'milk' | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.color = value));\n  }\n  public get color(): 'white' | 'milk' | null {\n    return this.#element.nativeElement.color;\n  }\n\n  @Output() public willStick: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willStick',\n  );\n\n  @Output() public didStick: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didStick',\n  );\n\n  @Output() public willUnstick: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willUnstick',\n  );\n\n  @Output() public didUnstick: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didUnstick',\n  );\n\n  public stick(): void {\n    return this.#element.nativeElement.stick();\n  }\n\n  public unstick(): void {\n    return this.#element.nativeElement.unstick();\n  }\n}\n",
      "selector": "sbb-sticky-bar",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "name": "color",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "\"white\" | \"milk\" | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "didStick",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didStick',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "Observable<void>"
        },
        {
          "name": "didUnstick",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didUnstick',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 38,
          "type": "Observable<void>"
        },
        {
          "name": "willStick",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willStick',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 23,
          "type": "Observable<void>"
        },
        {
          "name": "willUnstick",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willUnstick',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "stick",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 43,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        },
        {
          "name": "unstick",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 47,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": [],
      "accessors": {
        "color": {
          "name": "color",
          "setSignature": {
            "name": "color",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"white\" | \"milk\" | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"white\" | \"milk\" | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "color",
            "type": "",
            "returnType": "\"white\" | \"milk\" | null",
            "line": 19
          }
        }
      }
    },
    {
      "name": "SbbTabDirective",
      "id": "directive-SbbTabDirective-b04298d160bfa41c9ac60bda0cac284d30263b34273d264406c01f0bd9563795581383a48bb842f125d468b0603e914948355ba137f4e982f554ac43b3c8e15a",
      "file": "src/angular/tabs/tab/tab.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, inject } from '@angular/core';\nimport { SbbTabLabelElement } from '@sbb-esta/lyne-elements/tabs/tab-label.js';\nimport type { SbbTabElement } from '@sbb-esta/lyne-elements/tabs/tab.js';\nimport '@sbb-esta/lyne-elements/tabs/tab.js';\n\n@Directive({\n  selector: 'sbb-tab',\n  standalone: true,\n})\nexport class SbbTabDirective {\n  #element: ElementRef<SbbTabElement> = inject(ElementRef<SbbTabElement>);\n\n  public get label(): SbbTabLabelElement | null {\n    return this.#element.nativeElement.label;\n  }\n}\n",
      "selector": "sbb-tab",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "label": {
          "name": "label",
          "getSignature": {
            "name": "label",
            "type": "",
            "returnType": "SbbTabLabelElement | null",
            "line": 14
          }
        }
      }
    },
    {
      "name": "SbbTabGroupDirective",
      "id": "directive-SbbTabGroupDirective-14a1caddfb561449aabcfa00a3134e9f051bce0a36002ed5b78b48347474d3cfd08447cb17ba192356349f45460f282347e828c3020281c026c01017a62c703e",
      "file": "src/angular/tabs/tab-group/tab-group.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {\n  Directive,\n  ElementRef,\n  Input,\n  NgZone,\n  Output,\n  inject,\n  numberAttribute,\n} from '@angular/core';\nimport type {\n  InterfaceSbbTabGroupTab,\n  SbbTabChangedEventDetails,\n  SbbTabGroupElement,\n} from '@sbb-esta/lyne-elements/tabs/tab-group.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/tabs/tab-group.js';\n\n@Directive({\n  selector: 'sbb-tab-group',\n  standalone: true,\n})\nexport class SbbTabGroupDirective {\n  #element: ElementRef<SbbTabGroupElement> = inject(ElementRef<SbbTabGroupElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: InterfaceSbbTabGroupTab['size']) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): InterfaceSbbTabGroupTab['size'] {\n    return this.#element.nativeElement.size;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'initial-selected-index', transform: numberAttribute })\n  public set initialSelectedIndex(value: number) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.initialSelectedIndex = value),\n    );\n  }\n  public get initialSelectedIndex(): number {\n    return this.#element.nativeElement.initialSelectedIndex;\n  }\n\n  @Output() public didChange: Observable<SbbTabChangedEventDetails> =\n    fromEvent<SbbTabChangedEventDetails>(this.#element.nativeElement, 'didChange');\n\n  public disableTab(tabIndex: number): void {\n    return this.#element.nativeElement.disableTab(tabIndex);\n  }\n\n  public enableTab(tabIndex: number): void {\n    return this.#element.nativeElement.enableTab(tabIndex);\n  }\n\n  public activateTab(tabIndex: number): void {\n    return this.#element.nativeElement.activateTab(tabIndex);\n  }\n}\n",
      "selector": "sbb-tab-group",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "initial-selected-index",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 37,
          "type": "number",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "didChange",
          "defaultValue": "fromEvent<SbbTabChangedEventDetails>(this.#element.nativeElement, 'didChange')",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 46,
          "type": "Observable<SbbTabChangedEventDetails>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "activateTab",
          "args": [
            {
              "name": "tabIndex",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 57,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": "tabIndex",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "disableTab",
          "args": [
            {
              "name": "tabIndex",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 49,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": "tabIndex",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        },
        {
          "name": "enableTab",
          "args": [
            {
              "name": "tabIndex",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 53,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125],
          "jsdoctags": [
            {
              "name": "tabIndex",
              "type": "number",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "InterfaceSbbTabGroupTab",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 28,
            "jsdoctags": [
              {
                "name": "value",
                "type": "InterfaceSbbTabGroupTab",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "",
            "line": 31
          }
        },
        "initialSelectedIndex": {
          "name": "initialSelectedIndex",
          "setSignature": {
            "name": "initialSelectedIndex",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 37,
            "jsdoctags": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "initialSelectedIndex",
            "type": "number",
            "returnType": "number",
            "line": 42
          }
        }
      }
    },
    {
      "name": "SbbTabLabelDirective",
      "id": "directive-SbbTabLabelDirective-c1615ced962911a34b93a27caaab7b171ac4e35f3a9a29da2009eafd688e4bb35aa9408dab1fca6aa41faac404d7f5981ab9f98e01a6fdbe4dc8cb1bbe087fd3",
      "file": "src/angular/tabs/tab-label/tab-label.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbTabLabelElement } from '@sbb-esta/lyne-elements/tabs/tab-label.js';\nimport '@sbb-esta/lyne-elements/tabs/tab-label.js';\nimport { SbbTitleLevel } from '@sbb-esta/lyne-elements/title.js';\n\n@Directive({\n  selector: 'sbb-tab-label',\n  standalone: true,\n})\nexport class SbbTabLabelDirective {\n  #element: ElementRef<SbbTabLabelElement> = inject(ElementRef<SbbTabLabelElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set level(value: SbbTitleLevel) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.level = value));\n  }\n  public get level(): SbbTitleLevel {\n    return this.#element.nativeElement.level;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set active(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.active = value));\n  }\n  public get active(): boolean {\n    return this.#element.nativeElement.active;\n  }\n\n  @Input()\n  public set amount(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.amount = value));\n  }\n  public get amount(): string {\n    return this.#element.nativeElement.amount;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n}\n",
      "selector": "sbb-tab-label",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "active",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "amount",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 41,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 50,
          "type": "string",
          "decorators": []
        },
        {
          "name": "level",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "SbbTitleLevel",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "level": {
          "name": "level",
          "setSignature": {
            "name": "level",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "level",
            "type": "",
            "returnType": "SbbTitleLevel",
            "line": 20
          }
        },
        "active": {
          "name": "active",
          "setSignature": {
            "name": "active",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "active",
            "type": "boolean",
            "returnType": "boolean",
            "line": 28
          }
        },
        "amount": {
          "name": "amount",
          "setSignature": {
            "name": "amount",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 33,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "amount",
            "type": "string",
            "returnType": "string",
            "line": 36
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 41,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 44
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 50,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 53
          }
        }
      }
    },
    {
      "name": "SbbTableWrapperDirective",
      "id": "directive-SbbTableWrapperDirective-f1851d42afd781be4ee1407ee293147c9f843cd51c86fc864427a6d2f8422d44da6fdb731329cdf5a91f988e80520e1f42126bbbe55549bd9cb65ca6a24e45a1",
      "file": "src/angular/table/table-wrapper/table-wrapper.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbTableWrapperElement } from '@sbb-esta/lyne-elements/table/table-wrapper.js';\nimport '@sbb-esta/lyne-elements/table/table-wrapper.js';\n\n@Directive({\n  selector: 'sbb-table-wrapper',\n  standalone: true,\n})\nexport class SbbTableWrapperDirective {\n  #element: ElementRef<SbbTableWrapperElement> = inject(ElementRef<SbbTableWrapperElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n}\n",
      "selector": "sbb-table-wrapper",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 19
          }
        }
      }
    },
    {
      "name": "SbbTagDirective",
      "id": "directive-SbbTagDirective-e471538462ef9b80a4cc4def8268dcb896fdf65d7454c403f059ab64f73e6aab0b8fae0976a18d1763b3952c7ca0f4eb2fa64b79f9c11210936a2b5ec4a122d3",
      "file": "src/angular/tag/tag/tag.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, Output, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbButtonType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport type { SbbTagElement, SbbTagSize } from '@sbb-esta/lyne-elements/tag/tag.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/tag/tag.js';\n\n@Directive({\n  selector: 'sbb-tag',\n  standalone: true,\n})\nexport class SbbTagDirective {\n  #element: ElementRef<SbbTagElement> = inject(ElementRef<SbbTagElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set amount(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.amount = value));\n  }\n  public get amount(): string {\n    return this.#element.nativeElement.amount;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set checked(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.checked = value));\n  }\n  public get checked(): boolean {\n    return this.#element.nativeElement.checked;\n  }\n\n  @Input()\n  public set size(value: SbbTagSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbTagSize {\n    return this.#element.nativeElement.size;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'disabled-interactive', transform: booleanAttribute })\n  public set disabledInteractive(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabledInteractive = value));\n  }\n  public get disabledInteractive(): boolean {\n    return this.#element.nativeElement.disabledInteractive;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set form(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.form = value));\n  }\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set type(value: SbbButtonType) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): SbbButtonType {\n    return this.#element.nativeElement.type;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public input: Observable<void> = fromEvent<void>(this.#element.nativeElement, 'input');\n\n  @Output() public didChange: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didChange',\n  );\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public change: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'change',\n  );\n}\n",
      "selector": "sbb-tag",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "name": "amount",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "checked",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 60,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled-interactive",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 52,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "form",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 68,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 76,
          "type": "string",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "SbbTagSize",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 92,
          "type": "SbbButtonType",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 84,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "change",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'change',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 108,
          "type": "Observable<void>"
        },
        {
          "name": "didChange",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didChange',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 102,
          "type": "Observable<void>"
        },
        {
          "name": "input",
          "defaultValue": "fromEvent<void>(this.#element.nativeElement, 'input')",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 100,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "amount": {
          "name": "amount",
          "setSignature": {
            "name": "amount",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "amount",
            "type": "string",
            "returnType": "string",
            "line": 21
          }
        },
        "checked": {
          "name": "checked",
          "setSignature": {
            "name": "checked",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "checked",
            "type": "boolean",
            "returnType": "boolean",
            "line": 29
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTagSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 34,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTagSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbTagSize",
            "line": 37
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 43,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 46
          }
        },
        "disabledInteractive": {
          "name": "disabledInteractive",
          "setSignature": {
            "name": "disabledInteractive",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 52,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabledInteractive",
            "type": "boolean",
            "returnType": "boolean",
            "line": 55
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 60,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 63
          }
        },
        "form": {
          "name": "form",
          "setSignature": {
            "name": "form",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 68,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 71
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 76,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 79
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 84,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 87
          }
        },
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 92,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "SbbButtonType",
            "line": 95
          }
        }
      }
    },
    {
      "name": "SbbTagGroupDirective",
      "id": "directive-SbbTagGroupDirective-2c126395b869e8f883b2737a0f2ae2bc603728ad6062337ea30282d0e3a89aca82b5beefdb0eeda78a53abc13cbfa8fb5e4e4e553026cc39b5e8ac942ec3e8cb",
      "file": "src/angular/tag/tag-group/tag-group.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbTagGroupElement } from '@sbb-esta/lyne-elements/tag/tag-group.js';\nimport '@sbb-esta/lyne-elements/tag/tag-group.js';\nimport { SbbTagElement, SbbTagSize } from '@sbb-esta/lyne-elements/tag/tag.js';\n\n@Directive({\n  selector: 'sbb-tag-group',\n  standalone: true,\n})\nexport class SbbTagGroupDirective {\n  #element: ElementRef<SbbTagGroupElement> = inject(ElementRef<SbbTagGroupElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'list-accessibility-label' })\n  public set listAccessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.listAccessibilityLabel = value),\n    );\n  }\n  public get listAccessibilityLabel(): string {\n    return this.#element.nativeElement.listAccessibilityLabel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set multiple(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.multiple = value));\n  }\n  public get multiple(): boolean {\n    return this.#element.nativeElement.multiple;\n  }\n\n  @Input()\n  public set size(value: SbbTagSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbTagSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input()\n  public set value(value: string | (string | null)[] | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | (string | null)[] | null {\n    return this.#element.nativeElement.value;\n  }\n\n  public get tags(): SbbTagElement[] {\n    return this.#element.nativeElement.tags;\n  }\n}\n",
      "selector": "sbb-tag-group",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "list-accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "multiple",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "SbbTagSize",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 44,
          "type": "string | [] | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "listAccessibilityLabel": {
          "name": "listAccessibilityLabel",
          "setSignature": {
            "name": "listAccessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "listAccessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 23
          }
        },
        "multiple": {
          "name": "multiple",
          "setSignature": {
            "name": "multiple",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 28,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "multiple",
            "type": "boolean",
            "returnType": "boolean",
            "line": 31
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTagSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 36,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTagSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbTagSize",
            "line": 39
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | (string | null)[] | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 44,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | (string | null)[] | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | [] | null",
            "line": 47
          }
        },
        "tags": {
          "name": "tags",
          "getSignature": {
            "name": "tags",
            "type": "[]",
            "returnType": "SbbTagElement[]",
            "line": 51
          }
        }
      }
    },
    {
      "name": "SbbTeaserDirective",
      "id": "directive-SbbTeaserDirective-d00b0776dc4ef4239c76697d6c6a2f12bf8512360566c05c017fbfff674a281de3575fe24813a98f00ea0598bf5cf982651faf2e72a4eb6f17218b4a4f95f517",
      "file": "src/angular/teaser/teaser.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { LinkTargetType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport type { SbbTeaserElement } from '@sbb-esta/lyne-elements/teaser.js';\nimport { SbbTitleLevel } from '@sbb-esta/lyne-elements/title.js';\nimport '@sbb-esta/lyne-elements/teaser.js';\n\n@Directive({\n  selector: 'sbb-teaser',\n  standalone: true,\n})\nexport class SbbTeaserDirective {\n  #element: ElementRef<SbbTeaserElement> = inject(ElementRef<SbbTeaserElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set alignment(value: 'after-centered' | 'after' | 'below') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.alignment = value));\n  }\n  public get alignment(): 'after-centered' | 'after' | 'below' {\n    return this.#element.nativeElement.alignment;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'title-level' })\n  public set titleLevel(value: SbbTitleLevel) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleLevel = value));\n  }\n  public get titleLevel(): SbbTitleLevel {\n    return this.#element.nativeElement.titleLevel;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'title-content' })\n  public set titleContent(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.titleContent = value));\n  }\n  public get titleContent(): string {\n    return this.#element.nativeElement.titleContent;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'chip-content' })\n  public set chipContent(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.chipContent = value));\n  }\n  public get chipContent(): string {\n    return this.#element.nativeElement.chipContent;\n  }\n\n  @Input()\n  public set href(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.href = value));\n  }\n  public get href(): string {\n    return this.#element.nativeElement.href;\n  }\n\n  @Input()\n  public set target(value: LinkTargetType | string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.target = value));\n  }\n  public get target(): LinkTargetType | string {\n    return this.#element.nativeElement.target;\n  }\n\n  @Input()\n  public set rel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.rel = value));\n  }\n  public get rel(): string {\n    return this.#element.nativeElement.rel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set download(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.download = value));\n  }\n  public get download(): boolean {\n    return this.#element.nativeElement.download;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n}\n",
      "selector": "sbb-teaser",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 86,
          "type": "string",
          "decorators": []
        },
        {
          "name": "alignment",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "\"after-centered\" | \"after\" | \"below\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "chip-content",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 45,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "download",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 77,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "href",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 53,
          "type": "string",
          "decorators": []
        },
        {
          "name": "rel",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 69,
          "type": "string",
          "decorators": []
        },
        {
          "name": "target",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 61,
          "type": "LinkTargetType | string",
          "decorators": []
        },
        {
          "required": false,
          "name": "title-content",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "title-level",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "SbbTitleLevel",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "alignment": {
          "name": "alignment",
          "setSignature": {
            "name": "alignment",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"after-centered\" | \"after\" | \"below\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"after-centered\" | \"after\" | \"below\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "alignment",
            "type": "",
            "returnType": "\"after-centered\" | \"after\" | \"below\"",
            "line": 21
          }
        },
        "titleLevel": {
          "name": "titleLevel",
          "setSignature": {
            "name": "titleLevel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 27,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleLevel",
            "type": "",
            "returnType": "SbbTitleLevel",
            "line": 30
          }
        },
        "titleContent": {
          "name": "titleContent",
          "setSignature": {
            "name": "titleContent",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 36,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "titleContent",
            "type": "string",
            "returnType": "string",
            "line": 39
          }
        },
        "chipContent": {
          "name": "chipContent",
          "setSignature": {
            "name": "chipContent",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 45,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "chipContent",
            "type": "string",
            "returnType": "string",
            "line": 48
          }
        },
        "href": {
          "name": "href",
          "setSignature": {
            "name": "href",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 53,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "href",
            "type": "string",
            "returnType": "string",
            "line": 56
          }
        },
        "target": {
          "name": "target",
          "setSignature": {
            "name": "target",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 61,
            "jsdoctags": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "target",
            "type": "",
            "returnType": "LinkTargetType | string",
            "line": 64
          }
        },
        "rel": {
          "name": "rel",
          "setSignature": {
            "name": "rel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 69,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "rel",
            "type": "string",
            "returnType": "string",
            "line": 72
          }
        },
        "download": {
          "name": "download",
          "setSignature": {
            "name": "download",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 77,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "download",
            "type": "boolean",
            "returnType": "boolean",
            "line": 80
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 86,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 89
          }
        }
      }
    },
    {
      "name": "SbbTeaserHeroDirective",
      "id": "directive-SbbTeaserHeroDirective-ce55089a4ffd5beb4693d67c2ef557a9c01402c80c198f3eaef9e2ce1e098fd274ada749932b0f4096b0c95f2133002a9e1dae8b694a1dbf6f4b657d1507150b",
      "file": "src/angular/teaser-hero/teaser-hero.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { LinkTargetType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport type { SbbTeaserHeroElement } from '@sbb-esta/lyne-elements/teaser-hero.js';\nimport '@sbb-esta/lyne-elements/teaser-hero.js';\n\n@Directive({\n  selector: 'sbb-teaser-hero',\n  standalone: true,\n})\nexport class SbbTeaserHeroDirective {\n  #element: ElementRef<SbbTeaserHeroElement> = inject(ElementRef<SbbTeaserHeroElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'link-content' })\n  public set linkContent(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.linkContent = value));\n  }\n  public get linkContent(): string {\n    return this.#element.nativeElement.linkContent;\n  }\n\n  @Input()\n  public set href(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.href = value));\n  }\n  public get href(): string {\n    return this.#element.nativeElement.href;\n  }\n\n  @Input()\n  public set target(value: LinkTargetType | string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.target = value));\n  }\n  public get target(): LinkTargetType | string {\n    return this.#element.nativeElement.target;\n  }\n\n  @Input()\n  public set rel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.rel = value));\n  }\n  public get rel(): string {\n    return this.#element.nativeElement.rel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set download(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.download = value));\n  }\n  public get download(): boolean {\n    return this.#element.nativeElement.download;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n}\n",
      "selector": "sbb-teaser-hero",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 59,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "download",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 50,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "href",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "link-content",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "string",
          "decorators": []
        },
        {
          "name": "rel",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 42,
          "type": "string",
          "decorators": []
        },
        {
          "name": "target",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "LinkTargetType | string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "linkContent": {
          "name": "linkContent",
          "setSignature": {
            "name": "linkContent",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "linkContent",
            "type": "string",
            "returnType": "string",
            "line": 21
          }
        },
        "href": {
          "name": "href",
          "setSignature": {
            "name": "href",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "href",
            "type": "string",
            "returnType": "string",
            "line": 29
          }
        },
        "target": {
          "name": "target",
          "setSignature": {
            "name": "target",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 34,
            "jsdoctags": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "target",
            "type": "",
            "returnType": "LinkTargetType | string",
            "line": 37
          }
        },
        "rel": {
          "name": "rel",
          "setSignature": {
            "name": "rel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 42,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "rel",
            "type": "string",
            "returnType": "string",
            "line": 45
          }
        },
        "download": {
          "name": "download",
          "setSignature": {
            "name": "download",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 50,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "download",
            "type": "boolean",
            "returnType": "boolean",
            "line": 53
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 59,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 62
          }
        }
      }
    },
    {
      "name": "SbbTeaserProductDirective",
      "id": "directive-SbbTeaserProductDirective-726325785e06f5ae37116c2673895baf037750d743b32ba93f15f71d703b986905f1489af765a045e7a682ad9e25cad153012f7c808e865ad0b74993ccad25f6",
      "file": "src/angular/teaser-product/teaser-product/teaser-product.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { LinkTargetType } from '@sbb-esta/lyne-elements/core/base-elements.js';\nimport type { SbbTeaserProductElement } from '@sbb-esta/lyne-elements/teaser-product/teaser-product.js';\nimport '@sbb-esta/lyne-elements/teaser-product/teaser-product.js';\n\n@Directive({\n  selector: 'sbb-teaser-product',\n  standalone: true,\n})\nexport class SbbTeaserProductDirective {\n  #element: ElementRef<SbbTeaserProductElement> = inject(ElementRef<SbbTeaserProductElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'image-alignment' })\n  public set imageAlignment(value: 'after' | 'before') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.imageAlignment = value));\n  }\n  public get imageAlignment(): 'after' | 'before' {\n    return this.#element.nativeElement.imageAlignment;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input()\n  public set href(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.href = value));\n  }\n  public get href(): string {\n    return this.#element.nativeElement.href;\n  }\n\n  @Input()\n  public set target(value: LinkTargetType | string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.target = value));\n  }\n  public get target(): LinkTargetType | string {\n    return this.#element.nativeElement.target;\n  }\n\n  @Input()\n  public set rel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.rel = value));\n  }\n  public get rel(): string {\n    return this.#element.nativeElement.rel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set download(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.download = value));\n  }\n  public get download(): boolean {\n    return this.#element.nativeElement.download;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n}\n",
      "selector": "sbb-teaser-product",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 67,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "download",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 58,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "href",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "image-alignment",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "\"after\" | \"before\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "rel",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 50,
          "type": "string",
          "decorators": []
        },
        {
          "name": "target",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 42,
          "type": "LinkTargetType | string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "imageAlignment": {
          "name": "imageAlignment",
          "setSignature": {
            "name": "imageAlignment",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"after\" | \"before\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"after\" | \"before\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "imageAlignment",
            "type": "",
            "returnType": "\"after\" | \"before\"",
            "line": 21
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 29
          }
        },
        "href": {
          "name": "href",
          "setSignature": {
            "name": "href",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 34,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "href",
            "type": "string",
            "returnType": "string",
            "line": 37
          }
        },
        "target": {
          "name": "target",
          "setSignature": {
            "name": "target",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 42,
            "jsdoctags": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "target",
            "type": "",
            "returnType": "LinkTargetType | string",
            "line": 45
          }
        },
        "rel": {
          "name": "rel",
          "setSignature": {
            "name": "rel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 50,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "rel",
            "type": "string",
            "returnType": "string",
            "line": 53
          }
        },
        "download": {
          "name": "download",
          "setSignature": {
            "name": "download",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 58,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "download",
            "type": "boolean",
            "returnType": "boolean",
            "line": 61
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 67,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 70
          }
        }
      }
    },
    {
      "name": "SbbTeaserProductStaticDirective",
      "id": "directive-SbbTeaserProductStaticDirective-c3119fc701fabbeef3165715918731441ae4e6c5289e69be4403725d216a3d4ef4e0eb454b4d4855b4a52fdfdecf3c3c4fbb1ef7f43e6cdfa3cc28c246029d85",
      "file": "src/angular/teaser-product/teaser-product-static/teaser-product-static.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbTeaserProductStaticElement } from '@sbb-esta/lyne-elements/teaser-product/teaser-product-static.js';\nimport '@sbb-esta/lyne-elements/teaser-product/teaser-product-static.js';\n\n@Directive({\n  selector: 'sbb-teaser-product-static',\n  standalone: true,\n})\nexport class SbbTeaserProductStaticDirective {\n  #element: ElementRef<SbbTeaserProductStaticElement> = inject(\n    ElementRef<SbbTeaserProductStaticElement>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'image-alignment' })\n  public set imageAlignment(value: 'after' | 'before') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.imageAlignment = value));\n  }\n  public get imageAlignment(): 'after' | 'before' {\n    return this.#element.nativeElement.imageAlignment;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n}\n",
      "selector": "sbb-teaser-product-static",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "image-alignment",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "\"after\" | \"before\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "imageAlignment": {
          "name": "imageAlignment",
          "setSignature": {
            "name": "imageAlignment",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"after\" | \"before\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 19,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"after\" | \"before\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "imageAlignment",
            "type": "",
            "returnType": "\"after\" | \"before\"",
            "line": 22
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 27,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 30
          }
        }
      }
    },
    {
      "name": "SbbTimeInputDirective",
      "id": "directive-SbbTimeInputDirective-b553f8954224f087e4b775932c5644154a1d6574f294cc44eed05bc845928e0b5944071e7efc5ae944c3c5a26d3f61b339d3fa137d30cc25b70fbf9316320c67",
      "file": "src/angular/time-input/time-input.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, Output, inject } from '@angular/core';\nimport { SbbValidationChangeEvent } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport type { SbbTimeInputElement } from '@sbb-esta/lyne-elements/time-input.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/time-input.js';\n\n@Directive({\n  selector: 'sbb-time-input',\n  standalone: true,\n})\nexport class SbbTimeInputDirective {\n  #element: ElementRef<SbbTimeInputElement> = inject(ElementRef<SbbTimeInputElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set input(value: string | HTMLElement | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.input = value));\n  }\n  public get input(): string | HTMLElement | null {\n    return this.#element.nativeElement.input;\n  }\n\n  @Input()\n  public set valueAsDate(value: Date | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.valueAsDate = value));\n  }\n  public get valueAsDate(): Date | null {\n    return this.#element.nativeElement.valueAsDate;\n  }\n\n  @Output() public didChange: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didChange',\n  );\n\n  @Output() public validationChange: Observable<SbbValidationChangeEvent> =\n    fromEvent<SbbValidationChangeEvent>(this.#element.nativeElement, 'validationChange');\n}\n",
      "selector": "sbb-time-input",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "name": "input",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "string | HTMLElement | null",
          "decorators": []
        },
        {
          "name": "valueAsDate",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "Date | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "didChange",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didChange',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "Observable<void>"
        },
        {
          "name": "validationChange",
          "defaultValue": "fromEvent<SbbValidationChangeEvent>(this.#element.nativeElement, 'validationChange')",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 37,
          "type": "Observable<SbbValidationChangeEvent>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "input": {
          "name": "input",
          "setSignature": {
            "name": "input",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | HTMLElement | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | HTMLElement | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "input",
            "type": "",
            "returnType": "string | HTMLElement | null",
            "line": 20
          }
        },
        "valueAsDate": {
          "name": "valueAsDate",
          "setSignature": {
            "name": "valueAsDate",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "Date | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "Date | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "valueAsDate",
            "type": "",
            "returnType": "Date | null",
            "line": 28
          }
        }
      }
    },
    {
      "name": "SbbTimetableOccupancyDirective",
      "id": "directive-SbbTimetableOccupancyDirective-741f66289a7af7712ac2372abb738a93e32d562deb0de001faf82f6edb4c83ed6927902aeea64645c2db27df5f17a7977ae91a34d7b557cf9c35961d7d553798",
      "file": "src/angular/timetable-occupancy/timetable-occupancy.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbOccupancy } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport type { SbbTimetableOccupancyElement } from '@sbb-esta/lyne-elements/timetable-occupancy.js';\nimport '@sbb-esta/lyne-elements/timetable-occupancy.js';\n\n@Directive({\n  selector: 'sbb-timetable-occupancy',\n  standalone: true,\n})\nexport class SbbTimetableOccupancyDirective {\n  #element: ElementRef<SbbTimetableOccupancyElement> = inject(\n    ElementRef<SbbTimetableOccupancyElement>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'first-class-occupancy' })\n  public set firstClassOccupancy(value: SbbOccupancy | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.firstClassOccupancy = value));\n  }\n  public get firstClassOccupancy(): SbbOccupancy | null {\n    return this.#element.nativeElement.firstClassOccupancy;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'second-class-occupancy' })\n  public set secondClassOccupancy(value: SbbOccupancy | null) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.secondClassOccupancy = value),\n    );\n  }\n  public get secondClassOccupancy(): SbbOccupancy | null {\n    return this.#element.nativeElement.secondClassOccupancy;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n}\n",
      "selector": "sbb-timetable-occupancy",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "first-class-occupancy",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "SbbOccupancy | null",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 39,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "second-class-occupancy",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 29,
          "type": "SbbOccupancy | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "firstClassOccupancy": {
          "name": "firstClassOccupancy",
          "setSignature": {
            "name": "firstClassOccupancy",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbOccupancy | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 20,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbOccupancy | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "firstClassOccupancy",
            "type": "",
            "returnType": "SbbOccupancy | null",
            "line": 23
          }
        },
        "secondClassOccupancy": {
          "name": "secondClassOccupancy",
          "setSignature": {
            "name": "secondClassOccupancy",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbOccupancy | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 29,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbOccupancy | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "secondClassOccupancy",
            "type": "",
            "returnType": "SbbOccupancy | null",
            "line": 34
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 39,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 42
          }
        }
      }
    },
    {
      "name": "SbbTimetableOccupancyIconDirective",
      "id": "directive-SbbTimetableOccupancyIconDirective-27187f960da7ef6630aadd9743a9120d281a364fae9f45378da42e5bdad30c6417553294a6c888fda033fc75bbd454ff627925081d55922494e14656f3fc6fa7",
      "file": "src/angular/timetable-occupancy-icon/timetable-occupancy-icon.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbOccupancy } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport type { SbbTimetableOccupancyIconElement } from '@sbb-esta/lyne-elements/timetable-occupancy-icon.js';\nimport '@sbb-esta/lyne-elements/timetable-occupancy-icon.js';\n\n@Directive({\n  selector: 'sbb-timetable-occupancy-icon',\n  standalone: true,\n})\nexport class SbbTimetableOccupancyIconDirective {\n  #element: ElementRef<SbbTimetableOccupancyIconElement> = inject(\n    ElementRef<SbbTimetableOccupancyIconElement>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set occupancy(value: SbbOccupancy) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.occupancy = value));\n  }\n  public get occupancy(): SbbOccupancy {\n    return this.#element.nativeElement.occupancy;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'no-sanitize', transform: booleanAttribute })\n  public set noSanitize(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.noSanitize = value));\n  }\n  public get noSanitize(): boolean {\n    return this.#element.nativeElement.noSanitize;\n  }\n}\n",
      "selector": "sbb-timetable-occupancy-icon",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "no-sanitize",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "occupancy",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "SbbOccupancy",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "occupancy": {
          "name": "occupancy",
          "setSignature": {
            "name": "occupancy",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbOccupancy",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 19,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbOccupancy",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "occupancy",
            "type": "",
            "returnType": "SbbOccupancy",
            "line": 22
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 27,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 30
          }
        },
        "noSanitize": {
          "name": "noSanitize",
          "setSignature": {
            "name": "noSanitize",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 36,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "noSanitize",
            "type": "boolean",
            "returnType": "boolean",
            "line": 39
          }
        }
      }
    },
    {
      "name": "SbbTitleDirective",
      "id": "directive-SbbTitleDirective-5eec17acfa6b162b6a32260d9cd856625957804b708da7273fac25fd1418a641b1c367e4cb7c9c2830d1815e8455cdd9d6350d15d921b8b2297f140143f01c5f",
      "file": "src/angular/title/title.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbTitleElement, SbbTitleLevel } from '@sbb-esta/lyne-elements/title.js';\nimport '@sbb-esta/lyne-elements/title.js';\n\n@Directive({\n  selector: 'sbb-title',\n  standalone: true,\n})\nexport class SbbTitleDirective {\n  #element: ElementRef<SbbTitleElement> = inject(ElementRef<SbbTitleElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  @Input()\n  public set level(value: SbbTitleLevel) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.level = value));\n  }\n  public get level(): SbbTitleLevel {\n    return this.#element.nativeElement.level;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'visual-level' })\n  public set visualLevel(value: SbbTitleLevel | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.visualLevel = value));\n  }\n  public get visualLevel(): SbbTitleLevel | null {\n    return this.#element.nativeElement.visualLevel;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'visually-hidden', transform: booleanAttribute })\n  public set visuallyHidden(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.visuallyHidden = value));\n  }\n  public get visuallyHidden(): boolean {\n    return this.#element.nativeElement.visuallyHidden;\n  }\n}\n",
      "selector": "sbb-title",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "name": "level",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "SbbTitleLevel",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "visual-level",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "SbbTitleLevel | null",
          "decorators": []
        },
        {
          "required": false,
          "name": "visually-hidden",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 42,
          "type": "boolean",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 19
          }
        },
        "level": {
          "name": "level",
          "setSignature": {
            "name": "level",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 24,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "level",
            "type": "",
            "returnType": "SbbTitleLevel",
            "line": 27
          }
        },
        "visualLevel": {
          "name": "visualLevel",
          "setSignature": {
            "name": "visualLevel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTitleLevel | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 33,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTitleLevel | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "visualLevel",
            "type": "",
            "returnType": "SbbTitleLevel | null",
            "line": 36
          }
        },
        "visuallyHidden": {
          "name": "visuallyHidden",
          "setSignature": {
            "name": "visuallyHidden",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 42,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "visuallyHidden",
            "type": "boolean",
            "returnType": "boolean",
            "line": 45
          }
        }
      }
    },
    {
      "name": "SbbToastDirective",
      "id": "directive-SbbToastDirective-fe05939667fc3f08651812134f2e6a2d1574b82768c0a61ba9bf551e3a017bcce7688c702fce023b878a4a5312d412cdd7961b7cd940d1ca5c3f5ac72d74b7f3",
      "file": "src/angular/toast/toast.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import {\n  Directive,\n  ElementRef,\n  Input,\n  NgZone,\n  Output,\n  inject,\n  numberAttribute,\n} from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbToastElement, SbbToastPosition } from '@sbb-esta/lyne-elements/toast.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/toast.js';\n\n@Directive({\n  selector: 'sbb-toast',\n  standalone: true,\n})\nexport class SbbToastDirective {\n  #element: ElementRef<SbbToastElement> = inject(ElementRef<SbbToastElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: numberAttribute })\n  public set timeout(value: number) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.timeout = value));\n  }\n  public get timeout(): number {\n    return this.#element.nativeElement.timeout;\n  }\n\n  @Input()\n  public set position(value: SbbToastPosition) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.position = value));\n  }\n  public get position(): SbbToastPosition {\n    return this.#element.nativeElement.position;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set dismissible(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.dismissible = value));\n  }\n  public get dismissible(): boolean {\n    return this.#element.nativeElement.dismissible;\n  }\n\n  @Input()\n  public set politeness(value: 'polite' | 'assertive' | 'off') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.politeness = value));\n  }\n  public get politeness(): 'polite' | 'assertive' | 'off' {\n    return this.#element.nativeElement.politeness;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Output() public willOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  );\n\n  @Output() public didOpen: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  );\n\n  @Output() public willClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  );\n\n  @Output() public didClose: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  );\n\n  public get isOpen(): boolean {\n    return this.#element.nativeElement.isOpen;\n  }\n\n  public open(): void {\n    return this.#element.nativeElement.open();\n  }\n\n  public close(): void {\n    return this.#element.nativeElement.close();\n  }\n}\n",
      "selector": "sbb-toast",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "dismissible",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 41,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 58,
          "type": "string",
          "decorators": []
        },
        {
          "name": "politeness",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 49,
          "type": "\"polite\" | \"assertive\" | \"off\"",
          "decorators": []
        },
        {
          "name": "position",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "SbbToastPosition",
          "decorators": []
        },
        {
          "required": false,
          "name": "timeout",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "number",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "didClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 80,
          "type": "Observable<void>"
        },
        {
          "name": "didOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'didOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 70,
          "type": "Observable<void>"
        },
        {
          "name": "willClose",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willClose',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 75,
          "type": "Observable<void>"
        },
        {
          "name": "willOpen",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'willOpen',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 65,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [
        {
          "name": "close",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 93,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        },
        {
          "name": "open",
          "args": [],
          "optional": false,
          "returnType": "void",
          "typeParameters": [],
          "line": 89,
          "deprecated": false,
          "deprecationMessage": "",
          "modifierKind": [125]
        }
      ],
      "extends": [],
      "accessors": {
        "timeout": {
          "name": "timeout",
          "setSignature": {
            "name": "timeout",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "number",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "timeout",
            "type": "number",
            "returnType": "number",
            "line": 28
          }
        },
        "position": {
          "name": "position",
          "setSignature": {
            "name": "position",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbToastPosition",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 33,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbToastPosition",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "position",
            "type": "",
            "returnType": "SbbToastPosition",
            "line": 36
          }
        },
        "dismissible": {
          "name": "dismissible",
          "setSignature": {
            "name": "dismissible",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 41,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "dismissible",
            "type": "boolean",
            "returnType": "boolean",
            "line": 44
          }
        },
        "politeness": {
          "name": "politeness",
          "setSignature": {
            "name": "politeness",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"polite\" | \"assertive\" | \"off\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 49,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"polite\" | \"assertive\" | \"off\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "politeness",
            "type": "",
            "returnType": "\"polite\" | \"assertive\" | \"off\"",
            "line": 52
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 58,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 61
          }
        },
        "isOpen": {
          "name": "isOpen",
          "getSignature": {
            "name": "isOpen",
            "type": "boolean",
            "returnType": "boolean",
            "line": 85
          }
        }
      }
    },
    {
      "name": "SbbToggleCheckDirective",
      "id": "directive-SbbToggleCheckDirective-f5582eef5221934e8469af3cff16faee413469cde18616a40e95a4c5c656a215a367dcc54c0ccf488f949897a6366a081a47437d520fc7ab217c4c5024a0276e",
      "file": "src/angular/toggle-check/toggle-check.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, Output, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbToggleCheckElement } from '@sbb-esta/lyne-elements/toggle-check.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/toggle-check.js';\n\n@Directive({\n  selector: 'sbb-toggle-check',\n  standalone: true,\n})\nexport class SbbToggleCheckDirective {\n  #element: ElementRef<SbbToggleCheckElement> = inject(ElementRef<SbbToggleCheckElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: 'xs' | 's' | 'm') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): 'xs' | 's' | 'm' {\n    return this.#element.nativeElement.size;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'label-position' })\n  public set labelPosition(value: 'before' | 'after') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.labelPosition = value));\n  }\n  public get labelPosition(): 'before' | 'after' {\n    return this.#element.nativeElement.labelPosition;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set checked(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.checked = value));\n  }\n  public get checked(): boolean {\n    return this.#element.nativeElement.checked;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set required(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.required = value));\n  }\n  public get required(): boolean {\n    return this.#element.nativeElement.required;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public change: Observable<Event> = fromEvent<Event>(\n    this.#element.nativeElement,\n    'change',\n  );\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public input: Observable<InputEvent> = fromEvent<InputEvent>(\n    this.#element.nativeElement,\n    'input',\n  );\n\n  public get type(): string {\n    return this.#element.nativeElement.type;\n  }\n\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n}\n",
      "selector": "sbb-toggle-check",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "checked",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 51,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "label-position",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 35,
          "type": "\"before\" | \"after\"",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 67,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "required",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 59,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "\"xs\" | \"s\" | \"m\"",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 75,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "change",
          "defaultValue": "fromEvent<Event>(\n    this.#element.nativeElement,\n    'change',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 83,
          "type": "Observable<Event>"
        },
        {
          "name": "input",
          "defaultValue": "fromEvent<InputEvent>(\n    this.#element.nativeElement,\n    'input',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 89,
          "type": "Observable<InputEvent>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"xs\" | \"s\" | \"m\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"xs\" | \"s\" | \"m\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "\"xs\" | \"s\" | \"m\"",
            "line": 20
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 29
          }
        },
        "labelPosition": {
          "name": "labelPosition",
          "setSignature": {
            "name": "labelPosition",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"before\" | \"after\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 35,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"before\" | \"after\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "labelPosition",
            "type": "",
            "returnType": "\"before\" | \"after\"",
            "line": 38
          }
        },
        "checked": {
          "name": "checked",
          "setSignature": {
            "name": "checked",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 43,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "checked",
            "type": "boolean",
            "returnType": "boolean",
            "line": 46
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 51,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 54
          }
        },
        "required": {
          "name": "required",
          "setSignature": {
            "name": "required",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 59,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "required",
            "type": "boolean",
            "returnType": "boolean",
            "line": 62
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 67,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 70
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 75,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 78
          }
        },
        "type": {
          "name": "type",
          "getSignature": {
            "name": "type",
            "type": "string",
            "returnType": "string",
            "line": 94
          }
        },
        "form": {
          "name": "form",
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 98
          }
        }
      }
    },
    {
      "name": "SbbToggleDirective",
      "id": "directive-SbbToggleDirective-35d707f055908f1cf995bfc74cf8db0d9e91646468939bf7ed7e98a08ee497ec34c630ca6b30e0f705d36375317a095fd6e46854e0fa4bdaf25e2d95cd06ce6e",
      "file": "src/angular/toggle/toggle/toggle.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, Output, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbToggleOptionElement } from '@sbb-esta/lyne-elements/toggle/toggle-option.js';\nimport type { SbbToggleElement } from '@sbb-esta/lyne-elements/toggle/toggle.js';\nimport { fromEvent, type Observable } from 'rxjs';\nimport '@sbb-esta/lyne-elements/toggle/toggle.js';\n\n@Directive({\n  selector: 'sbb-toggle',\n  standalone: true,\n})\nexport class SbbToggleDirective {\n  #element: ElementRef<SbbToggleElement> = inject(ElementRef<SbbToggleElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set even(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.even = value));\n  }\n  public get even(): boolean {\n    return this.#element.nativeElement.even;\n  }\n\n  @Input()\n  public set size(value: 's' | 'm') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): 's' | 'm' {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input()\n  public set value(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string {\n    return this.#element.nativeElement.value;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-output-native\n  @Output() public change: Observable<void> = fromEvent<void>(\n    this.#element.nativeElement,\n    'change',\n  );\n\n  public get options(): SbbToggleOptionElement[] {\n    return this.#element.nativeElement.options;\n  }\n}\n",
      "selector": "sbb-toggle",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 18,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "even",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "\"s\" | \"m\"",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 42,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [
        {
          "name": "change",
          "defaultValue": "fromEvent<void>(\n    this.#element.nativeElement,\n    'change',\n  )",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 50,
          "type": "Observable<void>"
        }
      ],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 18,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 21
          }
        },
        "even": {
          "name": "even",
          "setSignature": {
            "name": "even",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "even",
            "type": "boolean",
            "returnType": "boolean",
            "line": 29
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"s\" | \"m\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 34,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"s\" | \"m\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "\"s\" | \"m\"",
            "line": 37
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 42,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "string",
            "returnType": "string",
            "line": 45
          }
        },
        "options": {
          "name": "options",
          "getSignature": {
            "name": "options",
            "type": "[]",
            "returnType": "SbbToggleOptionElement[]",
            "line": 55
          }
        }
      }
    },
    {
      "name": "SbbToggleOptionDirective",
      "id": "directive-SbbToggleOptionDirective-942521ed11ee1377b46ea6257dde4405b4535cb4bcb82a8b18d7f833987f0887a0bf06fed03694da4acdde554561006bf07442dfd470645839f9750cafaae6e2",
      "file": "src/angular/toggle/toggle-option/toggle-option.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbToggleOptionElement } from '@sbb-esta/lyne-elements/toggle/toggle-option.js';\nimport '@sbb-esta/lyne-elements/toggle/toggle-option.js';\n\n@Directive({\n  selector: 'sbb-toggle-option',\n  standalone: true,\n})\nexport class SbbToggleOptionDirective {\n  #element: ElementRef<SbbToggleOptionElement> = inject(ElementRef<SbbToggleOptionElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set checked(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.checked = value));\n  }\n  public get checked(): boolean {\n    return this.#element.nativeElement.checked;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set value(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string {\n    return this.#element.nativeElement.value;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n}\n",
      "selector": "sbb-toggle-option",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "checked",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 24,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 41,
          "type": "string",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 32,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "checked": {
          "name": "checked",
          "setSignature": {
            "name": "checked",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "checked",
            "type": "boolean",
            "returnType": "boolean",
            "line": 19
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 24,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 27
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 32,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "string",
            "returnType": "string",
            "line": 35
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 41,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 44
          }
        }
      }
    },
    {
      "name": "SbbTrainBlockedPassageDirective",
      "id": "directive-SbbTrainBlockedPassageDirective-c15c657f6c4765ab032d1c164694194aa9615ab4b7cfb712e2c4b2bb978d6a958fe96777329da9917a88c0c823908008c5789f403b459ffb3751ce5a5f7ed8fa",
      "file": "src/angular/train/train-blocked-passage/train-blocked-passage.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive } from '@angular/core';\nimport '@sbb-esta/lyne-elements/train/train-blocked-passage.js';\n\n@Directive({\n  selector: 'sbb-train-blocked-passage',\n  standalone: true,\n})\nexport class SbbTrainBlockedPassageDirective {}\n",
      "selector": "sbb-train-blocked-passage",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": []
    },
    {
      "name": "SbbTrainDirective",
      "id": "directive-SbbTrainDirective-2dd3adabd84b62e87de5925afb2dd9e7b48fe43502745787079e161496840172c01b72df5528e9bbcc2f32e6e24ab1b3ffb8b90cd0dfd2d80cbbfd6b68ce8b98",
      "file": "src/angular/train/train/train.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { SbbTitleLevel } from '@sbb-esta/lyne-elements/title.js';\nimport type { SbbTrainElement } from '@sbb-esta/lyne-elements/train/train.js';\nimport '@sbb-esta/lyne-elements/train/train.js';\n\n@Directive({\n  selector: 'sbb-train',\n  standalone: true,\n})\nexport class SbbTrainDirective {\n  #element: ElementRef<SbbTrainElement> = inject(ElementRef<SbbTrainElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'direction-label' })\n  public set directionLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.directionLabel = value));\n  }\n  public get directionLabel(): string {\n    return this.#element.nativeElement.directionLabel;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'direction-label-level' })\n  public set directionLabelLevel(value: SbbTitleLevel) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.directionLabelLevel = value));\n  }\n  public get directionLabelLevel(): SbbTitleLevel {\n    return this.#element.nativeElement.directionLabelLevel;\n  }\n\n  @Input()\n  public set station(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.station = value));\n  }\n  public get station(): string {\n    return this.#element.nativeElement.station;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n\n  @Input()\n  public set direction(value: 'left' | 'right') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.direction = value));\n  }\n  public get direction(): 'left' | 'right' {\n    return this.#element.nativeElement.direction;\n  }\n}\n",
      "selector": "sbb-train",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 43,
          "type": "string",
          "decorators": []
        },
        {
          "name": "direction",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 51,
          "type": "\"left\" | \"right\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "direction-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "direction-label-level",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 26,
          "type": "SbbTitleLevel",
          "decorators": []
        },
        {
          "name": "station",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 34,
          "type": "string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "directionLabel": {
          "name": "directionLabel",
          "setSignature": {
            "name": "directionLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "directionLabel",
            "type": "string",
            "returnType": "string",
            "line": 20
          }
        },
        "directionLabelLevel": {
          "name": "directionLabelLevel",
          "setSignature": {
            "name": "directionLabelLevel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 26,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbTitleLevel",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "directionLabelLevel",
            "type": "",
            "returnType": "SbbTitleLevel",
            "line": 29
          }
        },
        "station": {
          "name": "station",
          "setSignature": {
            "name": "station",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 34,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "station",
            "type": "string",
            "returnType": "string",
            "line": 37
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 43,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 46
          }
        },
        "direction": {
          "name": "direction",
          "setSignature": {
            "name": "direction",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"left\" | \"right\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 51,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"left\" | \"right\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "direction",
            "type": "",
            "returnType": "\"left\" | \"right\"",
            "line": 54
          }
        }
      }
    },
    {
      "name": "SbbTrainFormationDirective",
      "id": "directive-SbbTrainFormationDirective-3f7e769215e9d66f44a1a47c4208f03a73bdd63f85b6e81f5701d1afbc0dfa04c2440d4ea8c2dd934025081a9730cb10797c8bc164075c7feee75e443c32e2d6",
      "file": "src/angular/train/train-formation/train-formation.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport type { SbbTrainFormationElement } from '@sbb-esta/lyne-elements/train/train-formation.js';\nimport '@sbb-esta/lyne-elements/train/train-formation.js';\n\n@Directive({\n  selector: 'sbb-train-formation',\n  standalone: true,\n})\nexport class SbbTrainFormationDirective {\n  #element: ElementRef<SbbTrainFormationElement> = inject(ElementRef<SbbTrainFormationElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set view(value: 'side' | 'top') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.view = value));\n  }\n  public get view(): 'side' | 'top' {\n    return this.#element.nativeElement.view;\n  }\n}\n",
      "selector": "sbb-train-formation",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "name": "view",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 15,
          "type": "\"side\" | \"top\"",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "view": {
          "name": "view",
          "setSignature": {
            "name": "view",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"side\" | \"top\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 15,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"side\" | \"top\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "view",
            "type": "",
            "returnType": "\"side\" | \"top\"",
            "line": 18
          }
        }
      }
    },
    {
      "name": "SbbTrainWagonDirective",
      "id": "directive-SbbTrainWagonDirective-08dc54cce09ed5e3249c7ac9fdb8b1413432e95f2dcc48d09027f8b21d49728215d9dc8d68048b7cf92654f91e7a476142d0cf637aaa87e1bec068cbdd0d3ada",
      "file": "src/angular/train/train-wagon/train-wagon.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { SbbOccupancy } from '@sbb-esta/lyne-elements/core/interfaces.js';\nimport type { SbbTrainWagonElement } from '@sbb-esta/lyne-elements/train/train-wagon.js';\nimport '@sbb-esta/lyne-elements/train/train-wagon.js';\n\n@Directive({\n  selector: 'sbb-train-wagon',\n  standalone: true,\n})\nexport class SbbTrainWagonDirective {\n  #element: ElementRef<SbbTrainWagonElement> = inject(ElementRef<SbbTrainWagonElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set type(\n    value:\n      | 'wagon'\n      | 'wagon-end-left'\n      | 'wagon-end-right'\n      | 'couchette'\n      | 'sleeping'\n      | 'restaurant'\n      | 'locomotive'\n      | 'closed',\n  ) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type():\n    | 'wagon'\n    | 'wagon-end-left'\n    | 'wagon-end-right'\n    | 'couchette'\n    | 'sleeping'\n    | 'restaurant'\n    | 'locomotive'\n    | 'closed' {\n    return this.#element.nativeElement.type;\n  }\n\n  @Input()\n  public set occupancy(value: SbbOccupancy | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.occupancy = value));\n  }\n  public get occupancy(): SbbOccupancy | null {\n    return this.#element.nativeElement.occupancy;\n  }\n\n  @Input()\n  public set sector(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.sector = value));\n  }\n  public get sector(): string {\n    return this.#element.nativeElement.sector;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'blocked-passage' })\n  public set blockedPassage(value: 'previous' | 'next' | 'both' | 'none') {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.blockedPassage = value));\n  }\n  public get blockedPassage(): 'previous' | 'next' | 'both' | 'none' {\n    return this.#element.nativeElement.blockedPassage;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'wagon-class' })\n  public set wagonClass(value: '1' | '2' | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.wagonClass = value));\n  }\n  public get wagonClass(): '1' | '2' | null {\n    return this.#element.nativeElement.wagonClass;\n  }\n\n  @Input()\n  public set label(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.label = value));\n  }\n  public get label(): string {\n    return this.#element.nativeElement.label;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'additional-accessibility-text' })\n  public set additionalAccessibilityText(value: string) {\n    this.#ngZone.runOutsideAngular(\n      () => (this.#element.nativeElement.additionalAccessibilityText = value),\n    );\n  }\n  public get additionalAccessibilityText(): string {\n    return this.#element.nativeElement.additionalAccessibilityText;\n  }\n}\n",
      "selector": "sbb-train-wagon",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "additional-accessibility-text",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 85,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "blocked-passage",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 59,
          "type": "\"previous\" | \"next\" | \"both\" | \"none\"",
          "decorators": []
        },
        {
          "name": "label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 76,
          "type": "string",
          "decorators": []
        },
        {
          "name": "occupancy",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 42,
          "type": "SbbOccupancy | null",
          "decorators": []
        },
        {
          "name": "sector",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 50,
          "type": "string",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 16,
          "type": "\"wagon\" | \"wagon-end-left\" | \"wagon-end-right\" | \"couchette\" | \"sleeping\" | \"restaurant\" | \"locomotive\" | \"closed\"",
          "decorators": []
        },
        {
          "required": false,
          "name": "wagon-class",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 68,
          "type": "\"1\" | \"2\" | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"wagon\" | \"wagon-end-left\" | \"wagon-end-right\" | \"couchette\" | \"sleeping\" | \"restaurant\" | \"locomotive\" | \"closed\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 16,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"wagon\" | \"wagon-end-left\" | \"wagon-end-right\" | \"couchette\" | \"sleeping\" | \"restaurant\" | \"locomotive\" | \"closed\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "\"wagon\" | \"wagon-end-left\" | \"wagon-end-right\" | \"couchette\" | \"sleeping\" | \"restaurant\" | \"locomotive\" | \"closed\"",
            "line": 29
          }
        },
        "occupancy": {
          "name": "occupancy",
          "setSignature": {
            "name": "occupancy",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbOccupancy | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 42,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbOccupancy | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "occupancy",
            "type": "",
            "returnType": "SbbOccupancy | null",
            "line": 45
          }
        },
        "sector": {
          "name": "sector",
          "setSignature": {
            "name": "sector",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 50,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "sector",
            "type": "string",
            "returnType": "string",
            "line": 53
          }
        },
        "blockedPassage": {
          "name": "blockedPassage",
          "setSignature": {
            "name": "blockedPassage",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"previous\" | \"next\" | \"both\" | \"none\"",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 59,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"previous\" | \"next\" | \"both\" | \"none\"",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "blockedPassage",
            "type": "",
            "returnType": "\"previous\" | \"next\" | \"both\" | \"none\"",
            "line": 62
          }
        },
        "wagonClass": {
          "name": "wagonClass",
          "setSignature": {
            "name": "wagonClass",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "\"1\" | \"2\" | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 68,
            "jsdoctags": [
              {
                "name": "value",
                "type": "\"1\" | \"2\" | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "wagonClass",
            "type": "",
            "returnType": "\"1\" | \"2\" | null",
            "line": 71
          }
        },
        "label": {
          "name": "label",
          "setSignature": {
            "name": "label",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 76,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "label",
            "type": "string",
            "returnType": "string",
            "line": 79
          }
        },
        "additionalAccessibilityText": {
          "name": "additionalAccessibilityText",
          "setSignature": {
            "name": "additionalAccessibilityText",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 85,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "additionalAccessibilityText",
            "type": "string",
            "returnType": "string",
            "line": 90
          }
        }
      }
    },
    {
      "name": "SbbTransparentButtonDirective",
      "id": "directive-SbbTransparentButtonDirective-88fcb96c6387c72b54208cf8decf09b8b577e5a1a435f2c871de8d093fa8098d8f64fb5373e046923f1583f909893e600a21b554477153c663a12a11d72d15ed",
      "file": "src/angular/button/transparent-button/transparent-button.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbTransparentButtonElement } from '@sbb-esta/lyne-elements/button/transparent-button.js';\nimport '@sbb-esta/lyne-elements/button/transparent-button.js';\nimport { SbbButtonSize } from '@sbb-esta/lyne-elements/button.js';\nimport { SbbButtonType } from '@sbb-esta/lyne-elements/core/base-elements.js';\n\n@Directive({\n  selector: 'sbb-transparent-button',\n  standalone: true,\n})\nexport class SbbTransparentButtonDirective {\n  #element: ElementRef<SbbTransparentButtonElement> = inject(\n    ElementRef<SbbTransparentButtonElement>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: SbbButtonSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbButtonSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'disabled-interactive', transform: booleanAttribute })\n  public set disabledInteractive(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabledInteractive = value));\n  }\n  public get disabledInteractive(): boolean {\n    return this.#element.nativeElement.disabledInteractive;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set form(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.form = value));\n  }\n  public get form(): HTMLFormElement | null {\n    return this.#element.nativeElement.form;\n  }\n\n  @Input()\n  public set name(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.name = value));\n  }\n  public get name(): string {\n    return this.#element.nativeElement.name;\n  }\n\n  @Input()\n  public set value(value: string | null) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.value = value));\n  }\n  public get value(): string | null {\n    return this.#element.nativeElement.value;\n  }\n\n  @Input()\n  public set type(value: SbbButtonType) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.type = value));\n  }\n  public get type(): SbbButtonType {\n    return this.#element.nativeElement.type;\n  }\n}\n",
      "selector": "sbb-transparent-button",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 54,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled-interactive",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 46,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "form",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 62,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 37,
          "type": "string",
          "decorators": []
        },
        {
          "name": "name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 70,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "SbbButtonSize",
          "decorators": []
        },
        {
          "name": "type",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 86,
          "type": "SbbButtonType",
          "decorators": []
        },
        {
          "name": "value",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 78,
          "type": "string | null",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 20,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbButtonSize",
            "line": 23
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 28,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 31
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 37,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 40
          }
        },
        "disabledInteractive": {
          "name": "disabledInteractive",
          "setSignature": {
            "name": "disabledInteractive",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 46,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabledInteractive",
            "type": "boolean",
            "returnType": "boolean",
            "line": 49
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 54,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 57
          }
        },
        "form": {
          "name": "form",
          "setSignature": {
            "name": "form",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 62,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "form",
            "type": "",
            "returnType": "HTMLFormElement | null",
            "line": 65
          }
        },
        "name": {
          "name": "name",
          "setSignature": {
            "name": "name",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 70,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "name",
            "type": "string",
            "returnType": "string",
            "line": 73
          }
        },
        "value": {
          "name": "value",
          "setSignature": {
            "name": "value",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 78,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string | null",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "value",
            "type": "",
            "returnType": "string | null",
            "line": 81
          }
        },
        "type": {
          "name": "type",
          "setSignature": {
            "name": "type",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 86,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonType",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "type",
            "type": "",
            "returnType": "SbbButtonType",
            "line": 89
          }
        }
      }
    },
    {
      "name": "SbbTransparentButtonLinkDirective",
      "id": "directive-SbbTransparentButtonLinkDirective-12865a86f645b845ed55c91eda1451475d8a76f8d9911e52dc4557c595dbc6cd8aa66a3d032179d2367e94d532c3e43741797e8d559d70a1070126761efa86e7",
      "file": "src/angular/button/transparent-button-link/transparent-button-link.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbTransparentButtonLinkElement } from '@sbb-esta/lyne-elements/button/transparent-button-link.js';\nimport '@sbb-esta/lyne-elements/button/transparent-button-link.js';\nimport { SbbButtonSize } from '@sbb-esta/lyne-elements/button.js';\nimport { LinkTargetType } from '@sbb-esta/lyne-elements/core/base-elements.js';\n\n@Directive({\n  selector: 'sbb-transparent-button-link',\n  standalone: true,\n})\nexport class SbbTransparentButtonLinkDirective {\n  #element: ElementRef<SbbTransparentButtonLinkElement> = inject(\n    ElementRef<SbbTransparentButtonLinkElement>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: SbbButtonSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbButtonSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'disabled-interactive', transform: booleanAttribute })\n  public set disabledInteractive(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabledInteractive = value));\n  }\n  public get disabledInteractive(): boolean {\n    return this.#element.nativeElement.disabledInteractive;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input()\n  public set href(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.href = value));\n  }\n  public get href(): string {\n    return this.#element.nativeElement.href;\n  }\n\n  @Input()\n  public set target(value: LinkTargetType | string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.target = value));\n  }\n  public get target(): LinkTargetType | string {\n    return this.#element.nativeElement.target;\n  }\n\n  @Input()\n  public set rel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.rel = value));\n  }\n  public get rel(): string {\n    return this.#element.nativeElement.rel;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set download(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.download = value));\n  }\n  public get download(): boolean {\n    return this.#element.nativeElement.download;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'accessibility-label' })\n  public set accessibilityLabel(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.accessibilityLabel = value));\n  }\n  public get accessibilityLabel(): string {\n    return this.#element.nativeElement.accessibilityLabel;\n  }\n}\n",
      "selector": "sbb-transparent-button-link",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "accessibility-label",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 95,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 54,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled-interactive",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 46,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "download",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 86,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "href",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 62,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 37,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 28,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "rel",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 78,
          "type": "string",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 20,
          "type": "SbbButtonSize",
          "decorators": []
        },
        {
          "name": "target",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 70,
          "type": "LinkTargetType | string",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 20,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbButtonSize",
            "line": 23
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 28,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 31
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 37,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 40
          }
        },
        "disabledInteractive": {
          "name": "disabledInteractive",
          "setSignature": {
            "name": "disabledInteractive",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 46,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabledInteractive",
            "type": "boolean",
            "returnType": "boolean",
            "line": 49
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 54,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 57
          }
        },
        "href": {
          "name": "href",
          "setSignature": {
            "name": "href",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 62,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "href",
            "type": "string",
            "returnType": "string",
            "line": 65
          }
        },
        "target": {
          "name": "target",
          "setSignature": {
            "name": "target",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 70,
            "jsdoctags": [
              {
                "name": "value",
                "type": "LinkTargetType | string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "target",
            "type": "",
            "returnType": "LinkTargetType | string",
            "line": 73
          }
        },
        "rel": {
          "name": "rel",
          "setSignature": {
            "name": "rel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 78,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "rel",
            "type": "string",
            "returnType": "string",
            "line": 81
          }
        },
        "download": {
          "name": "download",
          "setSignature": {
            "name": "download",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 86,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "download",
            "type": "boolean",
            "returnType": "boolean",
            "line": 89
          }
        },
        "accessibilityLabel": {
          "name": "accessibilityLabel",
          "setSignature": {
            "name": "accessibilityLabel",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 95,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "accessibilityLabel",
            "type": "string",
            "returnType": "string",
            "line": 98
          }
        }
      }
    },
    {
      "name": "SbbTransparentButtonStaticDirective",
      "id": "directive-SbbTransparentButtonStaticDirective-63604989e37f82cf7244e8ee5d01c3d95aecb5ca0983b945401e8ab5965564cca633596bcf5c02976408f91a49f7e16c278fd7a064715c4baab618a8fd8ba8a5",
      "file": "src/angular/button/transparent-button-static/transparent-button-static.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport type { SbbTransparentButtonStaticElement } from '@sbb-esta/lyne-elements/button/transparent-button-static.js';\nimport '@sbb-esta/lyne-elements/button/transparent-button-static.js';\nimport { SbbButtonSize } from '@sbb-esta/lyne-elements/button.js';\n\n@Directive({\n  selector: 'sbb-transparent-button-static',\n  standalone: true,\n})\nexport class SbbTransparentButtonStaticDirective {\n  #element: ElementRef<SbbTransparentButtonStaticElement> = inject(\n    ElementRef<SbbTransparentButtonStaticElement>,\n  );\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input()\n  public set size(value: SbbButtonSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbButtonSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n\n  // eslint-disable-next-line @angular-eslint/no-input-rename\n  @Input({ alias: 'icon-name' })\n  public set iconName(value: string) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.iconName = value));\n  }\n  public get iconName(): string {\n    return this.#element.nativeElement.iconName;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n}\n",
      "selector": "sbb-transparent-button-static",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 44,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "icon-name",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 36,
          "type": "string",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 27,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 19,
          "type": "SbbButtonSize",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 19,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbButtonSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbButtonSize",
            "line": 22
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 27,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 30
          }
        },
        "iconName": {
          "name": "iconName",
          "setSignature": {
            "name": "iconName",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 36,
            "jsdoctags": [
              {
                "name": "value",
                "type": "string",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "iconName",
            "type": "string",
            "returnType": "string",
            "line": 39
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 44,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 47
          }
        }
      }
    },
    {
      "name": "SbbVisualCheckboxDirective",
      "id": "directive-SbbVisualCheckboxDirective-76d2e51f9adf5f226477b9c389ccfc874154ff41bdc6e3d88a7204764a6257e482a12614801a60824267052cc2dcb6cfb29f35b5826e31b9d43826f043322b82",
      "file": "src/angular/visual-checkbox/visual-checkbox.ts",
      "type": "directive",
      "description": "",
      "rawdescription": "\n",
      "sourceCode": "import { Directive, ElementRef, Input, NgZone, inject } from '@angular/core';\nimport { booleanAttribute } from '@sbb-esta/lyne-angular/core';\nimport { SbbCheckboxSize } from '@sbb-esta/lyne-elements/checkbox.js';\nimport type { SbbVisualCheckboxElement } from '@sbb-esta/lyne-elements/visual-checkbox.js';\nimport '@sbb-esta/lyne-elements/visual-checkbox.js';\n\n@Directive({\n  selector: 'sbb-visual-checkbox',\n  standalone: true,\n})\nexport class SbbVisualCheckboxDirective {\n  #element: ElementRef<SbbVisualCheckboxElement> = inject(ElementRef<SbbVisualCheckboxElement>);\n  #ngZone: NgZone = inject(NgZone);\n\n  @Input({ transform: booleanAttribute })\n  public set checked(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.checked = value));\n  }\n  public get checked(): boolean {\n    return this.#element.nativeElement.checked;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set indeterminate(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.indeterminate = value));\n  }\n  public get indeterminate(): boolean {\n    return this.#element.nativeElement.indeterminate;\n  }\n\n  @Input()\n  public set size(value: SbbCheckboxSize) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.size = value));\n  }\n  public get size(): SbbCheckboxSize {\n    return this.#element.nativeElement.size;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set disabled(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.disabled = value));\n  }\n  public get disabled(): boolean {\n    return this.#element.nativeElement.disabled;\n  }\n\n  @Input({ transform: booleanAttribute })\n  public set negative(value: boolean) {\n    this.#ngZone.runOutsideAngular(() => (this.#element.nativeElement.negative = value));\n  }\n  public get negative(): boolean {\n    return this.#element.nativeElement.negative;\n  }\n}\n",
      "selector": "sbb-visual-checkbox",
      "providers": [],
      "hostDirectives": [],
      "standalone": true,
      "inputsClass": [
        {
          "required": false,
          "name": "checked",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 17,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "disabled",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 41,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "indeterminate",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 25,
          "type": "boolean",
          "decorators": []
        },
        {
          "required": false,
          "name": "negative",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 49,
          "type": "boolean",
          "decorators": []
        },
        {
          "name": "size",
          "deprecated": false,
          "deprecationMessage": "",
          "line": 33,
          "type": "SbbCheckboxSize",
          "decorators": []
        }
      ],
      "outputsClass": [],
      "deprecated": false,
      "deprecationMessage": "",
      "hostBindings": [],
      "hostListeners": [],
      "propertiesClass": [],
      "methodsClass": [],
      "extends": [],
      "accessors": {
        "checked": {
          "name": "checked",
          "setSignature": {
            "name": "checked",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 17,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "checked",
            "type": "boolean",
            "returnType": "boolean",
            "line": 20
          }
        },
        "indeterminate": {
          "name": "indeterminate",
          "setSignature": {
            "name": "indeterminate",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 25,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "indeterminate",
            "type": "boolean",
            "returnType": "boolean",
            "line": 28
          }
        },
        "size": {
          "name": "size",
          "setSignature": {
            "name": "size",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "SbbCheckboxSize",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 33,
            "jsdoctags": [
              {
                "name": "value",
                "type": "SbbCheckboxSize",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "size",
            "type": "",
            "returnType": "SbbCheckboxSize",
            "line": 36
          }
        },
        "disabled": {
          "name": "disabled",
          "setSignature": {
            "name": "disabled",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 41,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "disabled",
            "type": "boolean",
            "returnType": "boolean",
            "line": 44
          }
        },
        "negative": {
          "name": "negative",
          "setSignature": {
            "name": "negative",
            "type": "void",
            "deprecated": false,
            "deprecationMessage": "",
            "args": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": ""
              }
            ],
            "returnType": "void",
            "line": 49,
            "jsdoctags": [
              {
                "name": "value",
                "type": "boolean",
                "deprecated": false,
                "deprecationMessage": "",
                "tagName": {
                  "text": "param"
                }
              }
            ]
          },
          "getSignature": {
            "name": "negative",
            "type": "boolean",
            "returnType": "boolean",
            "line": 52
          }
        }
      }
    }
  ],
  "components": [],
  "modules": [],
  "miscellaneous": {
    "variables": [
      {
        "name": "breakpointNames",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/showcase/.storybook/preview.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Record<string, number>",
        "defaultValue": "breakpoints.reduce(\n  (current, next) => Object.assign(current, { [next.key]: next.value }),\n  {} as Record<string, number>,\n)"
      },
      {
        "name": "breakpoints",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/showcase/.storybook/preview.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "Object.entries(tokens)\n  .filter(([key]) => key.startsWith('SbbBreakpoint') && key.endsWith('Min'))\n  .map(([key, value]) => ({ key: getViewportName(key), value: value as number }))\n  .sort((a, b) => a.value - b.value)"
      },
      {
        "name": "Default",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/showcase/stories/button/button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{}"
      },
      {
        "name": "Disabled",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/showcase/stories/button/button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n  args: {\n    disabled: true\n  }\n}"
      },
      {
        "name": "getViewportName",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/showcase/.storybook/preview.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "(key: string): string =>\n  key.replace(/(^SbbBreakpoint|Min$)/g, '').toLowerCase()"
      },
      {
        "name": "Icon",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/showcase/stories/button/button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n  args: {\n    'icon-name': 'pie-small',\n    text: undefined\n  }\n}"
      },
      {
        "name": "meta",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/showcase/stories/button/button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Meta",
        "defaultValue": "{\n  decorators: [withActions],\n  title: 'elements/sbb-button',\n  component: SbbButtonDirective,\n  parameters: {\n    actions: { handles: ['click'] },\n    docs: { description: { component: readme } },\n  },\n  argTypes: {\n    text: {control: 'text'}\n  },\n  args: {\n    text: 'Button'\n  },\n  // render via template is needed due to the directive implementation\n  render: ({ text, ...args }) => ({\n    prop: { text, ...args },\n    template: `<sbb-button ${spreadArgs(args)}>${text ?? ''}</sbb-button>`,\n  }),\n}"
      },
      {
        "name": "Negative",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/showcase/stories/button/button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n  args: {\n    negative: true\n  }\n}"
      },
      {
        "name": "preview",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/showcase/.storybook/preview.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "Preview",
        "defaultValue": "{\n  tags: ['autodocs'],\n  parameters: {\n    breakpoints: {\n      breakpointNames,\n      debounceTimeout: 10,\n    },\n    docs: {\n      toc: {\n        ignoreSelector: '.docs-story h2',\n        headingSelector: 'h2',\n      },\n      source: { format: 'html' },\n    },\n    viewport: { viewports: storybookViewports },\n    backgrounds: { disable: true },\n  },\n}"
      },
      {
        "name": "SizeM",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/showcase/stories/button/button.stories.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "object",
        "defaultValue": "{\n  args: {\n    size: 'm'\n  }\n}"
      },
      {
        "name": "storybookViewports",
        "ctype": "miscellaneous",
        "subtype": "variable",
        "file": "src/showcase/.storybook/preview.ts",
        "deprecated": false,
        "deprecationMessage": "",
        "type": "",
        "defaultValue": "breakpoints.reduce(\n  (current, next) =>\n    Object.assign(current, {\n      [next.key]: {\n        name: `Breakpoint ${next.key}`,\n        styles: {\n          width: `${next.value || 320}px`,\n          height: '',\n        },\n      },\n    }),\n  {} as Record<string, number>,\n)"
      }
    ],
    "functions": [
      {
        "name": "booleanAttribute",
        "file": "src/angular/core/attribute-transform.ts",
        "ctype": "miscellaneous",
        "subtype": "function",
        "deprecated": false,
        "deprecationMessage": "",
        "description": "<p>Transform an attribute value to a boolean value.\nWe do not use the Angular implementation because it treats &#39;false&#39; as a false value,\nwhich does not align with the Lit and native interpretation.</p>\n",
        "args": [
          {
            "name": "value",
            "deprecated": false,
            "deprecationMessage": ""
          }
        ],
        "returnType": "boolean",
        "jsdoctags": [
          {
            "name": "value",
            "deprecated": false,
            "deprecationMessage": "",
            "tagName": {
              "text": "param"
            }
          }
        ]
      }
    ],
    "typealiases": [],
    "enumerations": [],
    "groupedVariables": {
      "src/showcase/.storybook/preview.ts": [
        {
          "name": "breakpointNames",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/showcase/.storybook/preview.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Record<string, number>",
          "defaultValue": "breakpoints.reduce(\n  (current, next) => Object.assign(current, { [next.key]: next.value }),\n  {} as Record<string, number>,\n)"
        },
        {
          "name": "breakpoints",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/showcase/.storybook/preview.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "Object.entries(tokens)\n  .filter(([key]) => key.startsWith('SbbBreakpoint') && key.endsWith('Min'))\n  .map(([key, value]) => ({ key: getViewportName(key), value: value as number }))\n  .sort((a, b) => a.value - b.value)"
        },
        {
          "name": "getViewportName",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/showcase/.storybook/preview.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "(key: string): string =>\n  key.replace(/(^SbbBreakpoint|Min$)/g, '').toLowerCase()"
        },
        {
          "name": "preview",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/showcase/.storybook/preview.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Preview",
          "defaultValue": "{\n  tags: ['autodocs'],\n  parameters: {\n    breakpoints: {\n      breakpointNames,\n      debounceTimeout: 10,\n    },\n    docs: {\n      toc: {\n        ignoreSelector: '.docs-story h2',\n        headingSelector: 'h2',\n      },\n      source: { format: 'html' },\n    },\n    viewport: { viewports: storybookViewports },\n    backgrounds: { disable: true },\n  },\n}"
        },
        {
          "name": "storybookViewports",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/showcase/.storybook/preview.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "",
          "defaultValue": "breakpoints.reduce(\n  (current, next) =>\n    Object.assign(current, {\n      [next.key]: {\n        name: `Breakpoint ${next.key}`,\n        styles: {\n          width: `${next.value || 320}px`,\n          height: '',\n        },\n      },\n    }),\n  {} as Record<string, number>,\n)"
        }
      ],
      "src/showcase/stories/button/button.stories.ts": [
        {
          "name": "Default",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/showcase/stories/button/button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{}"
        },
        {
          "name": "Disabled",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/showcase/stories/button/button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n  args: {\n    disabled: true\n  }\n}"
        },
        {
          "name": "Icon",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/showcase/stories/button/button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n  args: {\n    'icon-name': 'pie-small',\n    text: undefined\n  }\n}"
        },
        {
          "name": "meta",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/showcase/stories/button/button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "Meta",
          "defaultValue": "{\n  decorators: [withActions],\n  title: 'elements/sbb-button',\n  component: SbbButtonDirective,\n  parameters: {\n    actions: { handles: ['click'] },\n    docs: { description: { component: readme } },\n  },\n  argTypes: {\n    text: {control: 'text'}\n  },\n  args: {\n    text: 'Button'\n  },\n  // render via template is needed due to the directive implementation\n  render: ({ text, ...args }) => ({\n    prop: { text, ...args },\n    template: `<sbb-button ${spreadArgs(args)}>${text ?? ''}</sbb-button>`,\n  }),\n}"
        },
        {
          "name": "Negative",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/showcase/stories/button/button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n  args: {\n    negative: true\n  }\n}"
        },
        {
          "name": "SizeM",
          "ctype": "miscellaneous",
          "subtype": "variable",
          "file": "src/showcase/stories/button/button.stories.ts",
          "deprecated": false,
          "deprecationMessage": "",
          "type": "object",
          "defaultValue": "{\n  args: {\n    size: 'm'\n  }\n}"
        }
      ]
    },
    "groupedFunctions": {
      "src/angular/core/attribute-transform.ts": [
        {
          "name": "booleanAttribute",
          "file": "src/angular/core/attribute-transform.ts",
          "ctype": "miscellaneous",
          "subtype": "function",
          "deprecated": false,
          "deprecationMessage": "",
          "description": "<p>Transform an attribute value to a boolean value.\nWe do not use the Angular implementation because it treats &#39;false&#39; as a false value,\nwhich does not align with the Lit and native interpretation.</p>\n",
          "args": [
            {
              "name": "value",
              "deprecated": false,
              "deprecationMessage": ""
            }
          ],
          "returnType": "boolean",
          "jsdoctags": [
            {
              "name": "value",
              "deprecated": false,
              "deprecationMessage": "",
              "tagName": {
                "text": "param"
              }
            }
          ]
        }
      ]
    },
    "groupedEnumerations": {},
    "groupedTypeAliases": {}
  },
  "routes": [],
  "coverage": {
    "count": 0,
    "status": "low",
    "files": [
      {
        "filePath": "src/angular/accordion/accordion.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbAccordionDirective",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/angular/action-group/action-group.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbActionGroupDirective",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/angular/alert/alert-group/alert-group.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbAlertGroupDirective",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/angular/alert/alert/alert.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbAlertDirective",
        "coveragePercent": 0,
        "coverageCount": "0/13",
        "status": "low"
      },
      {
        "filePath": "src/angular/autocomplete-grid/autocomplete-grid-button/autocomplete-grid-button.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbAutocompleteGridButtonDirective",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/angular/autocomplete-grid/autocomplete-grid-cell/autocomplete-grid-cell.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbAutocompleteGridCellDirective",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/angular/autocomplete-grid/autocomplete-grid-optgroup/autocomplete-grid-optgroup.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbAutocompleteGridOptgroupDirective",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/angular/autocomplete-grid/autocomplete-grid-option/autocomplete-grid-option.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbAutocompleteGridOptionDirective",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/angular/autocomplete-grid/autocomplete-grid-row/autocomplete-grid-row.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbAutocompleteGridRowDirective",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/angular/autocomplete-grid/autocomplete-grid/autocomplete-grid.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbAutocompleteGridDirective",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/angular/autocomplete/autocomplete.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbAutocompleteDirective",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/angular/breadcrumb/breadcrumb-group/breadcrumb-group.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbBreadcrumbGroupDirective",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/angular/breadcrumb/breadcrumb/breadcrumb.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbBreadcrumbDirective",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/angular/button/accent-button-link/accent-button-link.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbAccentButtonLinkDirective",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/angular/button/accent-button-static/accent-button-static.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbAccentButtonStaticDirective",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/angular/button/accent-button/accent-button.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbAccentButtonDirective",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/angular/button/button-link/button-link.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbButtonLinkDirective",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/angular/button/button-static/button-static.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbButtonStaticDirective",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/angular/button/button/button.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbButtonDirective",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/angular/button/mini-button-group/mini-button-group.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbMiniButtonGroupDirective",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/angular/button/mini-button/mini-button.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbMiniButtonDirective",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/angular/button/secondary-button-link/secondary-button-link.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbSecondaryButtonLinkDirective",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/angular/button/secondary-button-static/secondary-button-static.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbSecondaryButtonStaticDirective",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/angular/button/secondary-button/secondary-button.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbSecondaryButtonDirective",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/angular/button/transparent-button-link/transparent-button-link.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTransparentButtonLinkDirective",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/angular/button/transparent-button-static/transparent-button-static.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTransparentButtonStaticDirective",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/angular/button/transparent-button/transparent-button.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTransparentButtonDirective",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/angular/calendar/calendar.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbCalendarDirective",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/angular/card/card-badge/card-badge.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbCardBadgeDirective",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/angular/card/card-button/card-button.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbCardButtonDirective",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/angular/card/card-link/card-link.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbCardLinkDirective",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/angular/card/card/card.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbCardDirective",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/angular/checkbox/checkbox-group/checkbox-group.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbCheckboxGroupDirective",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/angular/checkbox/checkbox-panel/checkbox-panel.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbCheckboxPanelDirective",
        "coveragePercent": 0,
        "coverageCount": "0/12",
        "status": "low"
      },
      {
        "filePath": "src/angular/checkbox/checkbox/checkbox.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbCheckboxDirective",
        "coveragePercent": 0,
        "coverageCount": "0/12",
        "status": "low"
      },
      {
        "filePath": "src/angular/chip-label/chip-label.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbChipLabelDirective",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/angular/clock/clock.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbClockDirective",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/angular/container/container/container.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbContainerDirective",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/angular/container/sticky-bar/sticky-bar.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbStickyBarDirective",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/angular/core/attribute-transform.ts",
        "type": "function",
        "linktype": "miscellaneous",
        "linksubtype": "function",
        "name": "booleanAttribute",
        "coveragePercent": 100,
        "coverageCount": "1/1",
        "status": "very-good"
      },
      {
        "filePath": "src/angular/datepicker/datepicker-next-day/datepicker-next-day.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbDatepickerNextDayDirective",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/angular/datepicker/datepicker-previous-day/datepicker-previous-day.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbDatepickerPreviousDayDirective",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/angular/datepicker/datepicker-toggle/datepicker-toggle.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbDatepickerToggleDirective",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/angular/datepicker/datepicker/datepicker.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbDatepickerDirective",
        "coveragePercent": 0,
        "coverageCount": "0/13",
        "status": "low"
      },
      {
        "filePath": "src/angular/dialog/dialog-actions/dialog-actions.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbDialogActionsDirective",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/angular/dialog/dialog-content/dialog-content.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbDialogContentDirective",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/angular/dialog/dialog-title/dialog-title.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbDialogTitleDirective",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/angular/dialog/dialog/dialog.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbDialogDirective",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/angular/divider/divider.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbDividerDirective",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/angular/expansion-panel/expansion-panel-content/expansion-panel-content.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbExpansionPanelContentDirective",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/angular/expansion-panel/expansion-panel-header/expansion-panel-header.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbExpansionPanelHeaderDirective",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/angular/expansion-panel/expansion-panel/expansion-panel.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbExpansionPanelDirective",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/angular/file-selector/file-selector-dropzone/file-selector-dropzone.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbFileSelectorDropzoneDirective",
        "coveragePercent": 0,
        "coverageCount": "0/16",
        "status": "low"
      },
      {
        "filePath": "src/angular/file-selector/file-selector/file-selector.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbFileSelectorDirective",
        "coveragePercent": 0,
        "coverageCount": "0/15",
        "status": "low"
      },
      {
        "filePath": "src/angular/flip-card/flip-card-details/flip-card-details.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbFlipCardDetailsDirective",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/angular/flip-card/flip-card-summary/flip-card-summary.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbFlipCardSummaryDirective",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/angular/flip-card/flip-card/flip-card.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbFlipCardDirective",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/angular/footer/footer.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbFooterDirective",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/angular/form-error/form-error.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbFormErrorDirective",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/angular/form-field/form-field-clear/form-field-clear.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbFormFieldClearDirective",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/angular/form-field/form-field/form-field.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbFormFieldDirective",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/angular/header/header-button/header-button.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbHeaderButtonDirective",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/angular/header/header-link/header-link.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbHeaderLinkDirective",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/angular/header/header/header.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbHeaderDirective",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/angular/icon/icon.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbIconDirective",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/angular/image/image.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbImageDirective",
        "coveragePercent": 0,
        "coverageCount": "0/15",
        "status": "low"
      },
      {
        "filePath": "src/angular/journey-header/journey-header.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbJourneyHeaderDirective",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/angular/lead-container/lead-container.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbLeadContainerDirective",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/angular/link-list/link-list-anchor/link-list-anchor.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbLinkListAnchorDirective",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/angular/link-list/link-list/link-list.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbLinkListDirective",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/angular/link/block-link-button/block-link-button.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbBlockLinkButtonDirective",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/angular/link/block-link-static/block-link-static.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbBlockLinkStaticDirective",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/angular/link/block-link/block-link.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbBlockLinkDirective",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/angular/link/link-button/link-button.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbLinkButtonDirective",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/angular/link/link-static/link-static.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbLinkStaticDirective",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/angular/link/link/link.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbLinkDirective",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/angular/loading-indicator-circle/loading-indicator-circle.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbLoadingIndicatorCircleDirective",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/angular/loading-indicator/loading-indicator.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbLoadingIndicatorDirective",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/angular/logo/logo.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbLogoDirective",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/angular/map-container/map-container.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbMapContainerDirective",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/angular/menu/menu-button/menu-button.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbMenuButtonDirective",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/angular/menu/menu-link/menu-link.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbMenuLinkDirective",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/angular/menu/menu/menu.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbMenuDirective",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/angular/message/message.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbMessageDirective",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/angular/navigation/navigation-button/navigation-button.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbNavigationButtonDirective",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/angular/navigation/navigation-link/navigation-link.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbNavigationLinkDirective",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/angular/navigation/navigation-list/navigation-list.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbNavigationListDirective",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/angular/navigation/navigation-marker/navigation-marker.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbNavigationMarkerDirective",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/angular/navigation/navigation-section/navigation-section.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbNavigationSectionDirective",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/angular/navigation/navigation/navigation.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbNavigationDirective",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/angular/notification/notification.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbNotificationDirective",
        "coveragePercent": 0,
        "coverageCount": "0/12",
        "status": "low"
      },
      {
        "filePath": "src/angular/option/optgroup/optgroup.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbOptGroupDirective",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/angular/option/option/option.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbOptionDirective",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/angular/overlay/overlay.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbOverlayDirective",
        "coveragePercent": 0,
        "coverageCount": "0/14",
        "status": "low"
      },
      {
        "filePath": "src/angular/paginator/compact-paginator/compact-paginator.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbCompactPaginatorDirective",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/angular/paginator/paginator/paginator.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbPaginatorDirective",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/angular/popover/popover-trigger/popover-trigger.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbPopoverTriggerDirective",
        "coveragePercent": 0,
        "coverageCount": "0/9",
        "status": "low"
      },
      {
        "filePath": "src/angular/popover/popover/popover.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbPopoverDirective",
        "coveragePercent": 0,
        "coverageCount": "0/13",
        "status": "low"
      },
      {
        "filePath": "src/angular/radio-button/radio-button-group/radio-button-group.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbRadioButtonGroupDirective",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/angular/radio-button/radio-button-panel/radio-button-panel.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbRadioButtonPanelDirective",
        "coveragePercent": 0,
        "coverageCount": "0/13",
        "status": "low"
      },
      {
        "filePath": "src/angular/radio-button/radio-button/radio-button.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbRadioButtonDirective",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/angular/screen-reader-only/screen-reader-only.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbScreenReaderOnlyDirective",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/angular/select/select.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbSelectDirective",
        "coveragePercent": 0,
        "coverageCount": "0/18",
        "status": "low"
      },
      {
        "filePath": "src/angular/selection-expansion-panel/selection-expansion-panel.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbSelectionExpansionPanelDirective",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/angular/signet/signet.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbSignetDirective",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/angular/skiplink-list/skiplink-list.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbSkiplinkListDirective",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/angular/slider/slider.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbSliderDirective",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/angular/status/status.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbStatusDirective",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/angular/stepper/step-label/step-label.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbStepLabelDirective",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/angular/stepper/step/step.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbStepDirective",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/angular/stepper/stepper/stepper.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbStepperDirective",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/angular/table/table-wrapper/table-wrapper.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTableWrapperDirective",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/angular/tabs/tab-group/tab-group.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTabGroupDirective",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/angular/tabs/tab-label/tab-label.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTabLabelDirective",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/angular/tabs/tab/tab.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTabDirective",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/angular/tag/tag-group/tag-group.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTagGroupDirective",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/angular/tag/tag/tag.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTagDirective",
        "coveragePercent": 0,
        "coverageCount": "0/14",
        "status": "low"
      },
      {
        "filePath": "src/angular/teaser-hero/teaser-hero.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTeaserHeroDirective",
        "coveragePercent": 0,
        "coverageCount": "0/7",
        "status": "low"
      },
      {
        "filePath": "src/angular/teaser-product/teaser-product-static/teaser-product-static.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTeaserProductStaticDirective",
        "coveragePercent": 0,
        "coverageCount": "0/3",
        "status": "low"
      },
      {
        "filePath": "src/angular/teaser-product/teaser-product/teaser-product.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTeaserProductDirective",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/angular/teaser/teaser.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTeaserDirective",
        "coveragePercent": 0,
        "coverageCount": "0/10",
        "status": "low"
      },
      {
        "filePath": "src/angular/time-input/time-input.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTimeInputDirective",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/angular/timetable-occupancy-icon/timetable-occupancy-icon.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTimetableOccupancyIconDirective",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/angular/timetable-occupancy/timetable-occupancy.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTimetableOccupancyDirective",
        "coveragePercent": 0,
        "coverageCount": "0/4",
        "status": "low"
      },
      {
        "filePath": "src/angular/title/title.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTitleDirective",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/angular/toast/toast.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbToastDirective",
        "coveragePercent": 0,
        "coverageCount": "0/12",
        "status": "low"
      },
      {
        "filePath": "src/angular/toggle-check/toggle-check.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbToggleCheckDirective",
        "coveragePercent": 0,
        "coverageCount": "0/11",
        "status": "low"
      },
      {
        "filePath": "src/angular/toggle/toggle-option/toggle-option.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbToggleOptionDirective",
        "coveragePercent": 0,
        "coverageCount": "0/5",
        "status": "low"
      },
      {
        "filePath": "src/angular/toggle/toggle/toggle.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbToggleDirective",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/angular/train/train-blocked-passage/train-blocked-passage.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTrainBlockedPassageDirective",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/angular/train/train-formation/train-formation.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTrainFormationDirective",
        "coveragePercent": 0,
        "coverageCount": "0/2",
        "status": "low"
      },
      {
        "filePath": "src/angular/train/train-wagon/train-wagon.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTrainWagonDirective",
        "coveragePercent": 0,
        "coverageCount": "0/8",
        "status": "low"
      },
      {
        "filePath": "src/angular/train/train/train.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbTrainDirective",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/angular/visual-checkbox/visual-checkbox.ts",
        "type": "directive",
        "linktype": "directive",
        "name": "SbbVisualCheckboxDirective",
        "coveragePercent": 0,
        "coverageCount": "0/6",
        "status": "low"
      },
      {
        "filePath": "src/showcase/.storybook/preview.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "breakpointNames",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/showcase/.storybook/preview.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "breakpoints",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/showcase/.storybook/preview.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "getViewportName",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/showcase/.storybook/preview.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "preview",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/showcase/.storybook/preview.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "storybookViewports",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/showcase/stories/button/button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Default",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/showcase/stories/button/button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Disabled",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/showcase/stories/button/button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Icon",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/showcase/stories/button/button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "meta",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/showcase/stories/button/button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "Negative",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      },
      {
        "filePath": "src/showcase/stories/button/button.stories.ts",
        "type": "variable",
        "linktype": "miscellaneous",
        "linksubtype": "variable",
        "name": "SizeM",
        "coveragePercent": 0,
        "coverageCount": "0/1",
        "status": "low"
      }
    ]
  }
}
